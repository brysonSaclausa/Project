{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { InitialState } from \"./InitialState\";\nconst goalsSlice = createSlice({\n  name: \"goalsSlice\",\n  initialState: InitialState,\n  reducers: {\n    userlogOut: (state, action) => {\n      state.isUserLogin = action.payload;\n    },\n    isLogin: (state, action) => {\n      state.isUserLogin = action.payload;\n    },\n    setCurrentUser: (state, action) => {\n      state.currentUser = action.payload;\n    },\n    allOrganizations: (state, action) => {\n      state.organizations = action.payload;\n    },\n    allFilterOrgGoals: (state, action) => {\n      state.OrgGoals = action.payload;\n      state.filterGoals = action.payload;\n    },\n    allOrganizationUsers: (state, action) => {\n      state.orgUsers = action.payload;\n    },\n    allCategories: (state, action) => {\n      state.categories = action.payload;\n    },\n    allSubmitOrgGoals: (state, action) => {\n      state.allSubmitGoals = action.payload;\n    },\n    setOrgApprovedGoals: (state, action) => {\n      state.allOrgApprovedGoals = action.payload;\n    },\n    setOrgDeclineGoals: (state, action) => {\n      state.allDeclineOrgGoals = action.payload;\n    },\n    setReportGoals: (state, action) => {\n      state.reportGoals = action.payload;\n    },\n    setFakeGoals: (state, action) => {\n      state.fakeGoals = action.payload;\n    },\n    // filters function for organiztions \n    setGoalsAtoZ: (state, action) => {\n      const sortGoal = state.OrgGoals.sort((a, b) => {\n        const isR = action.payload === \"ztoa\" ? -1 : 1;\n        return isR * a.inputValues.eventName.localeCompare(b.inputValues.eventName);\n      }); // console.log(sortGoal)\n\n      state.OrgGoals = sortGoal;\n    },\n    highToLow: (state, action) => {\n      const sort = state.OrgGoals.sort((a, b) => {\n        const high = action.payload === \"htl\" ? a.numberOfDays - b.numberOfDays : b.numberOfDays - a.numberOfDays;\n        return high;\n      });\n      state.OrgGoals = sort;\n    },\n    filterWithEndDate: (state, action) => {\n      // console.log(action.payload)\n      let dateFilter = state.filterGoals.filter(val => val.inputValues.endDate.includes(action.payload));\n      state.OrgGoals = dateFilter;\n    },\n    filterWithEventName: (state, action) => {\n      let filterGoals = state.filterGoals.filter(val => val.inputValues.eventName.toLowerCase().includes(action.payload.toLowerCase()));\n      state.OrgGoals = filterGoals;\n    },\n    selectedCategory: (state, action) => {\n      // let checkedValue = [];\n      // set value if user checkd\n      // if (action.payload.checked) {\n      //   // check wheater empty array or not\n      //   if (state.categorySelected.length > 0) {\n      //     let checkExistens = state.categorySelected.map(\n      //       (val) => val !== action.payload.cValue\n      //     );\n      //     if (checkExistens) {\n      //       state.categorySelected = [\n      //         ...state.categorySelected,\n      //         action.payload.cValue,\n      //       ];\n      //       let filterCheckedGoal = state.filterGoals.filter((val) => {\n      //         return state.categorySelected.includes(val.inputValues.category);\n      //       });\n      //       console.log(filterCheckedGoal);\n      //       state.OrgGoals = filterCheckedGoal;\n      //     }\n      //   } else if (state.categorySelected.length === 0) {\n      //     state.categorySelected = [action.payload.cValue];\n      //     let filterCheckedGoal = state.filterGoals.filter((val) => {\n      //       return state.categorySelected.includes(val.inputValues.category);\n      //     });\n      //     state.OrgGoals = filterCheckedGoal;\n      //   }\n      // }\n      // // remove value if user unchecked\n      // else if (!action.payload.checked) {\n      //   let checkExists = state.categorySelected.filter(\n      //     (val) => val !== action.payload.cValue\n      //   );\n      //   state.categorySelected = checkExists;\n      //   let filterCheckedGoal = state.filterGoals.filter((val) => {\n      //     return state.categorySelected.includes(val.inputValues.category);\n      //   });\n      //   state.OrgGoals = filterCheckedGoal;\n      // }\n      let filterGoalsWithCategory = state.filterGoals.filter(val => val.inputValues.category.toLowerCase().includes(action.payload.toLowerCase()));\n      state.OrgGoals = filterGoalsWithCategory;\n    },\n    // for without organization screens function\n    allWithoutOrggGoals: (state, action) => {\n      state.withoutOrgGoals = action.payload;\n      state.filterGoals = action.payload;\n    },\n    allWithoutOrganizationUsers: (state, action) => {\n      state.withoutOrgUser = action.payload;\n    },\n    // filters function for without organiztions \n    setWithoutOrgGoalsAtoZ: (state, action) => {\n      const sortGoal = state.withoutOrgGoals.sort((a, b) => {\n        const isR = action.payload === \"ztoa\" ? -1 : 1;\n        return isR * a.inputValues.eventName.localeCompare(b.inputValues.eventName);\n      }); // console.log(sortGoal)\n\n      state.withoutOrgGoals = sortGoal;\n    },\n    highToLowWithoutOrgGoals: (state, action) => {\n      const sort = state.withoutOrgGoals.sort((a, b) => {\n        const high = action.payload === \"htl\" ? a.numberOfDays - b.numberOfDays : b.numberOfDays - a.numberOfDays;\n        return high;\n      });\n      state.withoutOrgGoals = sort;\n    },\n    filterWithEndDateWithoutOrg: (state, action) => {\n      // console.log(action.payload)\n      let dateFilter = state.filterGoals.filter(val => val.inputValues.endDate.includes(action.payload));\n      state.withoutOrgGoals = dateFilter;\n    },\n    filterWithEventNameWithoutOrg: (state, action) => {\n      let filterGoals = state.filterGoals.filter(val => val.inputValues.eventName.toLowerCase().includes(action.payload.toLowerCase()));\n      state.withoutOrgGoals = filterGoals;\n    },\n    selectedCategoryWithoutOrg: (state, action) => {\n      let filterGoalsWithCategory = state.filterGoals.filter(val => val.inputValues.category.toLowerCase().includes(action.payload.toLowerCase()));\n      state.withoutOrgGoals = filterGoalsWithCategory;\n    },\n    setWithoutOrgSubmitGoals: (state, action) => {\n      state.withoutOrgSubmitGoals = action.payload;\n    },\n    setWithoutOrgApprovedGoals: (state, action) => {\n      state.withourOrgApprovedGoals = action.payload;\n    },\n    setWithoutOrgDeclineGoals: (state, action) => {\n      state.withourOrgDeclineGoals = action.payload;\n    },\n    setFakeGoalWithOutOrg: (state, action) => {\n      state.withoutOrgfakeGoal = action.payload;\n    }\n  }\n});\nexport const {\n  isLogin,\n  setCurrentUser,\n  allOrganizations,\n  userlogOut,\n  allFilterOrgGoals,\n  allOrganizationUsers,\n  allCategories,\n  setGoalsAtoZ,\n  highToLow,\n  filterWithEndDate,\n  filterWithEventName,\n  selectedCategory,\n  allWithoutOrggGoals,\n  allWithoutOrganizationUsers,\n  setWithoutOrgGoalsAtoZ,\n  highToLowWithoutOrgGoals,\n  filterWithEndDateWithoutOrg,\n  filterWithEventNameWithoutOrg,\n  selectedCategoryWithoutOrg,\n  allSubmitOrgGoals,\n  setWithoutOrgSubmitGoals,\n  setWithoutOrgApprovedGoals,\n  setWithoutOrgDeclineGoals,\n  setOrgApprovedGoals,\n  setOrgDeclineGoals,\n  setReportGoals,\n  setFakeGoals,\n  setFakeGoalWithOutOrg\n} = goalsSlice.actions;\nexport const goalReducer = goalsSlice.reducer;","map":{"version":3,"sources":["/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/CreateSlice.js"],"names":["createSlice","InitialState","goalsSlice","name","initialState","reducers","userlogOut","state","action","isUserLogin","payload","isLogin","setCurrentUser","currentUser","allOrganizations","organizations","allFilterOrgGoals","OrgGoals","filterGoals","allOrganizationUsers","orgUsers","allCategories","categories","allSubmitOrgGoals","allSubmitGoals","setOrgApprovedGoals","allOrgApprovedGoals","setOrgDeclineGoals","allDeclineOrgGoals","setReportGoals","reportGoals","setFakeGoals","fakeGoals","setGoalsAtoZ","sortGoal","sort","a","b","isR","inputValues","eventName","localeCompare","highToLow","high","numberOfDays","filterWithEndDate","dateFilter","filter","val","endDate","includes","filterWithEventName","toLowerCase","selectedCategory","filterGoalsWithCategory","category","allWithoutOrggGoals","withoutOrgGoals","allWithoutOrganizationUsers","withoutOrgUser","setWithoutOrgGoalsAtoZ","highToLowWithoutOrgGoals","filterWithEndDateWithoutOrg","filterWithEventNameWithoutOrg","selectedCategoryWithoutOrg","setWithoutOrgSubmitGoals","withoutOrgSubmitGoals","setWithoutOrgApprovedGoals","withourOrgApprovedGoals","setWithoutOrgDeclineGoals","withourOrgDeclineGoals","setFakeGoalWithOutOrg","withoutOrgfakeGoal","actions","goalReducer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { InitialState } from \"./InitialState\";\n\nconst goalsSlice = createSlice({\n  name: \"goalsSlice\",\n  initialState: InitialState,\n  reducers: {\n    userlogOut: (state, action) => {\n      state.isUserLogin = action.payload;\n    },\n    isLogin: (state, action) => {\n      state.isUserLogin = action.payload;\n    },\n    setCurrentUser: (state, action) => {\n      state.currentUser = action.payload;\n    },\n    allOrganizations: (state, action) => {\n      state.organizations = action.payload;\n    },\n    allFilterOrgGoals: (state, action) => {\n      state.OrgGoals = action.payload;\n      state.filterGoals = action.payload;\n    },\n    allOrganizationUsers: (state, action) => {\n      state.orgUsers = action.payload;\n    },\n    allCategories: (state, action) => {\n      state.categories = action.payload;\n    },\n    allSubmitOrgGoals:(state,action)=>{\n      state.allSubmitGoals = action.payload\n    },\n    setOrgApprovedGoals:(state,action)=>{\n      state.allOrgApprovedGoals = action.payload\n    },\n    setOrgDeclineGoals:(state,action)=>{\n      state.allDeclineOrgGoals = action.payload\n    },\n    setReportGoals:(state,action)=>{\n        state.reportGoals=action.payload\n    },\n    setFakeGoals:(state,action)=>{\n       state.fakeGoals = action.payload\n    },\n    // filters function for organiztions \n    setGoalsAtoZ: (state, action) => {\n      const sortGoal = state.OrgGoals.sort((a, b) => {\n        const isR = action.payload === \"ztoa\" ? -1 : 1;\n        return (\n          isR * a.inputValues.eventName.localeCompare(b.inputValues.eventName)\n        );\n      });\n      // console.log(sortGoal)\n      state.OrgGoals = sortGoal;\n    },\n    highToLow: (state, action) => {\n      const sort = state.OrgGoals.sort((a, b) => {\n        const high =\n          action.payload === \"htl\"\n            ? a.numberOfDays - b.numberOfDays\n            : b.numberOfDays - a.numberOfDays;\n        return high;\n      });\n      state.OrgGoals = sort;\n    },\n    filterWithEndDate: (state, action) => {\n      // console.log(action.payload)\n      let dateFilter = state.filterGoals.filter((val) =>\n        val.inputValues.endDate.includes(action.payload)\n      );\n      state.OrgGoals = dateFilter;\n    },\n    filterWithEventName: (state, action) => {\n      let filterGoals = state.filterGoals.filter((val) =>\n        val.inputValues.eventName\n          .toLowerCase()\n          .includes(action.payload.toLowerCase())\n      );\n      state.OrgGoals = filterGoals;\n    },\n    selectedCategory: (state, action) => {\n      // let checkedValue = [];\n\n      // set value if user checkd\n      // if (action.payload.checked) {\n      //   // check wheater empty array or not\n      //   if (state.categorySelected.length > 0) {\n      //     let checkExistens = state.categorySelected.map(\n      //       (val) => val !== action.payload.cValue\n      //     );\n      //     if (checkExistens) {\n      //       state.categorySelected = [\n      //         ...state.categorySelected,\n      //         action.payload.cValue,\n      //       ];\n\n      //       let filterCheckedGoal = state.filterGoals.filter((val) => {\n      //         return state.categorySelected.includes(val.inputValues.category);\n      //       });\n      //       console.log(filterCheckedGoal);\n      //       state.OrgGoals = filterCheckedGoal;\n      //     }\n      //   } else if (state.categorySelected.length === 0) {\n      //     state.categorySelected = [action.payload.cValue];\n      //     let filterCheckedGoal = state.filterGoals.filter((val) => {\n      //       return state.categorySelected.includes(val.inputValues.category);\n      //     });\n      //     state.OrgGoals = filterCheckedGoal;\n      //   }\n      // }\n      // // remove value if user unchecked\n      // else if (!action.payload.checked) {\n      //   let checkExists = state.categorySelected.filter(\n      //     (val) => val !== action.payload.cValue\n      //   );\n      //   state.categorySelected = checkExists;\n\n      //   let filterCheckedGoal = state.filterGoals.filter((val) => {\n      //     return state.categorySelected.includes(val.inputValues.category);\n      //   });\n      //   state.OrgGoals = filterCheckedGoal;\n      // }\n      let filterGoalsWithCategory = state.filterGoals.filter((val) =>\n        val.inputValues.category\n          .toLowerCase()\n          .includes(action.payload.toLowerCase())\n      );\n      state.OrgGoals = filterGoalsWithCategory;\n    },\n    // for without organization screens function\n    allWithoutOrggGoals: (state, action) => {\n      state.withoutOrgGoals = action.payload;\n      state.filterGoals = action.payload;\n    },\n    allWithoutOrganizationUsers: (state, action) => {\n      state.withoutOrgUser = action.payload;\n    },\n\n    // filters function for without organiztions \n    setWithoutOrgGoalsAtoZ: (state, action) => {\n      const sortGoal = state.withoutOrgGoals.sort((a, b) => {\n        const isR = action.payload === \"ztoa\" ? -1 : 1;\n        return (\n          isR * a.inputValues.eventName.localeCompare(b.inputValues.eventName)\n        );\n      });\n      // console.log(sortGoal)\n      state.withoutOrgGoals = sortGoal;\n    },\n    highToLowWithoutOrgGoals: (state, action) => {\n      const sort = state.withoutOrgGoals.sort((a, b) => {\n        const high =\n          action.payload === \"htl\"\n            ? a.numberOfDays - b.numberOfDays\n            : b.numberOfDays - a.numberOfDays;\n        return high;\n      });\n      state.withoutOrgGoals = sort;\n    },\n    filterWithEndDateWithoutOrg: (state, action) => {\n      // console.log(action.payload)\n      let dateFilter = state.filterGoals.filter((val) =>\n        val.inputValues.endDate.includes(action.payload)\n      );\n      state.withoutOrgGoals = dateFilter;\n    },\n    filterWithEventNameWithoutOrg: (state, action) => {\n      let filterGoals = state.filterGoals.filter((val) =>\n        val.inputValues.eventName\n          .toLowerCase()\n          .includes(action.payload.toLowerCase())\n      );\n      state.withoutOrgGoals = filterGoals;\n    },\n    selectedCategoryWithoutOrg: (state, action) => {\n      let filterGoalsWithCategory = state.filterGoals.filter((val) =>\n        val.inputValues.category\n          .toLowerCase()\n          .includes(action.payload.toLowerCase())\n      );\n      state.withoutOrgGoals = filterGoalsWithCategory;\n    },\n    setWithoutOrgSubmitGoals:(state,action)=>{\n      state.withoutOrgSubmitGoals = action.payload\n    },\n    setWithoutOrgApprovedGoals:(state,action)=>{\n      state.withourOrgApprovedGoals= action.payload\n    },\n    setWithoutOrgDeclineGoals:(state,action)=>{\n      state.withourOrgDeclineGoals= action.payload\n\n    },\n    setFakeGoalWithOutOrg:(state,action)=>{\n      state.withoutOrgfakeGoal = action.payload\n    }\n\n  },\n});\n\nexport const {\n  isLogin,\n  setCurrentUser,\n  allOrganizations,\n  userlogOut,\n  allFilterOrgGoals,\n  allOrganizationUsers,\n  allCategories,\n  setGoalsAtoZ,\n  highToLow,\n  filterWithEndDate,\n  filterWithEventName,\n  selectedCategory,\n  allWithoutOrggGoals,\n  allWithoutOrganizationUsers,\n  setWithoutOrgGoalsAtoZ,\n  highToLowWithoutOrgGoals,\n  filterWithEndDateWithoutOrg,\n  filterWithEventNameWithoutOrg,\n  selectedCategoryWithoutOrg,\n  allSubmitOrgGoals,\n  setWithoutOrgSubmitGoals,\n  setWithoutOrgApprovedGoals,\n  setWithoutOrgDeclineGoals,\n  setOrgApprovedGoals,\n  setOrgDeclineGoals,\n  setReportGoals,\n  setFakeGoals,\n  setFakeGoalWithOutOrg\n} = goalsSlice.actions;\n\nexport const goalReducer = goalsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}