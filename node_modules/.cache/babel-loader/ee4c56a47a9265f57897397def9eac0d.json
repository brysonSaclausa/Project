{"ast":null,"code":"var _jsxFileName = \"/Users/sidorelakollcaku/Desktop/Project/src/Pages/SignUp/SignUp.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SignupForm from '../../Components/SignupForm';\nimport firebase from '../../Config/FirebaseConfig';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport AlertDialog from '../../Components/AlertPopup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Signup = () => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  let [showAlert, setShowAlert] = useState(false);\n  let auth = firebase.auth();\n  let database = firebase.database();\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      organizationName: ''\n    },\n    onSubmit: values => {\n      setLoading(true); // organizations database ref\n\n      let orgDbRef = database.ref(`organizations`);\n      let orgId = '';\n      let enterTrueCode = false; // check user organization to set in perticular organization\n\n      orgDbRef.on('value', snapshot => {\n        snapshot.forEach(val => {\n          let getOrgData = val.val();\n\n          if (getOrgData.orgName.toLowerCase() === values.organizationName.toLowerCase()) {\n            orgId = val.key;\n            enterTrueCode = true;\n          }\n        });\n      }); // }\n\n      let orgUserDbRef = database.ref(`organizations/${orgId}/users`);\n      let withoutOrgUsers = database.ref(`withoutOrganization/users`);\n      auth.createUserWithEmailAndPassword(values.email, values.password).then(res => {\n        const {\n          uid,\n          email\n        } = res.user;\n        const dbRef = database.ref('users/' + uid);\n        const newUsers = dbRef.push(); // then set data of users in database\n\n        let userData = {\n          name: values.name,\n          number: values.number,\n          email,\n          password: values.password,\n          createdAt: new Date().toLocaleString(),\n          admin: false,\n          id: uid,\n          // url,\n          orgId,\n          orgName: values.organizationName,\n          balance: 0\n        }; // all users set\n\n        newUsers.set(userData); // set user in selected organization\n\n        if (!enterTrueCode) {\n          withoutOrgUsers.push().set(userData).then(() => {\n            setLoading(false);\n          }).catch(() => {\n            setLoading(false);\n          });\n        } else {\n          orgUserDbRef.push().set(userData).then(() => {\n            setLoading(false);\n            setLoading(false);\n          }).catch(() => {\n            setLoading(false);\n          });\n        }\n      }).catch(() => {\n        setShowAlert(true);\n      }) // handle error of download img\n      .catch(err => {\n        console.log(err);\n      });\n    },\n    validationSchema: yup.object().shape({\n      email: yup.string().email('Invalid Email').required('Email is required'),\n      password: yup.string().min(6, 'password is too Short!').max(20, 'password is too Long!').required('password is required'),\n      confirmPassword: yup.string().test('passwords-match', 'Passwords must match', function (value) {\n        return this.parent.password === value;\n      })\n    })\n  });\n\n  const handleClosePopup = () => {\n    setShowAlert(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showAlert ? /*#__PURE__*/_jsxDEV(AlertDialog, {\n      handleClose: handleClosePopup,\n      open: showAlert,\n      value: \"Email address already exists!\",\n      btnValue: \"OK\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(SignupForm, {\n      loading: loading,\n      formik: formik\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Signup, \"OU2R2PuC/zPl6iRy2bygRXwdt7I=\", false, function () {\n  return [useFormik];\n});\n\n_c = Signup;\nexport default Signup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"sources":["/Users/sidorelakollcaku/Desktop/Project/src/Pages/SignUp/SignUp.jsx"],"names":["React","useState","SignupForm","firebase","useFormik","yup","AlertDialog","Signup","loading","setLoading","showAlert","setShowAlert","auth","database","formik","initialValues","name","number","email","password","confirmPassword","organizationName","onSubmit","values","orgDbRef","ref","orgId","enterTrueCode","on","snapshot","forEach","val","getOrgData","orgName","toLowerCase","key","orgUserDbRef","withoutOrgUsers","createUserWithEmailAndPassword","then","res","uid","user","dbRef","newUsers","push","userData","createdAt","Date","toLocaleString","admin","id","balance","set","catch","err","console","log","validationSchema","object","shape","string","required","min","max","test","value","parent","handleClosePopup"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport SignupForm from '../../Components/SignupForm'\nimport firebase from '../../Config/FirebaseConfig'\nimport { useFormik } from 'formik'\nimport * as yup from 'yup'\nimport AlertDialog from '../../Components/AlertPopup'\n\nconst Signup = () => {\n  const [loading, setLoading] = useState(false)\n  let [showAlert, setShowAlert] = useState(false)\n  let auth = firebase.auth()\n  let database = firebase.database()\n\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      organizationName: '',\n    },\n    onSubmit: (values) => {\n      setLoading(true)\n      // organizations database ref\n\n      let orgDbRef = database.ref(`organizations`)\n      let orgId = ''\n      let enterTrueCode = false\n      // check user organization to set in perticular organization\n      orgDbRef.on('value', (snapshot) => {\n        snapshot.forEach((val) => {\n          let getOrgData = val.val()\n          if (\n            getOrgData.orgName.toLowerCase() ===\n            values.organizationName.toLowerCase()\n          ) {\n            orgId = val.key\n            enterTrueCode = true\n          }\n        })\n      })\n      // }\n      let orgUserDbRef = database.ref(`organizations/${orgId}/users`)\n      let withoutOrgUsers = database.ref(`withoutOrganization/users`)\n      auth\n        .createUserWithEmailAndPassword(values.email, values.password)\n        .then((res) => {\n          const { uid, email } = res.user\n          const dbRef = database.ref('users/' + uid)\n          const newUsers = dbRef.push()\n          // then set data of users in database\n          let userData = {\n            name: values.name,\n            number: values.number,\n            email,\n            password: values.password,\n            createdAt: new Date().toLocaleString(),\n            admin: false,\n            id: uid,\n            // url,\n            orgId,\n            orgName: values.organizationName,\n            balance: 0,\n          }\n          // all users set\n          newUsers.set(userData)\n          // set user in selected organization\n          if (!enterTrueCode) {\n            withoutOrgUsers\n              .push()\n              .set(userData)\n              .then(() => {\n                setLoading(false)\n              })\n              .catch(() => {\n                setLoading(false)\n              })\n          } else {\n            orgUserDbRef\n              .push()\n              .set(userData)\n              .then(() => {\n                setLoading(false)\n                setLoading(false)\n              })\n              .catch(() => {\n                setLoading(false)\n              })\n          }\n        })\n        .catch(() => {\n          setShowAlert(true)\n        })\n        // handle error of download img\n        .catch((err) => {\n          console.log(err)\n        })\n    },\n    validationSchema: yup.object().shape({\n      email: yup.string().email('Invalid Email').required('Email is required'),\n\n      password: yup\n        .string()\n        .min(6, 'password is too Short!')\n        .max(20, 'password is too Long!')\n        .required('password is required'),\n\n      confirmPassword: yup\n        .string()\n        .test('passwords-match', 'Passwords must match', function (value) {\n          return this.parent.password === value\n        }),\n    }),\n  })\n  const handleClosePopup = () => {\n    setShowAlert(false)\n  }\n  return (\n    <div>\n      {showAlert ? (\n        <AlertDialog\n          handleClose={handleClosePopup}\n          open={showAlert}\n          value=\"Email address already exists!\"\n          btnValue=\"OK\"\n        />\n      ) : null}\n      <SignupForm\n        loading={loading}\n        formik={formik}\n      />\n    </div>\n  )\n}\n\nexport default Signup\n"]},"metadata":{},"sourceType":"module"}