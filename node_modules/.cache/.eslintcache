[{"/Users/sidorelakollcaku/Desktop/Project1/src/index.js":"1","/Users/sidorelakollcaku/Desktop/Project1/src/App.js":"2","/Users/sidorelakollcaku/Desktop/Project1/src/reportWebVitals.js":"3","/Users/sidorelakollcaku/Desktop/Project1/src/Store/Store.js":"4","/Users/sidorelakollcaku/Desktop/Project1/src/GlobalState/UserSideSlice.js":"5","/Users/sidorelakollcaku/Desktop/Project1/src/GlobalState/CreateSlice.js":"6","/Users/sidorelakollcaku/Desktop/Project1/src/Router/Router.js":"7","/Users/sidorelakollcaku/Desktop/Project1/src/GlobalState/InitialState.js":"8","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/Login/Login.jsx":"9","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/VerificationGoal/DetailPage.jsx":"10","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/AllGoalsOfOrganization/DetailPage.jsx":"11","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/SignUp/SignUp.jsx":"12","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/StatusDetailPage.jsx":"13","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Profile/Profile.jsx":"14","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/Index.jsx":"15","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/UpdateGoals.jsx/Index.jsx":"16","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/Index.jsx":"17","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/Index.jsx":"18","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/Dashboard.jsx":"19","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/OrganizationLinks/Index.jsx":"20","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/Index.jsx":"21","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/Dashboard.jsx":"22","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/UpdateGoals.jsx/Index.jsx":"23","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/CreateGoals/Index.jsx":"24","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/Index.jsx":"25","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/Index.jsx":"26","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/Index.jsx":"27","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/VerificationGoal/index.jsx":"28","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/AllGoalsOfOrganization/index.jsx":"29","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Feed/index.jsx":"30","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Categories/index.jsx":"31","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/index.jsx":"32","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/index.jsx":"33","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/index.jsx":"34","/Users/sidorelakollcaku/Desktop/Project1/src/Config/FirebaseConfig.js":"35","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/UserList.jsx":"36","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/GoalsDetail.jsx":"37","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/SubmitGoalsTable.jsx":"38","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/Sidebar.jsx":"39","/Users/sidorelakollcaku/Desktop/Project1/src/Components/LoginForm.jsx":"40","/Users/sidorelakollcaku/Desktop/Project1/src/Components/InputPopup.jsx":"41","/Users/sidorelakollcaku/Desktop/Project1/src/Components/SignupForm.jsx":"42","/Users/sidorelakollcaku/Desktop/Project1/src/Components/AlertPopup.jsx":"43","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/CreateGoals.jsx":"44","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/GoalsDetail.jsx":"45","/Users/sidorelakollcaku/Desktop/Project1/src/Layout/Navbar.jsx":"46","/Users/sidorelakollcaku/Desktop/Project1/src/Components/SearchInput.jsx":"47","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/UserList.jsx":"48","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/CategoryList.jsx":"49","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Categories/CategoryList.jsx":"50","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/AllGoalsOfOrganization/GoalsTabs.jsx":"51","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Feed/UsersGoals.jsx":"52","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/ApprovedForm.jsx":"53","/Users/sidorelakollcaku/Desktop/Project1/src/Components/Button/Button.jsx":"54","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/GoalsTable.jsx":"55","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/OrganizationLinks/MainOrganization.jsx":"56","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/SubmitGoalsTable.jsx":"57","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/GoalsTable.jsx":"58","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/StatusTabs.jsx":"59","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/LineChart.jsx":"60","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/DonutChart.jsx":"61","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/MyGoalsList.jsx":"62","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Profile/UserDetailCard.jsx":"63","/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/GoalCard.jsx":"64","/Users/sidorelakollcaku/Desktop/PROJECT1/src/index.js":"65","/Users/sidorelakollcaku/Desktop/PROJECT1/src/reportWebVitals.js":"66","/Users/sidorelakollcaku/Desktop/PROJECT1/src/App.js":"67","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Store/Store.js":"68","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Router/Router.js":"69","/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/UserSideSlice.js":"70","/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/CreateSlice.js":"71","/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/InitialState.js":"72","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/SignUp/SignUp.jsx":"73","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/Login/Login.jsx":"74","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/Index.jsx":"75","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/VerificationGoal/DetailPage.jsx":"76","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/StatusDetailPage.jsx":"77","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Profile/Profile.jsx":"78","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/Index.jsx":"79","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/Index.jsx":"80","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/Index.jsx":"81","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/UpdateGoals.jsx/Index.jsx":"82","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/Dashboard.jsx":"83","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/OrganizationLinks/Index.jsx":"84","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/CreateGoals/Index.jsx":"85","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/Dashboard.jsx":"86","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/UpdateGoals.jsx/Index.jsx":"87","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/Index.jsx":"88","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/AllGoalsOfOrganization/DetailPage.jsx":"89","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/Index.jsx":"90","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/Index.jsx":"91","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/AllGoalsOfOrganization/index.jsx":"92","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/VerificationGoal/index.jsx":"93","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Feed/index.jsx":"94","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/index.jsx":"95","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Categories/index.jsx":"96","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/index.jsx":"97","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/index.jsx":"98","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Config/FirebaseConfig.js":"99","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/StatusTabs.jsx":"100","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/UserList.jsx":"101","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/SubmitGoalsTable.jsx":"102","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/Sidebar.jsx":"103","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/GoalsDetail.jsx":"104","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/CreateGoals.jsx":"105","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/SignupForm.jsx":"106","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/LoginForm.jsx":"107","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/InputPopup.jsx":"108","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/AlertPopup.jsx":"109","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Layout/Navbar.jsx":"110","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/SearchInput.jsx":"111","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/UserList.jsx":"112","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/CategoryList.jsx":"113","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Categories/CategoryList.jsx":"114","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Feed/UsersGoals.jsx":"115","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/GoalCard.jsx":"116","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/ApprovedForm.jsx":"117","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/Button/Button.jsx":"118","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/AllGoalsOfOrganization/GoalsTabs.jsx":"119","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/GoalsTable.jsx":"120","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/OrganizationLinks/MainOrganization.jsx":"121","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/GoalsTable.jsx":"122","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/GoalsDetail.jsx":"123","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/SubmitGoalsTable.jsx":"124","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/LineChart.jsx":"125","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/DonutChart.jsx":"126","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/MyGoalsList.jsx":"127","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Profile/UserDetailCard.jsx":"128"},{"size":569,"mtime":1635888743162,"results":"129","hashOfConfig":"130"},{"size":3124,"mtime":1635892787106,"results":"131","hashOfConfig":"130"},{"size":362,"mtime":1635591012000,"results":"132","hashOfConfig":"130"},{"size":377,"mtime":1635591012000,"results":"133","hashOfConfig":"130"},{"size":1944,"mtime":1635591012000,"results":"134","hashOfConfig":"130"},{"size":7487,"mtime":1635591012000,"results":"135","hashOfConfig":"130"},{"size":9093,"mtime":1635591012000,"results":"136","hashOfConfig":"130"},{"size":867,"mtime":1635591012000,"results":"137","hashOfConfig":"130"},{"size":1592,"mtime":1635591012000,"results":"138","hashOfConfig":"130"},{"size":32275,"mtime":1635591012000,"results":"139","hashOfConfig":"130"},{"size":11182,"mtime":1635591012000,"results":"140","hashOfConfig":"130"},{"size":3797,"mtime":1635591012000,"results":"141","hashOfConfig":"130"},{"size":8745,"mtime":1635591012000,"results":"142","hashOfConfig":"130"},{"size":1749,"mtime":1635591012000,"results":"143","hashOfConfig":"130"},{"size":3065,"mtime":1635591012000,"results":"144","hashOfConfig":"130"},{"size":5008,"mtime":1635591012000,"results":"145","hashOfConfig":"130"},{"size":950,"mtime":1635591012000,"results":"146","hashOfConfig":"130"},{"size":3894,"mtime":1635591012000,"results":"147","hashOfConfig":"130"},{"size":4829,"mtime":1635591012000,"results":"148","hashOfConfig":"130"},{"size":239,"mtime":1635591012000,"results":"149","hashOfConfig":"130"},{"size":5635,"mtime":1635591012000,"results":"150","hashOfConfig":"130"},{"size":5100,"mtime":1635591012000,"results":"151","hashOfConfig":"130"},{"size":5072,"mtime":1635591012000,"results":"152","hashOfConfig":"130"},{"size":3839,"mtime":1635591012000,"results":"153","hashOfConfig":"130"},{"size":2052,"mtime":1635591012000,"results":"154","hashOfConfig":"130"},{"size":2034,"mtime":1635591012000,"results":"155","hashOfConfig":"130"},{"size":5813,"mtime":1635591012000,"results":"156","hashOfConfig":"130"},{"size":4077,"mtime":1635591012000,"results":"157","hashOfConfig":"130"},{"size":4847,"mtime":1635591012000,"results":"158","hashOfConfig":"130"},{"size":3539,"mtime":1635591012000,"results":"159","hashOfConfig":"130"},{"size":677,"mtime":1635591012000,"results":"160","hashOfConfig":"130"},{"size":708,"mtime":1635591012000,"results":"161","hashOfConfig":"130"},{"size":1047,"mtime":1635591012000,"results":"162","hashOfConfig":"130"},{"size":1072,"mtime":1635591012000,"results":"163","hashOfConfig":"130"},{"size":630,"mtime":1635591012000,"results":"164","hashOfConfig":"130"},{"size":1992,"mtime":1635591012000,"results":"165","hashOfConfig":"130"},{"size":3619,"mtime":1635591012000,"results":"166","hashOfConfig":"130"},{"size":15544,"mtime":1635591012000,"results":"167","hashOfConfig":"130"},{"size":7498,"mtime":1635591012000,"results":"168","hashOfConfig":"130"},{"size":2407,"mtime":1635591012000,"results":"169","hashOfConfig":"130"},{"size":1606,"mtime":1635591012000,"results":"170","hashOfConfig":"130"},{"size":5323,"mtime":1635591012000,"results":"171","hashOfConfig":"130"},{"size":1549,"mtime":1635591012000,"results":"172","hashOfConfig":"130"},{"size":7164,"mtime":1635591012000,"results":"173","hashOfConfig":"130"},{"size":3599,"mtime":1635591012000,"results":"174","hashOfConfig":"130"},{"size":14439,"mtime":1635591012000,"results":"175","hashOfConfig":"130"},{"size":296,"mtime":1635591012000,"results":"176","hashOfConfig":"130"},{"size":2060,"mtime":1635591012000,"results":"177","hashOfConfig":"130"},{"size":3834,"mtime":1635591012000,"results":"178","hashOfConfig":"130"},{"size":3862,"mtime":1635591012000,"results":"179","hashOfConfig":"130"},{"size":4123,"mtime":1635591012000,"results":"180","hashOfConfig":"130"},{"size":13467,"mtime":1635591012000,"results":"181","hashOfConfig":"130"},{"size":2108,"mtime":1635591012000,"results":"182","hashOfConfig":"130"},{"size":591,"mtime":1635591012000,"results":"183","hashOfConfig":"130"},{"size":3491,"mtime":1635591012000,"results":"184","hashOfConfig":"130"},{"size":3232,"mtime":1635591012000,"results":"185","hashOfConfig":"130"},{"size":16563,"mtime":1635591012000,"results":"186","hashOfConfig":"130"},{"size":3684,"mtime":1635591012000,"results":"187","hashOfConfig":"130"},{"size":2665,"mtime":1635591012000,"results":"188","hashOfConfig":"130"},{"size":1788,"mtime":1635591012000,"results":"189","hashOfConfig":"130"},{"size":656,"mtime":1635591012000,"results":"190","hashOfConfig":"130"},{"size":6367,"mtime":1635591012000,"results":"191","hashOfConfig":"130"},{"size":11472,"mtime":1635591012000,"results":"192","hashOfConfig":"130"},{"size":1254,"mtime":1635591012000,"results":"193","hashOfConfig":"130"},{"size":569,"mtime":1635888743162,"results":"194","hashOfConfig":"195"},{"size":362,"mtime":1635591012000,"results":"196","hashOfConfig":"195"},{"size":3124,"mtime":1635892787106,"results":"197","hashOfConfig":"195"},{"size":377,"mtime":1635591012000,"results":"198","hashOfConfig":"195"},{"size":9093,"mtime":1635591012000,"results":"199","hashOfConfig":"195"},{"size":1944,"mtime":1635591012000,"results":"200","hashOfConfig":"195"},{"size":7487,"mtime":1635591012000,"results":"201","hashOfConfig":"195"},{"size":867,"mtime":1635591012000,"results":"202","hashOfConfig":"195"},{"size":3797,"mtime":1635591012000,"results":"203","hashOfConfig":"195"},{"size":1592,"mtime":1635591012000,"results":"204","hashOfConfig":"195"},{"size":950,"mtime":1635591012000,"results":"205","hashOfConfig":"195"},{"size":32275,"mtime":1635591012000,"results":"206","hashOfConfig":"195"},{"size":8745,"mtime":1635591012000,"results":"207","hashOfConfig":"195"},{"size":1749,"mtime":1635591012000,"results":"208","hashOfConfig":"195"},{"size":3065,"mtime":1635591012000,"results":"209","hashOfConfig":"195"},{"size":5635,"mtime":1635591012000,"results":"210","hashOfConfig":"195"},{"size":2052,"mtime":1635591012000,"results":"211","hashOfConfig":"195"},{"size":5008,"mtime":1635591012000,"results":"212","hashOfConfig":"195"},{"size":4829,"mtime":1635591012000,"results":"213","hashOfConfig":"195"},{"size":239,"mtime":1635591012000,"results":"214","hashOfConfig":"195"},{"size":3839,"mtime":1635591012000,"results":"215","hashOfConfig":"195"},{"size":5100,"mtime":1635591012000,"results":"216","hashOfConfig":"195"},{"size":5072,"mtime":1635591012000,"results":"217","hashOfConfig":"195"},{"size":3894,"mtime":1635591012000,"results":"218","hashOfConfig":"195"},{"size":11182,"mtime":1635591012000,"results":"219","hashOfConfig":"195"},{"size":2034,"mtime":1635591012000,"results":"220","hashOfConfig":"195"},{"size":5813,"mtime":1635591012000,"results":"221","hashOfConfig":"195"},{"size":4847,"mtime":1635591012000,"results":"222","hashOfConfig":"195"},{"size":4077,"mtime":1635591012000,"results":"223","hashOfConfig":"195"},{"size":3539,"mtime":1635591012000,"results":"224","hashOfConfig":"195"},{"size":1072,"mtime":1635591012000,"results":"225","hashOfConfig":"195"},{"size":677,"mtime":1635591012000,"results":"226","hashOfConfig":"195"},{"size":708,"mtime":1635591012000,"results":"227","hashOfConfig":"195"},{"size":1047,"mtime":1635591012000,"results":"228","hashOfConfig":"195"},{"size":630,"mtime":1635591012000,"results":"229","hashOfConfig":"195"},{"size":2665,"mtime":1635591012000,"results":"230","hashOfConfig":"195"},{"size":1992,"mtime":1635591012000,"results":"231","hashOfConfig":"195"},{"size":15544,"mtime":1635591012000,"results":"232","hashOfConfig":"195"},{"size":7498,"mtime":1635591012000,"results":"233","hashOfConfig":"195"},{"size":3619,"mtime":1635591012000,"results":"234","hashOfConfig":"195"},{"size":7164,"mtime":1635591012000,"results":"235","hashOfConfig":"195"},{"size":5323,"mtime":1635591012000,"results":"236","hashOfConfig":"195"},{"size":2407,"mtime":1635591012000,"results":"237","hashOfConfig":"195"},{"size":1606,"mtime":1635591012000,"results":"238","hashOfConfig":"195"},{"size":1549,"mtime":1635591012000,"results":"239","hashOfConfig":"195"},{"size":14439,"mtime":1635591012000,"results":"240","hashOfConfig":"195"},{"size":296,"mtime":1635591012000,"results":"241","hashOfConfig":"195"},{"size":2060,"mtime":1635591012000,"results":"242","hashOfConfig":"195"},{"size":3834,"mtime":1635591012000,"results":"243","hashOfConfig":"195"},{"size":3862,"mtime":1635591012000,"results":"244","hashOfConfig":"195"},{"size":13467,"mtime":1635591012000,"results":"245","hashOfConfig":"195"},{"size":1254,"mtime":1635591012000,"results":"246","hashOfConfig":"195"},{"size":2108,"mtime":1635591012000,"results":"247","hashOfConfig":"195"},{"size":591,"mtime":1635591012000,"results":"248","hashOfConfig":"195"},{"size":4123,"mtime":1635591012000,"results":"249","hashOfConfig":"195"},{"size":3491,"mtime":1635591012000,"results":"250","hashOfConfig":"195"},{"size":3232,"mtime":1635591012000,"results":"251","hashOfConfig":"195"},{"size":3684,"mtime":1635591012000,"results":"252","hashOfConfig":"195"},{"size":3599,"mtime":1635591012000,"results":"253","hashOfConfig":"195"},{"size":16563,"mtime":1635591012000,"results":"254","hashOfConfig":"195"},{"size":1788,"mtime":1635591012000,"results":"255","hashOfConfig":"195"},{"size":656,"mtime":1635591012000,"results":"256","hashOfConfig":"195"},{"size":6367,"mtime":1635591012000,"results":"257","hashOfConfig":"195"},{"size":11472,"mtime":1635591012000,"results":"258","hashOfConfig":"195"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ajafe8",{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"n3moto",{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"399"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"417"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"420"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547"},"/Users/sidorelakollcaku/Desktop/Project1/src/index.js",[],"/Users/sidorelakollcaku/Desktop/Project1/src/App.js",["548"],"/Users/sidorelakollcaku/Desktop/Project1/src/reportWebVitals.js",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Store/Store.js",["549"],"/Users/sidorelakollcaku/Desktop/Project1/src/GlobalState/UserSideSlice.js",[],"/Users/sidorelakollcaku/Desktop/Project1/src/GlobalState/CreateSlice.js",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Router/Router.js",["550"],"/Users/sidorelakollcaku/Desktop/Project1/src/GlobalState/InitialState.js",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/Login/Login.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/VerificationGoal/DetailPage.jsx",["551","552"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/AllGoalsOfOrganization/DetailPage.jsx",["553"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/SignUp/SignUp.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/StatusDetailPage.jsx",["554"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Profile/Profile.jsx",["555"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/Index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/UpdateGoals.jsx/Index.jsx",["556"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/Index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/Index.jsx",["557"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/Dashboard.jsx",["558"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/OrganizationLinks/Index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/Index.jsx",["559"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/Dashboard.jsx",["560"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/UpdateGoals.jsx/Index.jsx",["561"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/CreateGoals/Index.jsx",["562"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/Index.jsx",["563"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/Index.jsx",["564"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/Index.jsx",["565"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/VerificationGoal/index.jsx",["566"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/AllGoalsOfOrganization/index.jsx",["567","568","569"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Feed/index.jsx",["570","571"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Categories/index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/index.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Config/FirebaseConfig.js",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/UserList.jsx",["572"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/GoalsDetail.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/SubmitGoalsTable.jsx",["573","574","575","576"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/Sidebar.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Components/LoginForm.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Components/InputPopup.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Components/SignupForm.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Components/AlertPopup.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/CreateGoals.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/GoalsDetail.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Layout/Navbar.jsx",["577","578","579","580"],"/Users/sidorelakollcaku/Desktop/Project1/src/Components/SearchInput.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/UserList.jsx",["581"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/CategoryList.jsx",["582"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Categories/CategoryList.jsx",["583"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/AllGoalsOfOrganization/GoalsTabs.jsx",["584"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Feed/UsersGoals.jsx",["585","586"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/ApprovedForm.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Components/Button/Button.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/GoalsTable.jsx",["587"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/OrganizationLinks/MainOrganization.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/SubmitGoalsTable.jsx",["588","589","590","591"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/GoalsTable.jsx",["592","593","594"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/StatusTabs.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/LineChart.jsx",["595","596"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/DonutChart.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/MyGoal/MyGoalsList.jsx",[],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/Profile/UserDetailCard.jsx",["597"],"/Users/sidorelakollcaku/Desktop/Project1/src/Pages/UserSide/GoalsStatus/GoalCard.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/index.js",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/reportWebVitals.js",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/App.js",["598"],"import React, { useEffect, useState } from 'react'\nimport AppRouter from './Router/Router'\nimport firebase from 'firebase'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { allOrganizations } from './GlobalState/CreateSlice'\nimport logo from './Assets/logo.png'\nimport { isLogin, setCurrentUser } from './GlobalState/CreateSlice'\nimport {setAllUsersWholeApp} from './GlobalState/UserSideSlice'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n// import { send } from 'emailjs-com'\nimport { init } from 'emailjs-com'\nimport './App.css'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection:'column',\n    position:'relative',\n    '& > * + *': {\n      marginLeft: '0px',\n    },\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n}))\n\nfunction App() {\n  const classes = useStyles()\n  const dispatch = useDispatch()\n  let auth = firebase.auth()\n  let db = firebase.database()\n  // loading\n  let [loading, setLoading] = useState(true)\n\n  const selector = useSelector((state) => {\n    return state\n  })\n  const { goalReducer } = selector\n  // console.log(goalReducer)\n  // const checkUserLogin = () => {\n  //   setLoading(true)\n  // }\n  useEffect(() => {\n    init('user_y6bbBvCNzLoq9C7FeZYK0')\n    setLoading(true)\n    auth.onAuthStateChanged((user) => {\n      if (user) {\n        const dbRef = db.ref('users/' + user.uid)\n        dbRef.on('value', (snapshot) => {\n          snapshot.forEach((usersData) => {\n            const userData = usersData.val()\n            const userKey = usersData.key\n            userData.pushId = userKey \n            dispatch(setCurrentUser(userData))\n          })\n          dispatch(isLogin(true))\n          setLoading(false)\n        })\n      } else {\n        setLoading(false)\n      }\n    })\n    db.ref('organizations').on('value', (snapshot) => {\n      let organizationsArry = []\n      snapshot.forEach((data) => {\n        const getData = data.val()\n        const getId = data.key\n        getData.id = getId\n        organizationsArry.push(getData)\n      })\n      dispatch(allOrganizations(organizationsArry))\n    })\n    db.ref('users/').on('value',((snapshot)=>{\n      const usersArray = []\n      snapshot.forEach((users)=>{\n        users.forEach((user)=>{\n          const allUsers = user.val()\n          const allUsersKey = user.key\n          allUsers.pushId = allUsersKey\n          usersArray.push(allUsers)\n        // console.log(user.val(),user.key)\n        })\n        // console.log(users.val(),users.key)\n      })\n      dispatch(setAllUsersWholeApp(usersArray))\n    }))\n    // checkUserLogin();\n  }, [])\n\n  if (loading) {\n    return (\n      <div className='loaderCenter'>\n        <div className={classes.root}>\n          <img  className='appLogo' src={logo} alt='logo' />\n          <br />\n          <CircularProgress color=\"secondary\" />\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <AppRouter\n        isUser={goalReducer.isUserLogin}\n        cUser={goalReducer.currentUser}\n      />\n    </div>\n  )\n}\n\nexport default App\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Store/Store.js",["599"],"import {configureStore} from '@reduxjs/toolkit'\nimport {goalReducer} from '../GlobalState/CreateSlice'\nimport {userReducer} from '../GlobalState/UserSideSlice'\nimport logger from 'redux-logger'\n\n\nexport const store = configureStore({\n    reducer:{\n     goalReducer,\n     userReducer,\n    //  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n    }\n})","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Router/Router.js",["600"],"import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport Categories from '../Pages/DashboardScreens/WithOrganizations/Categories'\nimport Index from '../Pages/DashboardScreens/WithOrganizations/CreateGoals/Index'\nimport Dashboard from '../Pages/DashboardScreens/WithOrganizations/Dashboard/Dashboard'\nimport GoalsDetail from '../Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/Index'\nimport Organizations from '../Pages/DashboardScreens/OrganizationLinks/Index'\nimport OrganizationUsers from '../Pages/DashboardScreens/WithOrganizations/OrganizationUsers'\nimport UpdateGoals from '../Pages/DashboardScreens/WithOrganizations/UpdateGoals.jsx/Index'\nimport Login from '../Pages/Login/Login'\nimport Signup from '../Pages/SignUp/SignUp'\nimport WithoutOrganizationDashboard from '../Pages/DashboardScreens/WithOutOrganizations/Dashboard/Dashboard'\nimport WithOutOrgGoalsCreate from '../Pages/DashboardScreens/WithOutOrganizations/CreateGoals/Index'\nimport WithoutOrgCategories from '../Pages/DashboardScreens/WithOutOrganizations/Categories'\nimport WithoutOrgGoalDetail from '../Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/Index'\nimport WitoutOrgUpdateGoals from '../Pages/DashboardScreens/WithOutOrganizations/UpdateGoals.jsx/Index'\nimport WithoutOrganizationUsers from '../Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers'\n// user side\nimport Profile from '../Pages/UserSide/Profile/Profile'\nimport AllGoalsOfOrganization from '../Pages/UserSide/AllGoalsOfOrganization'\nimport SubmitedGoals from '../Pages/DashboardScreens/WithOrganizations/SubmitGoals/Index'\nimport WithoutOrgSubmitedGoals from '../Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/Index'\nimport MyAllGoals from '../Pages/UserSide/MyGoal/Index'\nimport DetailPage from '../Pages/UserSide/AllGoalsOfOrganization/DetailPage'\nimport VerificationPage from '../Pages/UserSide/VerificationGoal'\nimport StartGoalDetailPage from '../Pages/UserSide/VerificationGoal/DetailPage'\nimport GoalsStatus from '../Pages/UserSide/GoalsStatus/Index'\nimport StatusDetailPage from '../Pages/UserSide/GoalsStatus/StatusDetailPage'\nimport Feed from '../Pages/UserSide/Feed'\n\nconst AppRouter = ({ isUser, cUser }) => {\n  // console.log(isUser,cUser)\n  return (\n    <Router>\n      <Switch>\n        {/* user side routes  */}\n        <Route exact path=\"/selec-goals\">\n          {/* <MyAllGoals /> */}\n          {isUser ? <MyAllGoals /> : <Login />}\n        </Route>\n        <Route exact path=\"/search-goals\">\n          {/* <AllGoalsOfOrganization /> */}\n          {isUser ? <AllGoalsOfOrganization /> : <Login />}\n        </Route>\n        <Route exact path=\"/feed\">\n          {/* <Feed /> */}\n\n          {isUser ? <Feed /> : <Login />}\n        </Route>\n        <Route exact path=\"/goals-status\">\n          {/* <GoalsStatus /> */}\n\n          {isUser ? <GoalsStatus /> : <Login />}\n        </Route>\n        <Route exact path=\"/goals-status/:id\">\n          {/* <StatusDetailPage /> */}\n\n          {isUser ? <StatusDetailPage /> : <Login />}\n        </Route>\n\n        <Route exact path=\"/mygoal-detail/:id\">\n          {/* <StartGoalDetailPage /> */}\n          {isUser ? <StartGoalDetailPage /> : <Login />}\n        </Route>\n        <Route exact path=\"/goal-detail/:id\">\n          <DetailPage />\n\n          {/* {isUser ? (\n            cUser.admin === true ? (\n              <Redirect to=\"/organizations\" />\n            ) : (\n              // <MyAllGoals />\n              <DetailPage />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )} */}\n        </Route>\n        <Route exact path=\"/profile\">\n          {/* <Profile /> */}\n          {isUser ? <Profile /> : <Login />}\n        </Route>\n        {/* admin side route  */}\n        <Route exact path=\"/organizations/:id/dashboard\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <Dashboard />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route path=\"/login\">\n          {isUser ? (\n\n            <Redirect to=\"/selec-goals\" />\n          ) : (\n            <Login />\n          )}\n        </Route>\n        <Route exact path=\"/\">\n          {isUser ? (\n            // cUser.admin === true ? (\n            //   <Redirect to=\"/organizations\" />\n            // ) : (\n            <Redirect to=\"/selec-goals\" />\n          ) : (\n            // )\n            <Signup />\n          )}\n        </Route>\n        <Route exact path=\"/organizations/:id/create-goals\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <Index />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/organizations/:id/goals-detail/:goal\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <GoalsDetail />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/organizations/:id/edit-goal/:goal\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <UpdateGoals />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/organizations\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <Organizations />\n            ) : (\n              // <Dashboard />\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/organizations/:id/users\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <OrganizationUsers />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/organizations/:id/categories\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <Categories />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/organizations/:id/submit-goals\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <SubmitedGoals />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n\n        {/* without organization routes  */}\n        <Route exact path=\"/without-organization/dashboard\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WithoutOrganizationDashboard />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/without-organization/create-goals\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WithOutOrgGoalsCreate />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/without-organization/categories\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WithoutOrgCategories />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/without-organization/goals-detail/:goal\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WithoutOrgGoalDetail />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/without-organization/edit-goal/:goal\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WitoutOrgUpdateGoals />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/without-organization/users\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WithoutOrganizationUsers />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n        <Route exact path=\"/without-organization/submit-gaols\">\n          {isUser ? (\n            cUser.admin === true ? (\n              <WithoutOrgSubmitedGoals />\n            ) : (\n              <Redirect to=\"/selec-goals\" />\n            )\n          ) : (\n            <Redirect to=\"/login\" />\n          )}\n        </Route>\n      </Switch>\n    </Router>\n  )\n}\n\nexport default AppRouter\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/UserSideSlice.js",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/CreateSlice.js",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/GlobalState/InitialState.js",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/SignUp/SignUp.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/Login/Login.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/Index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/VerificationGoal/DetailPage.jsx",["601","602"],"import React from 'react'\nimport { useHistory, useParams } from 'react-router'\nimport { useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport MenuAppBar from '../../../Layout/Navbar'\nimport firebase from '../../../Config/FirebaseConfig'\nimport AlertDialog from '../../../Components/AlertPopup'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport FormDialog from '../../../Components/InputPopup'\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\n\nconst StartGoalDetailPage = () => {\n  const db = firebase.database()\n  const { id } = useParams()\n  const history = useHistory()\n  const [goalDetail, setGoalDetail] = useState([])\n  const [showPopup, setShowPopup] = useState(false)\n  let [loader, setLoader] = useState(false)\n  const selector = useSelector((state) => {\n    return state\n  })\n  const { userReducer, goalReducer } = selector\n  useEffect(() => {\n    const filterSelectedGoal = selector.userReducer.selectedGoals.filter(\n      (val) => val.id === id,\n    )\n    setGoalDetail(filterSelectedGoal)\n    setLoader(true)\n\n    return () => {\n      setGoalDetail([])\n    }\n  }, [])\n\n  // countdown timer working\n  const calculateTime = () => {\n    // if (goalDetail) {\n    const filterSelectedGoal = selector.userReducer.selectedGoals.filter(\n      (val) => val.id === id,\n    )\n    if (filterSelectedGoal.length) {\n      const date = new Date(filterSelectedGoal[0].GoalStartDate)\n      var myFutureDate = new Date(date)\n      let currentDate = new Date()\n      myFutureDate.setDate(\n        myFutureDate.getDate() +\n          Number(filterSelectedGoal[0].inputValues.numberOfDays),\n      )\n      const difference = myFutureDate - currentDate\n      // setEndDate(myFutureDate)\n      // console.log(myFutureDate)\n      let timeLeft = {}\n\n      if (difference > 0) {\n        timeLeft = {\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n          minutes: Math.floor((difference / 1000 / 60) % 60),\n          seconds: Math.floor((difference / 1000) % 60),\n        }\n      }\n\n      return timeLeft\n      // }\n    }\n  }\n  calculateTime()\n  const [timeLeft, setTimeLeft] = useState(calculateTime())\n  useEffect(() => {\n    if (loader) {\n      setLoader(false)\n    }\n    if (timeLeft) {\n      if (Object.keys(timeLeft).length !== 0) {\n        const timer = setTimeout(() => {\n          setTimeLeft(calculateTime())\n        }, 1000)\n        // Clear timeout if the component is unmounted\n        return () => clearTimeout(timer)\n      }\n    }\n  })\n\n  // submit goal working\n  let [open, setOpen] = useState(false)\n  let [goalId, setGoalId] = useState('')\n  let [myGoalId, setMyGoalId] = useState('')\n  const [imgUrl, setImgurl] = useState('')\n  const [imgName, setImgName] = useState('')\n  const [local, setLocal] = useState('')\n  let [loading, setLoading] = useState(false)\n  let [submitGoalKey, setSubmitGoalKey] = useState('')\n\n  const handleOpenForm = (event) => {\n    let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\n      (val) => val.id === event,\n    )\n    setMyGoalId(filterFormSelectedGoal[0].myGoalId)\n    setGoalId(event)\n    setOpen(true)\n    db.ref(`organizations/${goalReducer.currentUser.orgId}/submitGoals`).on(\n      'value',\n      (snap) => {\n        snap.forEach((sGoal) => {\n          if (sGoal.val().SubmitGoal.id === event) {\n            const getSelecGoalKey = sGoal.key\n            setSubmitGoalKey(getSelecGoalKey)\n          }\n          // console.log(sGoal.val(),event);\n        })\n      },\n    )\n    console.log('unreport')\n  }\n  const handleCloseSubmitForm = () => {\n    setOpen(false)\n  }\n\n  const handleSelectImg = (event) => {\n    const url = URL.createObjectURL(event.target.files[0])\n    const goalImgName = event.target.files[0].name\n    setImgurl(url)\n    setImgName(goalImgName)\n    setLocal(event.target.files[0])\n  }\n\n  // firebase storage ref\n  const storage = firebase.storage()\n  let createStorageRef = () => storage.ref(`SubmitImages/${imgName}`).put(local)\n  let downLoad = () => storage.ref(`SubmitImages/${imgName}`).getDownloadURL()\n\n  const handleSubmitGoal = () => {\n    let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\n      (val) => val.id === goalId,\n    )\n    setLoading(true)\n    let myGoalObject = {\n      submit: true,\n      approved: false,\n      decline: false,\n      submitDate: new Date().toLocaleString(),\n      hasStarted: false,\n      isReport: false,\n      acceptReport: false,\n      pending: false,\n    }\n    // console.log(filterFormSelectedGoal[0]);\n    if (!filterFormSelectedGoal[0].submit) {\n      if (local) {\n        createStorageRef()\n          .then(() => {\n            // download img from storage\n            downLoad()\n              .then((url) => {\n                // then set submit goals in database\n                if (goalReducer.currentUser.orgId !== '') {\n                  // user side update mygoals\n                  db.ref(\n                    `organizations/${goalReducer.currentUser.orgId}/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`,\n                  ).update(myGoalObject)\n                  // set insise organization\n                  if (!filterFormSelectedGoal[0].acceptReport) {\n                    db.ref(\n                      `organizations/${goalReducer.currentUser.orgId}/submitGoals`,\n                    )\n                      .push()\n                      .set({\n                        SubmitGoal: filterFormSelectedGoal[0],\n                        userName: goalReducer.currentUser.name,\n                        userIdMain: goalReducer.currentUser.id,\n                        uploadImgUlr: url,\n                        approved: false,\n                        decline: false,\n                        submit: true,\n                        hasStarted: false,\n                        submitDate: new Date().toLocaleString(),\n                        orgUserId: userReducer.currentUserOrgId,\n                        isReport: false,\n                        acceptReport: false,\n                        pending: false,\n                      })\n\n                      .then(() => {\n                        setImgurl('')\n                        setImgName('')\n                        setLocal('')\n                        setShowPopup(true)\n                        setLoading(false)\n\n                        console.log('submitted')\n                        handleClose()\n                      })\n                      .catch((err) => {\n                        console.log(err)\n                        setLoading(false)\n                        alert('connectionn failed try again')\n                      })\n                  } else {\n                    db.ref(\n                      `organizations/${goalReducer.currentUser.orgId}/submitGoals/${submitGoalKey}`,\n                    )\n                      .update({\n                        uploadImgUlr: url,\n                        approved: false,\n                        decline: false,\n                        submit: true,\n                        hasStarted: false,\n                        submitDate: new Date().toLocaleString(),\n                        isReport: false,\n                        acceptReport: false,\n                        pending: false,\n                      })\n                      .then(() => {\n                        setImgurl('')\n                        setImgName('')\n                        setLocal('')\n                        setShowPopup(true)\n                        setLoading(false)\n\n                        console.log('submitted')\n                        handleClose()\n                      })\n                      .catch((err) => {\n                        console.log(err)\n                        setLoading(false)\n                        alert('connectionn failed try again')\n                      })\n                  }\n                }\n                //    set submit goal if user not enrolled in any org\n                else {\n                  db.ref(\n                    `withoutOrganization/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`,\n                  ).update(myGoalObject)\n\n                  if (!filterFormSelectedGoal[0].acceptReport) {\n                    console.log('submitted')\n                    db.ref(`withoutOrganization/submitGoals`)\n                      .push()\n                      .set({\n                        SubmitGoal: filterFormSelectedGoal[0],\n                        userName: goalReducer.currentUser.name,\n                        userIdMain: goalReducer.currentUser.id,\n                        uploadImgUlr: url,\n                        approved: false,\n                        decline: false,\n                        orgUserId: userReducer.currentUserOrgId,\n                        hasStarted: false,\n                        submit: true,\n                        submitDate: new Date().toLocaleString(),\n                        isReport: false,\n                        acceptReport: false,\n                        pending: false,\n                      })\n                      .then(() => {\n                        setImgurl('')\n                        setImgName('')\n                        setLocal('')\n                        setShowPopup(true)\n                        setLoading(false)\n                        handleClose()\n                      })\n                      .catch((err) => {\n                        console.log(err)\n                        alert('connection failed try again')\n                        setLoading(false)\n                      })\n                  } else {\n                    db.ref(\n                      `withoutOrganization/submitGoals/${submitGoalKey}`,\n                    ).update({\n                      uploadImgUlr: url,\n                      approved: false,\n                      decline: false,\n                      submit: true,\n                      hasStarted: false,\n                      submitDate: new Date().toLocaleString(),\n                      isReport: false,\n                      acceptReport: false,\n                      pending: false,\n                    })\n                    .then(() => {\n                      setImgurl('')\n                      setImgName('')\n                      setLocal('')\n                      setShowPopup(true)\n                      setLoading(false)\n                      handleClose()\n                    })\n                    .catch((err) => {\n                      console.log(err)\n                      alert('connection failed try again')\n                      setLoading(false)\n                    })\n                  }\n                }\n              })\n              // handle error of download img\n              .catch((err) => {\n                console.log(err)\n              })\n          })\n          // handle error of upload img\n          .catch((err) => {\n            console.log(err)\n          })\n      } else {\n        alert('Please select image')\n      }\n    } else {\n      alert('already submitted')\n      setLoading(false)\n    }\n  }\n\n  // retry goal\n  const handleRetryGoal = (event) => {\n    // console.log(event,selector.userReducer)\n    // get submit goal key for retry\n    if (selector.goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      ).update({\n        decline: false,\n        submit: false,\n        pending: false,\n      })\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals`,\n      ).on('value', (snapshot) => {\n        snapshot.forEach((val) => {\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\n            // console.log(val.key)\n            db.ref(\n              `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals/${val.key}`,\n            )\n              .update({\n                decline: false,\n                submit: false,\n                pending: false,\n              })\n              .then(() => {\n                console.log('retry')\n                history.push('/goals-status')\n              })\n              .catch((err) => {\n                console.log(err)\n                alert('connection failed please try again')\n              })\n          }\n        })\n      })\n    }\n    //    set goal if user not enrolled in any org\n    else {\n      db.ref(\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      ).update({\n        decline: false,\n        submit: false,\n        pending: false,\n      })\n      db.ref(`withoutOrganization/submitGoals`).on('value', (snapshot) => {\n        snapshot.forEach((val) => {\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\n            // console.log(val.key)\n            db.ref(`withoutOrganization/submitGoals/${val.key}`)\n              .update({\n                decline: false,\n                submit: false,\n                pending: false,\n              })\n              .then(() => {\n                console.log('retry')\n                history.push('/goals-status')\n              })\n              .catch((err) => {\n                console.log(err)\n                alert('connection failed please try again')\n              })\n          }\n        })\n      })\n    }\n  }\n\n  // withdra pending goals\n\n  const handleWithDraw = (event) => {\n    // if (!filterFormSelectedGoal.length) {\n    let balance = ''\n    db.ref(\n      `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\n    ).on('value', (snapshot) => {\n      let userData = snapshot.val()\n      let userBalancedb = userData.balance\n      balance = userBalancedb\n    })\n\n    if (selector.goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\n      ).update({\n        balance: balance + Number(event.reward) +event.userInvestment,\n      })\n\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      ).update({\n        pending: false,\n      })\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals`,\n      ).on('value', (snapshot) => {\n        snapshot.forEach((val) => {\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\n            // console.log(val.key)\n            db.ref(\n              `organizations/${selector.goalReducer.currentUser.orgId}/submitGoals/${val.key}`,\n            )\n              .update({\n                pending: false,\n              })\n              .then(() => {\n                console.log('retry')\n                history.push('/goals-status')\n              })\n              .catch((err) => {\n                console.log(err)\n                alert('connection failed please try again')\n              })\n          }\n        })\n      })\n    }\n    //    set goal if user not enrolled in any org\n    else {\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\n      ).update({\n        balance: Number(balance) + Number(event.reward)+event.userInvestment,\n      })\n      db.ref(\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      ).update({\n        pending: true,\n      })\n      db.ref(`withoutOrganization/submitGoals`).on('value', (snapshot) => {\n        snapshot.forEach((val) => {\n          if (val.val().SubmitGoal.myGoalId === event.myGoalId) {\n            // console.log(val.key)\n            db.ref(`withoutOrganization/submitGoals/${val.key}`)\n              .update({\n                pending: false,\n              })\n              .then(() => {\n                console.log('retry')\n                history.push('/goals-status')\n              })\n              .catch((err) => {\n                console.log(err)\n                alert('connection failed please try again')\n              })\n          }\n        })\n      })\n    }\n  }\n\n  // // retake pic working\n  // let [retakeForm, setRetakeForm] = useState(false)\n  // // let [submitGoalKey, setSubmitGoalKey] = useState('')\n\n  // const handleOpenRetakeForm = (event) => {\n  //   let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\n  //     (val) => val.id === event,\n  //   )\n  //   setMyGoalId(filterFormSelectedGoal[0].myGoalId)\n  //   setGoalId(event)\n  //   setRetakeForm(true)\n  //   // get submit goal key to update submit goal\n  //   db.ref(`organizations/${goalReducer.currentUser.orgId}/submitGoals`).on(\n  //     'value',\n  //     (snap) => {\n  //       snap.forEach((sGoal) => {\n  //         if (sGoal.val().SubmitGoal.id === event) {\n  //           const getSelecGoalKey = sGoal.key\n  //           setSubmitGoalKey(getSelecGoalKey)\n  //         }\n  //         // console.log(sGoal.val(),event);\n  //       })\n  //     },\n  //   )\n  // }\n  // const handleReSubmitGoal = () => {\n  //   // console.log('resubmit',submitGoalKey)\n  //   let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\n  //     (val) => val.id === goalId,\n  //   )\n  //   setLoading(true)\n  //   let myGoalObject = {\n  //     submit: true,\n  //     approved: false,\n  //     decline: false,\n  //     submitDate: new Date().toLocaleString(),\n  //     hasStarted: false,\n  //     isReport: false,\n  //     acceptReport: false,\n  //     pending: false,\n  //   }\n  //   // if (filterFormSelectedGoal[0].acceptReport) {\n  //   //   // console.log('true',filterFormSelectedGoal,submitGoalKey)\n  //   //   if (local) {\n  //   //     createStorageRef()\n  //   //       .then(() => {\n  //   //         // download img from storage\n  //   //         downLoad()\n  //   //           .then((url) => {\n  //   //             // then set submit goals in database\n  //   //             if (goalReducer.currentUser.orgId !== \"\") {\n  //   //               // user side update mygoals\n  //   //               db.ref(\n  //   //                 `organizations/${goalReducer.currentUser.orgId}/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`\n  //   //               ).update(myGoalObject);\n  //   //               db.ref(\n  //   //                 `organizations/${goalReducer.currentUser.orgId}/submitGoals/${submitGoalKey}`\n  //   //               )\n  //   //                 .update({\n  //   //                   uploadImgUlr: url,\n  //   //                   approved: false,\n  //   //                   decline: false,\n  //   //                   submit: true,\n  //   //                   hasStarted: false,\n  //   //                   submitDate: new Date().toLocaleString(),\n  //   //                   isReport: false,\n  //   //                   acceptReport: false,\n  //   //                   pending: false,\n  //   //                 })\n  //   //                 .then(() => {\n  //   //                   setImgurl(\"\");\n  //   //                   setImgName(\"\");\n  //   //                   setLocal(\"\");\n  //   //                   setShowPopup(true);\n  //   //                   setLoading(false);\n  //   //                   console.log(\"submitted\");\n  //   //                   handleClose();\n  //   //                 })\n  //   //                 .catch((err) => {\n  //   //                   console.log(err);\n  //   //                   setLoading(false);\n\n  //   //                   alert(\"connectionn failed try again\");\n  //   //                 });\n  //   //             }\n  //   //             // set insise organization\n  //   //             //    set submit goal if user not enrolled in any org\n  //   //             else {\n  //   //               db.ref(\n  //   //                 `withoutOrganization/users/${userReducer.currentUserOrgId}/myGoals/${myGoalId}`\n  //   //               )\n  //   //                 .update(myGoalObject)\n  //   //                 .then(() => {\n  //   //                   setImgurl(\"\");\n  //   //                   setImgName(\"\");\n  //   //                   setLocal(\"\");\n  //   //                   setShowPopup(true);\n  //   //                   setLoading(false);\n  //   //                   console.log(\"submitted\");\n  //   //                   db.ref(`withoutOrganization/submitGoals/${submitGoalKey}`)\n  //   //                     .push()\n  //   //                     .update({\n  //   //                       uploadImgUlr: url,\n  //   //                       approved: false,\n  //   //                       decline: false,\n  //   //                       hasStarted: false,\n  //   //                       submit: true,\n  //   //                       submitDate: new Date().toLocaleString(),\n  //   //                       isReport: false,\n  //   //                       acceptReport: false,\n  //   //                       pending: false,\n  //   //                     });\n  //   //                   handleClose();\n  //   //                 })\n  //   //                 .catch((err) => {\n  //   //                   console.log(err);\n  //   //                   alert(\"connection failed try again\");\n  //   //                   setLoading(false);\n  //   //                 });\n  //   //             }\n  //   //           })\n  //   //           // handle error of download img\n  //   //           .catch((err) => {\n  //   //             console.log(err);\n  //   //           });\n  //   //       })\n  //   //       // handle error of upload img\n  //   //       .catch((err) => {\n  //   //         console.log(err);\n  //   //       });\n  //   //   } else {\n  //   //     alert(\"Please select image\");\n  //   //   }\n  //   // }\n  // }\n\n  //   alert popup close function\n  \n  \n  const handleClose = () => {\n    setShowPopup(false)\n    history.push('/selec-goals')\n  }\n\n  return (\n    <div className=\"userGoalDetail_container\">\n      {showPopup ? (\n        <AlertDialog\n          handleClose={handleClose}\n          open={showPopup}\n          value=\"Good luck on your goal\"\n          btnValue=\"Back to My Goals\"\n        />\n      ) : null}\n      {open ? (\n        <FormDialog\n          fileInput\n          open={open}\n          handleClose={handleCloseSubmitForm}\n          btnValue=\"Submit Goal\"\n          handleAddFunction={handleSubmitGoal}\n          handleInputvalue={handleSelectImg}\n          imgUrl={imgUrl}\n          loading={loading}\n        />\n      ) : null}\n      <MenuAppBar />\n      <div className=\"userGoalDetail_md\">\n        <div className=\"mobViewHead mobViewFlat\">\n          <div className=\"mobViewHeadContent\">\n            <div className=\"mobHeadBack\">\n              <button\n                onClick={() => history.goBack()}\n                className=\"mobHeadBack_link\"\n              >\n                <ArrowBackIosIcon />\n              </button>\n            </div>\n            <h2>TRYVE</h2>\n            <div className=\"headChatIcon\">\n              <TextsmsOutlinedIcon />\n            </div>\n          </div>\n        </div>\n          <div className=\"userGoal_detail_d\">\n            {goalDetail.length ? (\n              goalDetail.map((val) => {\n                const endDate = new Date(val.GoalStartDate)\n                var myEndDate = new Date(endDate)\n                myEndDate\n                  .setDate(\n                    myEndDate.getDate() + Number(val.inputValues.numberOfDays),\n                  )\n                  .toLocaleString()\n                return (\n                  <div className=\"userGoalDetail_content2\" key={val.id}>\n                    <div className=\"detailVerifyLeftContent\">\n                      <button\n                        onClick={() => history.goBack()}\n                        className=\"Verifyback_link\"\n                      >\n                        <ArrowBackIcon />\n                      </button>\n                      <img src={val.url} alt=\"...\" />\n                      {val.decline || val.pending ? null : (\n                        <button\n                          className=\"start_goal_btn\"\n                          onClick={\n                            // !val.acceptReport\n                            // ?\n                            () => handleOpenForm(val.id)\n                            // : () => handleOpenRetakeForm(val.id)\n                          }\n                          disabled={val.submit}\n                        >\n                          {val.submit && !val.approved && !val.decline\n                            ? ' Submitted'\n                            : (val.submit &&\n                                val.approved &&\n                                val.percentage === '100' &&\n                                !val.pending) ||\n                              (val.submit &&\n                                val.approved &&\n                                val.percentage !== '100' &&\n                                !val.pending)\n                            ? ' Approved'\n                            : val.submit &&\n                              val.approved &&\n                              val.percentage !== '100' &&\n                              val.pending\n                            ? ' Pending '\n                            : val.decline === true &&\n                              val.submit &&\n                              !val.approved\n                            ? ' decline '\n                            : ' Take verification photo '}\n                        </button>\n                      )}\n                      {val.decline ? (\n                        <button\n                          className=\"start_goal_btn\"\n                          onClick={() => handleRetryGoal(val)}\n                        >\n                          Retry\n                        </button>\n                      ) : null}\n                      {val.pending ? (\n                        <div className=\"withdrawBtns\">\n                          <button\n                            className=\"start_goal_btn\"\n                            onClick={() => handleWithDraw(val)}\n                          >\n                            Withdraw\n                          </button>\n                          <button\n                            className=\"start_goal_btn\"\n                            onClick={() => handleRetryGoal(val)}\n                          >\n                            Retry\n                          </button>\n                        </div>\n                      ) : null}\n                    </div>\n                    <div className=\"detailRight_contentVerify\">\n                      <div className=\"detail_list\">\n                        <ul className=\"detailGoal_ul\">\n                          <li className=\"borderBtm\">\n                            <h5 className=\"db_bold_head\">Goal : </h5>\n                            <p className=\"detail_db\">\n                              {val.inputValues.eventName}\n                            </p>\n                          </li>\n                          <div className=\"moreInfoGoal\">\n                            <li className=\"goals\">\n                              {val.approved && !val.pending && val.submit ? (\n                                <>\n                                  <p>Success : {val.percentage}%</p>\n                                  <p>Reward : {val.reward}</p>\n                                </>\n                              ) : (\n                                <>\n                                  <p>\n                                    Start : {val.GoalStartDate.slice(0, 10)}{' '}\n                                  </p>\n                                  <p>\n                                    End :{' '}\n                                    {myEndDate.toLocaleString().slice(0, 10)}\n                                  </p>\n                                </>\n                              )}\n                            </li>\n                            <li>\n                              <p>Category : </p>\n                              <p className=\"detail_db\">\n                                {val.inputValues.category}\n                              </p>\n                            </li>\n                            <li>\n                              <p>Difficulty : </p>\n                              <p className=\"detail_db\">\n                                {val.inputValues.dificulty}\n                              </p>\n                            </li>\n                          </div>\n                          <li className=\"db_bold_head2\">\n                            <h5 className=\"db_bold_head\">Description : </h5>\n                            <p className=\"detail_db\">\n                              {val.inputValues.description}\n                            </p>\n                          </li>\n                        </ul>\n                        {!val.submit ? (\n                          <div className=\"timeLeftCounter borderBtm\">\n                            <h5>Time Left:</h5>\n                            <p>\n                              {Object.keys(timeLeft).length !== 0\n                                ? `${timeLeft.days} days ${timeLeft.hours} hours `\n                                : 'time end'}\n                            </p>\n                          </div>\n                        ) : (\n                          <p>\n                            {val.submit && !val.approved && !val.decline\n                              ? ' Submitted'\n                              : (val.submit &&\n                                  val.approved &&\n                                  val.percentage === '100' &&\n                                  !val.pending) ||\n                                (val.submit &&\n                                  val.approved &&\n                                  val.percentage !== '100' &&\n                                  !val.pending)\n                              ? ' Approved'\n                              : val.submit &&\n                                val.approved &&\n                                val.percentage !== '100' &&\n                                val.pending\n                              ? ' Pending '\n                              : val.decline === true &&\n                                val.submit &&\n                                !val.approved\n                              ? ' decline '\n                              : ' NeedSubmmision '}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"goalMob_btn\">\n                        <button\n                          className=\"start_goal_btn\"\n                          onClick={() => handleOpenForm(val.id)}\n                          disabled={val.submit}\n                        >\n                          {val.submit && !val.approved && !val.decline\n                            ? ' Submitted'\n                            : (val.submit &&\n                                val.approved &&\n                                val.percentage === '100' &&\n                                !val.pending) ||\n                              (val.submit &&\n                                val.approved &&\n                                val.percentage !== '100' &&\n                                !val.pending)\n                            ? ' Approved'\n                            : val.submit &&\n                              val.approved &&\n                              val.percentage !== '100' &&\n                              val.pending\n                            ? ' Pending '\n                            : val.decline === true &&\n                              val.submit &&\n                              !val.approved\n                            ? ' decline '\n                            : ' Take verification photo '}\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })\n            ) : (\n              <div onClick={() => history.goBack()} className=\"goBack\">\n                {' '}\n                Go back and select product...{' '}\n              </div>\n            )}\n          </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StartGoalDetailPage\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/StatusDetailPage.jsx",["603"],"import React from 'react'\nimport { useHistory, useParams } from 'react-router'\nimport { useSelector } from 'react-redux'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport MenuAppBar from '../../../Layout/Navbar'\nimport firebase from '../../../Config/FirebaseConfig'\nimport SmsIcon from '@material-ui/icons/Sms'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\nimport { Link } from 'react-router-dom'\n\nconst StatusDetailPage = () => {\n  const db = firebase.database()\n  const { id } = useParams()\n  const history = useHistory()\n  const [goalDetail, setGoalDetail] = useState([])\n  const [ setShowPopup] = useState(false)\n  const selector = useSelector((state) => {\n    return state\n  })\n  // console.log(selector)\n  useEffect(() => {\n    const filterSelectedGoal = selector.userReducer.selectedGoals.filter(\n      (val) => val.myGoalId === id,\n    )\n    setGoalDetail(filterSelectedGoal)\n  }, [])\n\n  const handleWithDraw = (event) => {\n    // if (!filterFormSelectedGoal.length) {\n    let balance = ''\n    db.ref(\n      `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\n    ).on('value', (snapshot) => {\n      let userData = snapshot.val()\n      let userBalancedb = userData.balance\n      balance = userBalancedb\n      // console.log('user',userBalancedb)\n      // setUserBalance(userBalancedb);\n    })\n    // console.log(balance);\n\n    if (selector.goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\n      ).update({\n        balance: balance + Number(event.reward),\n      })\n\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      )\n        .update({\n          pending: false,\n        })\n        .then(() => {\n          console.log('selected')\n          setShowPopup(true)\n          history.push('/verify-goals')\n        })\n        .catch((err) => {\n          console.log(err)\n          alert('connection failed please try again')\n        })\n    }\n    //    set goal if user not enrolled in any org\n    else {\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`,\n      ).update({\n        balance: Number(balance) + Number(event.reward),\n      })\n      db.ref(\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      )\n        .update({\n          pending: true,\n        })\n        .then(() => {\n          console.log('selected')\n          history.push('/verify-goals')\n          setShowPopup(true)\n        })\n        .catch((err) => {\n          console.log(err)\n          alert('connection failed please try again')\n        })\n    }\n  }\n\n  const handleRetryGoal = (event) => {\n    // console.log(event)\n    if (selector.goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      )\n        .update({\n          decline: false,\n          submit: false,\n        })\n        .then(() => {\n          console.log('retry')\n          history.push('/verify-goals')\n        })\n        .catch((err) => {\n          console.log(err)\n          alert('connection failed please try again')\n        })\n    }\n    //    set goal if user not enrolled in any org\n    else {\n      db.ref(\n        `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals/${event.myGoalId}`,\n      )\n        .update({\n          decline: false,\n          submit: false,\n        })\n        .then(() => {\n          history.push('/verify-goals')\n          console.log('retry')\n        })\n        .catch((err) => {\n          console.log(err)\n          alert('connection failed please try again')\n        })\n    }\n  }\n\n  return (\n    <div className=\"userGoalDetail_container\">\n      <div className=\"userGoalDetail_md\">\n        <MenuAppBar />\n        <div className=\"mobViewHead\">\n          <div className=\"mobViewHeadContent\">\n            <h2>TRYVE</h2>\n            <div className=\"headChatIcon\">\n              <SmsIcon />\n            </div>\n          </div>\n        </div>\n        <div className=\"userGoal_detail_d\">\n          {goalDetail &&\n            goalDetail.map((val) => (\n              <div className=\"userGoalDetail_content\" key={val.id}>\n                <div className=\"detailLeftContent\">\n                  <Link to=\"/goals-status\" className=\"back_link\">\n                    <ArrowBackIcon />\n                  </Link>\n\n                  <img src={val.url} alt=\"...\" />\n                  {val.percentage !== '100' && val.pending ? (\n                    <>\n                      <button\n                        className=\"start_goal_btn\"\n                        onClick={() => handleWithDraw(val)}\n                      >\n                        withdraw\n                      </button>\n                    </>\n                  ) : null}\n                  {val.decline || val.pending ? (\n                    <>\n                      <button\n                        className=\"start_goal_btn\"\n                        onClick={() => handleRetryGoal(val)}\n                      >\n                        Retry\n                      </button>\n                    </>\n                  ) : null}\n                </div>\n                <div className=\"detailRight_content\">\n                  <div className=\"detail_list\">\n                    <ul className=\"detailGoal_ul\">\n                      <li className=\"goal_name_dp\">\n                        <h5 className=\"db_red_head\">Goal:</h5>\n                        <p className=\"detail_db\">{val.inputValues.eventName}</p>\n                      </li>\n                      <li>\n                        <p>Total Time:</p>\n                        <p className=\"detail_db\">\n                          {val.inputValues.numberOfDays}\n                        </p>\n                      </li>\n                      <li>\n                        <p>Category:</p>\n                        <p className=\"detail_db\">{val.inputValues.category}</p>\n                      </li>\n                      <li className=\"\">\n                        <p>Start date:</p>\n                        <p className=\"\">{val.inputValues.startDate}</p>\n                      </li>\n                      <li className=\"\">\n                        <p>End date:</p>\n                        <p className=\"\">{val.inputValues.endDate}</p>\n                      </li>\n                      <li className=\"\">\n                        <p>Reward Max:</p>\n                        <p className=\"\">{val.inputValues.rewardMax}</p>\n                      </li>\n                      <li className=\"\">\n                        <p>Reward Min:</p>\n                        <p className=\"\">{val.inputValues.rewardMin}</p>\n                      </li>\n                      <li className=\"\">\n                        <p>Difficulty:</p>\n                        <p className=\"detail_db\">{val.inputValues.dificulty}</p>\n                      </li>\n                      <li className=\"\">\n                        <p>Invest Max:</p>\n                        <p className=\"\">{val.inputValues.investMax}</p>\n                      </li>\n                      <li className=\"goal_diff_dp\">\n                        <p>Invest Min:</p>\n                        <p className=\"detail_db\">{val.inputValues.investMin}</p>\n                      </li>\n                      <li className=\"mob_desc_dp\">\n                        <h5 className=\"db_red_head\">Description:</h5>\n                        <p className=\"detail_db\">\n                          {val.inputValues.description}\n                        </p>\n                      </li>\n                    </ul>\n                  </div>\n                  <div className=\"goalMob_btn\">\n                    {val.percentage !== '100' && !val.decline ? (\n                      <>\n                        <button\n                          className=\"start_goal_btn\"\n                          onClick={() => handleWithDraw(val)}\n                        >\n                          withdraw\n                        </button>\n                        <button\n                          className=\"start_goal_btn\"\n                          onClick={() => handleRetryGoal(val)}\n                        >\n                          Retry\n                        </button>\n                      </>\n                    ) : null}\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default StatusDetailPage\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Profile/Profile.jsx",["604"],"import React, { useEffect } from \"react\";\nimport MenuAppBar from \"../../../Layout/Navbar\";\nimport UserDetailCard from \"./UserDetailCard\";\nimport \"./style.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport firebase from \"../../../Config/FirebaseConfig\";\nimport {\n  setAllUsers,\n  getCurrentUserFromOrganization,\n} from \"../../../GlobalState/UserSideSlice\";\n\nexport const getAllUserOfOrg = (parameter,dispatch,userDetail) => {\n  const db = firebase.database();\n  db.ref(parameter).on(\"value\", (snapshot) => {\n    var UsersArray = [];\n    var currentUserOrg = [];\n    snapshot.forEach((goals) => {\n      let getUsers = goals.val();\n      let getUserId = goals.key;\n      getUsers.orgMainId = getUserId;\n      UsersArray.push(getUsers);\n      if (getUsers.id === userDetail.id) {\n        currentUserOrg.push(getUsers);\n      }\n    });\n    dispatch(getCurrentUserFromOrganization(currentUserOrg));\n    dispatch(setAllUsers(UsersArray));\n  });\n};\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n\n  const userDetail = useSelector((state) => {\n    return state.goalReducer.currentUser;\n  });\n\n  useEffect(() => {\n    // condition for  if user enrolled in any organization\n    if (userDetail.orgId !== \"\") {\n      //   get current user from organization\n      getAllUserOfOrg(`organizations/${userDetail.orgId}/users`,dispatch,userDetail);\n    } else {\n      //   get current user from without organization\n      getAllUserOfOrg(`withoutOrganization/users`,dispatch,userDetail);\n    }\n  }, []);\n\n\n\n  return (\n    <div className=\"profile_container\">\n      <MenuAppBar />\n      <div className=\"profile_md\">\n        <UserDetailCard\n        userDetail={userDetail}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/Index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/Index.jsx",["605"],"import React, { useEffect } from 'react'\nimport firebase from '../../../../Config/FirebaseConfig'\nimport { useParams } from 'react-router-dom'\nimport {\n  allSubmitOrgGoals,\n  setOrgApprovedGoals,\n  setOrgDeclineGoals,\n  setReportGoals,\n  setFakeGoals,\n} from '../../../../GlobalState/CreateSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport MiniDrawer from '../../Sidebar'\nimport SubmitGoalsTable from './SubmitGoalsTable'\nimport PropTypes from 'prop-types'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport './submitGoal.css'\nimport { getOrgUsers } from '../OrganizationUsers/UserList'\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </div>\n  )\n}\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    'aria-controls': `scrollable-auto-tabpanel-${index}`,\n  }\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: theme.palette.background.paper,\n  },\n}))\n\nconst SubmitedGoals = () => {\n  const classes = useStyles()\n  const [value, setValue] = React.useState(0)\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue)\n  }\n  const { id } = useParams()\n  const dispatch = useDispatch()\n  const db = firebase.database()\n  const dbRef = db.ref(`organizations/${id}/submitGoals`)\n\n  // get filter organization goals from database\n  const getFilterOrgGoals = () => {\n    dbRef.on('value', (snapshot) => {\n      let submitOrgGoalsArry = []\n      let approvedOrgGoals = []\n      let declineOrgGoals = []\n      let reportGoalArray = []\n      let fakeGoal = []\n      snapshot.forEach((data) => {\n        const getData = data.val()\n        // console.log(getData)\n        const getId = data.key\n        getData.submitGoalId = getId\n        // if goals in pending\n        if (!getData.approved && !getData.decline && !getData.isReport) {\n          //  console.log(getData.approved)\n          submitOrgGoalsArry.push(getData)\n        }\n        // if goals is approved\n        else if (getData.approved && !getData.isReport) {\n          approvedOrgGoals.push(getData)\n        } else if (getData.decline) {\n          declineOrgGoals.push(getData)\n        } else if (getData.isReport && !getData.acceptReport) {\n          reportGoalArray.push(getData)\n        }  if (getData.isReport && getData.acceptReport) {\n          fakeGoal.push(getData)\n          // console.log(getData)\n        }\n        // console.log(getData)\n      })\n      // submit goals\n      dispatch(allSubmitOrgGoals(submitOrgGoalsArry))\n      // approved goal\n      dispatch(setOrgApprovedGoals(approvedOrgGoals))\n      // decline goals\n      dispatch(setOrgDeclineGoals(declineOrgGoals))\n      // report goals\n      dispatch(setReportGoals(reportGoalArray))\n      // fake goals report\n      dispatch(setFakeGoals(fakeGoal))\n    })\n  }\n\n  useEffect(() => {\n    getFilterOrgGoals()\n    getOrgUsers(id, dispatch)\n  }, [])\n\n  const selector = useSelector((state) => {\n    return state.goalReducer\n  })\n    // console.log(selector)\n\n  return (\n    <div>\n      <div className=\"dashboard_md\">\n        <div className=\"dashboard_left_content\">\n          <MiniDrawer />\n        </div>\n        <div className={`${classes.root} submitd_table_md`}>\n          <AppBar position=\"static\" color=\"default\">\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n              aria-label=\"scrollable auto tabs example\"\n            >\n              <Tab label=\"Submit Goals\" {...a11yProps(0)} />\n              <Tab label=\"Approved Goals\" {...a11yProps(1)} />\n              <Tab label=\"Decline Goals\" {...a11yProps(2)} />\n              <Tab label=\"Report Goals\" {...a11yProps(3)} />\n              <Tab label=\"Fake Goals\" {...a11yProps(4)} />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={value} index={0}>\n            <SubmitGoalsTable selector={selector.allSubmitGoals} />\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <SubmitGoalsTable\n              selector={selector.allOrgApprovedGoals}\n              btn\n              approvedUndo\n              undoFunc\n            />\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <SubmitGoalsTable\n              selector={selector.allDeclineOrgGoals}\n              btn\n              undoFunc\n            />\n          </TabPanel>\n          <TabPanel value={value} index={3}>\n            <SubmitGoalsTable\n              selector={selector.reportGoals}\n              btn\n              declineBtn\n              declineForReported\n              undoForReported\n            />\n          </TabPanel>\n          <TabPanel value={value} index={4}>\n            <SubmitGoalsTable\n              selector={selector.fakeGoals}\n              btn\n              declineBtn\n              undoFake\n            />\n          </TabPanel>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SubmitedGoals\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/Index.jsx",["606"],"import React, { useEffect, useState } from \"react\";\nimport GoalsDetail from \"./GoalsDetail\";\nimport MiniDrawer from \"../../Sidebar\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\n\nimport \"./style.css\";\n\nconst Index = () => {\n  const db = firebase.database();\n  const history = useHistory(useHistory);\n  let { id, goal } = useParams();\n  let [filterGoal, setFilterGoal] = useState([]);\n  let [loading, setLoading] = useState(false);\n  const goals = useSelector((state) => {\n    return state.goalReducer.OrgGoals;\n  });\n  useEffect(() => {\n    //   filter selected goal detail\n    let goalsFilter = goals.filter((val) => val.id === goal);\n    setFilterGoal(goalsFilter);\n  }, []);\n  //   console.log(filterGoal)\n\n  //   delete gaol function\n  const deleteGoals = (event) => {\n    setLoading(true);\n    db.ref(`organizations/${id}/goals/${event}`)\n      .remove()\n      .then(() => {\n        setFilterGoal([]);\n        setLoading(false);\n        history.push(`/organizations/${id}/dashboard`);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n      });\n  };\n  const editGoal = (event) => {\n    // history.push(`${event}`)\n    history.push(`/organizations/${id}/edit-goal/${event}`);\n  };\n\n  return (\n    <div className=\"goals_detail_container\">\n      <div className=\"dashboard_left_content\">\n        <MiniDrawer />\n      </div>\n      <div className=\"goals_detailMd_right_content\">\n        <div className=\"top_route_head\">\n          <p className=\"top_route_icon\">\n            <PersonIcon />\n          </p>\n          <p style={{ marginLeft: \"10px\" }}>Goals</p>\n        </div>\n        <GoalsDetail\n          goalDetail={filterGoal[0]}\n          deleteGoals={deleteGoals}\n          loading={loading}\n          editGoal={editGoal}\n          backArrowPathId={`/organizations/${id}/dashboard`}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/UpdateGoals.jsx/Index.jsx",["607"],"import React, { useEffect, useState } from 'react'\nimport MiniDrawer from '../../Sidebar'\nimport PersonIcon from '@material-ui/icons/Person'\nimport CreateGoals from '../CreateGoals/CreateGoals'\nimport { useSelector } from 'react-redux'\nimport { useParams } from 'react-router-dom'\nimport firebase from '../../../../Config/FirebaseConfig'\nimport { useHistory } from 'react-router-dom'\n\nconst goalsInput = {\n  eventName: '',\n  description: '',\n  dificulty: '',\n  endDate: '',\n  investMin: '',\n  investMax: '',\n  rewardMin: '',\n  rewardMax: '',\n  startDate: '',\n  numberOfDays: '',\n}\n\nconst UpdateGoals = () => {\n  const history = useHistory()\n  let { id, goal } = useParams()\n  const [inputValues, setInputValues] = useState(goalsInput)\n  const [imgUrl, setImgurl] = useState('')\n  const [imgName, setImgName] = useState('')\n  const [local, setLocal] = useState('')\n  let [filterGoal, setFilterGoal] = useState([])\n  let [editGoalId, setEditGoalId] = useState('')\n  let [loading, setLoading] = useState(false)\n  const db = firebase.database()\n\n  const goals = useSelector((state) => {\n    return state.goalReducer.OrgGoals\n  })\n\n  const ref = db.ref(`organizations/${id}/categories`)\n  let [dbCategory, setDbCategory] = useState([])\n\n  const getCategories = () => {\n    ref.on('value', (snapshot) => {\n      let categoryArray = []\n      snapshot.forEach((data) => {\n        let resData = data.val()\n        let dataKey = data.key\n        resData.id = dataKey\n        categoryArray.push(resData)\n      })\n      setDbCategory(categoryArray)\n    })\n  }\n\n  // useEffect(()=>{\n  // },[])\n\n  // console.log(goals)\n  useEffect(() => {\n    //   filter selected goal detail\n    let goalsFilter = goals.filter((val) => val.id === goal)\n    setFilterGoal(goalsFilter)\n    if (goalsFilter.length) {\n      setImgurl(goalsFilter[0].url)\n      setInputValues(goalsFilter[0].inputValues)\n      setEditGoalId(goalsFilter[0].id)\n    }\n    getCategories()\n    return () => {\n      getCategories()\n    }\n  }, [])\n\n  const handleGoals = (event) => {\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value })\n  }\n\n  const handleGoalImg = (event) => {\n    const url = URL.createObjectURL(event.target.files[0])\n    const goalImgName = event.target.files[0].name\n    setImgurl(url)\n    setImgName(goalImgName)\n    setLocal(event.target.files[0])\n  }\n  // firebase storage ref\n  const storage = firebase.storage()\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local)\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL()\n\n  // firebase database reference\n  const goalsRef = db.ref(`organizations/${id}/goals/` + editGoalId)\n\n  const handleEmptyImg = () => {\n    setImgurl('')\n  }\n\n  // update goals in database\n  const handleUpdateGoals = (e) => {\n    e.preventDefault()\n    setLoading(true)\n    if (local) {\n      createStorageRef().then(() => {\n        downLoad().then((url) => {\n          goalsRef\n            .update({\n              inputValues,\n              url,\n              // numberOfDays,\n              peopleJoined: 0,\n            })\n            .then(() => {\n              setLoading(false)\n              history.push(`/organizations/${id}/dashboard`)\n            })\n            .catch((err) => {\n              console.log(err)\n              setLoading(false)\n            })\n        })\n      })\n    } else {\n      goalsRef\n        .update({\n          inputValues,\n          // numberOfDays,\n        })\n        .then(() => {\n          setLoading(false)\n          history.push(`/organizations/${id}/dashboard`)\n        })\n        .catch((err) => {\n          console.log(err)\n          setLoading(false)\n        })\n    }\n    // console.log(inputValues);\n    setInputValues(goalsInput)\n    setImgurl('')\n  }\n\n  if (!filterGoal.length) {\n    return (\n      <div>\n        <p>Loading</p>\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <div className=\"createGoals_container\">\n        <div className=\"createGoals_md\">\n          <div className=\"dashboard_left_content\">\n            <MiniDrawer />\n          </div>\n          <div className=\"create_goals_right_content\">\n            <div className=\"top_route_head\">\n              <p className=\"top_route_icon\">\n                <PersonIcon />\n              </p>\n              <p style={{ marginLeft: '10px' }}>Goals</p>\n            </div>\n            <div className=\"create_goals_box_main\">\n              <CreateGoals\n                handleAddGoals={handleUpdateGoals}\n                handleInputGoals={handleGoals}\n                handleGoalImg={handleGoalImg}\n                inputValues={inputValues}\n                imgUrl={imgUrl}\n                loading={loading}\n                btnValue=\"Confirm\"\n                handleEmptyImg={handleEmptyImg}\n                cross\n                backArrowPathId={`/organizations/${id}/dashboard`}\n                dbCategory={dbCategory}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UpdateGoals\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/Dashboard.jsx",["608"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport MiniDrawer from \"../../Sidebar\";\nimport GoalsTable from \"./GoalsTable\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport \"./style.css\";\nimport SearchInput from \"../../../../Components/SearchInput\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {\n  setWithoutOrgGoalsAtoZ,\n  highToLowWithoutOrgGoals,\n  filterWithEndDateWithoutOrg,\n  filterWithEventNameWithoutOrg,\n  selectedCategoryWithoutOrg,\n} from \"../../../../GlobalState/CreateSlice\";\n\nconst WithoutOrganizationDashboard = () => {\n  const dispatch = useDispatch();\n  const db = firebase.database();\n  const dbRef = db.ref(`withoutOrganization/categories`);\n  let [category, setCateggory] = useState([]);\n\n  // get  organization Category from database\n  const getFilterOrgGoals = () => {\n    dbRef.on(\"value\", (snapshot) => {\n      let orgCategoryArry = [];\n      snapshot.forEach((data) => {\n        const getData = data.val();\n        const getId = data.key;\n        getData.id = getId;\n        orgCategoryArry.push(getData);\n      });\n      setCateggory(orgCategoryArry);\n    });\n  };\n\n  useEffect(() => {\n    getFilterOrgGoals();\n    return () => {\n      getFilterOrgGoals();\n    };\n  }, []);\n\n  const selector = useSelector((state) => {\n    return state.goalReducer;\n  });\n\n  // goals search function\n  const handleChange = (e) => {\n    dispatch(filterWithEventNameWithoutOrg(e.target.value));\n  };\n\n  const handleAtoZ = (e) => {\n    dispatch(setWithoutOrgGoalsAtoZ(e.target.value));\n  };\n\n  const handleHighToLow = (e) => {\n    dispatch(highToLowWithoutOrgGoals(e.target.value));\n  };\n\n  const handleDateFilter = (e) => {\n    dispatch(filterWithEndDateWithoutOrg(e.target.value));\n  };\n\n  const handleCategory = (e) => {\n    dispatch(selectedCategoryWithoutOrg(e.target.value));\n  };\n\n  return (\n    <div className=\"dashboard_container\">\n      <div className=\"dashboard_md\">\n        <div className=\"dashboard_left_content\">\n          <MiniDrawer withOutOrg />\n        </div>\n        <div className=\"dashboard_right_content\">\n          <div className=\"dashboard_main_md\">\n            <div className=\"searchInputBox\">\n              <SearchInput category={category} handleChange={handleChange} />\n            </div>\n            <div className=\"tableAnd_tabs_container\">\n              <div className=\"table_tabs_head\">\n                <div className=\"tb_tabs_headContent\">\n                  <p>Goals list</p>\n                </div>\n                <div className=\"create_goals_link\">\n                  <Link\n                    to={`/without-organization/create-goals`}\n                    className=\"cus_btn\"\n                  >\n                    Create goals <AddCircleOutlineIcon className=\"add_icon\" />\n                  </Link>\n                </div>\n              </div>\n              <div className=\"filters_section\">\n                <select name=\"asc\" id=\"asc\" onChange={handleHighToLow}>\n                  <option value=\"\">ASC / DSC</option>\n                  <option value=\"htl\">ascending</option>\n                  <option value=\"lth\">descending</option>\n                </select>\n                <select\n                  name=\"asc\"\n                  id=\"asc\"\n                  onChange={handleAtoZ}\n                  style={{ marginLeft: \"10px\" }}\n                >\n                  <option value=\"\">A to Z / Z toA</option>\n                  <option value=\"atoz\">A to Z</option>\n                  <option value=\"ztoa\">Z to A</option>\n                </select>\n                <input\n                  type=\"text\"\n                  name=\"filter\"\n                  id=\"filter\"\n                  placeholder=\"Enter date format(yyyy-mm-dd)\"\n                  style={{ marginLeft: \"10px\" }}\n                  onChange={handleDateFilter}\n                />\n                <div className=\"category_filter\">\n                  <Autocomplete\n                    id=\"grouped-demo\"\n                    options={category.map((val) => val.category)}\n                    style={{ width: 300 }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"With categories\"\n                        variant=\"outlined\"\n                      />\n                    )}\n                    onSelect={handleCategory}\n                  />\n                </div>\n              </div>\n\n              <GoalsTable selector={selector.withoutOrgGoals} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WithoutOrganizationDashboard;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/OrganizationLinks/Index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/CreateGoals/Index.jsx",["609"],"import React, { useState, useEffect } from \"react\";\nimport MiniDrawer from \"../../Sidebar\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport CreateGoals from \"../../WithOrganizations/CreateGoals/CreateGoals\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useHistory } from \"react-router-dom\";\n\nconst goalsInput = {\n  eventName: \"\",\n  description: \"\",\n  dificulty: \"\",\n  endDate: \"\",\n  investMin: \"\",\n  investMax: \"\",\n  rewardMin: \"\",\n  rewardMax: \"\",\n  startDate: \"\",\n  category: \"\",\n  numberOfDays:''\n};\n\nconst WithOutOrgGoalsCreate = () => {\n  const history = useHistory();\n  const [inputValues, setInputValues] = useState(goalsInput);\n  const [imgUrl, setImgurl] = useState(\"\");\n  const [imgName, setImgName] = useState(\"\");\n  const [local, setLocal] = useState(\"\");\n  // loading\n  let [loading, setLoading] = useState(false);\n  const handleGoals = (event) => {\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\n  };\n\n  const handleGoalImg = (event) => {\n    const url = URL.createObjectURL(event.target.files[0]);\n    const goalImgName = event.target.files[0].name;\n    setImgurl(url);\n    setImgName(goalImgName);\n    setLocal(event.target.files[0]);\n  };\n  // firebase storage ref\n  const storage = firebase.storage();\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local);\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL();\n\n  // firebase database reference\n  const db = firebase.database();\n  const goalsRef = db.ref(`withoutOrganization/goals`);\n  const pushGoal = goalsRef.push();\n  const ref = db.ref(`withoutOrganization/categories`);\n  let [dbCategory, setDbCategory] = useState([]);\n\n  const getCategories = () => {\n    ref.on(\"value\", (snapshot) => {\n      let categoryArray = [];\n      snapshot.forEach((data) => {\n        let resData = data.val();\n        let dataKey = data.key;\n        resData.id = dataKey;\n        categoryArray.push(resData);\n      });\n      setDbCategory(categoryArray);\n    });\n  };\n\n  useEffect(() => {\n    getCategories();\n    return () => {\n      getCategories();\n    };\n  }, []);\n\n  // add goals in database\n\n  const handleAddGoals = (e) => {\n    e.preventDefault();\n    setLoading(true);\n    createStorageRef().then(() => {\n      downLoad().then((url) => {\n        pushGoal\n          .set({\n            inputValues,\n            url,\n            peopleJoined: 0,\n          })\n          .then(() => {\n            setLoading(false);\n            history.push(`/without-organization/dashboard`);\n          })\n          .catch((err) => {\n            console.log(err);\n            setLoading(false);\n          });\n      });\n    });\n    setInputValues(goalsInput);\n    setImgurl(\"\");\n  };\n\n  return (\n    <div>\n      <div className=\"createGoals_container\">\n        <div className=\"createGoals_md\">\n          <div className=\"dashboard_left_content\">\n            <MiniDrawer withOutOrg />\n          </div>\n          <div className=\"create_goals_right_content\">\n            <div className=\"top_route_head\">\n              <p className=\"top_route_icon\">\n                <PersonIcon />\n              </p>\n              <p style={{ marginLeft: \"10px\" }}>Goals</p>\n            </div>\n            <div className=\"create_goals_box_main\">\n              <CreateGoals\n                handleAddGoals={handleAddGoals}\n                handleInputGoals={handleGoals}\n                handleGoalImg={handleGoalImg}\n                inputValues={inputValues}\n                imgUrl={imgUrl}\n                loading={loading}\n                btnValue=\"Add goals\"\n                backArrowPathId=\"/without-organization/dashboard\"\n                dbCategory={dbCategory}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WithOutOrgGoalsCreate;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/Dashboard.jsx",["610"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport MiniDrawer from \"../../Sidebar\";\nimport GoalsTable from \"./GoalsTable\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport { useParams } from \"react-router\";\nimport \"./style.css\";\nimport SearchInput from \"../../../../Components/SearchInput\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {\n  setGoalsAtoZ,\n  highToLow,\n  filterWithEndDate,\n  filterWithEventName,\n  selectedCategory,\n} from \"../../../../GlobalState/CreateSlice\";\n\nconst Dashboard = () => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const db = firebase.database();\n  const dbRef = db.ref(`organizations/${id}/categories`);\n  let [category, setCateggory] = useState([]);\n  let [searchGoalsWithCategory] = useState(\"\");\n  let [filteredGoals] = useState([]);\n\n  // get  organization Category from database\n  const getFilterOrgGoals = () => {\n    dbRef.on(\"value\", (snapshot) => {\n      let orgCategoryArry = [];\n      snapshot.forEach((data) => {\n        const getData = data.val();\n        const getId = data.key;\n        getData.id = getId;\n        orgCategoryArry.push(getData);\n      });\n      setCateggory(orgCategoryArry);\n    });\n  };\n\n  useEffect(() => {\n    getFilterOrgGoals();\n    return () => {\n      getFilterOrgGoals();\n    };\n  }, []);\n\n  const selector = useSelector((state) => {\n    return state.goalReducer;\n  });\n\n  // goals search function\n  const handleChange = (e) => {\n    dispatch(filterWithEventName(e.target.value));\n  };\n\n  const handleAtoZ = (e) => {\n    //  console.log(e.target.value)\n    dispatch(setGoalsAtoZ(e.target.value));\n  };\n\n  const handleHighToLow = (e) => {\n    dispatch(highToLow(e.target.value));\n  };\n\n  const handleDateFilter = (e) => {\n    dispatch(filterWithEndDate(e.target.value));\n    // console.log(e.target.value)\n  };\n\n  const handleCategory = (e) => {\n    dispatch(selectedCategory(e.target.value));\n  };\n\n  return (\n    <div className=\"dashboard_container\">\n      <div className=\"dashboard_md\">\n        <div className=\"dashboard_left_content\">\n          <MiniDrawer />\n        </div>\n        <div className=\"dashboard_right_content\">\n          <div className=\"dashboard_main_md\">\n            <div className=\"searchInputBox\">\n              <SearchInput category={category} handleChange={handleChange} />\n            </div>\n            <div className=\"tableAnd_tabs_container\">\n              <div className=\"table_tabs_head\">\n                <div className=\"tb_tabs_headContent\">\n                  <p>Goals list</p>\n                </div>\n                <div className=\"create_goals_link\">\n                  <Link\n                    to={`/organizations/${id}/create-goals`}\n                    className=\"cus_btn\"\n                  >\n                    Create goals <AddCircleOutlineIcon className=\"add_icon\" />\n                  </Link>\n                </div>\n              </div>\n              <div className=\"filters_section\">\n                <select name=\"asc\" id=\"asc\" onChange={handleHighToLow}>\n                  <option value=\"\">ASC / DSC</option>\n                  <option value=\"htl\">ascending</option>\n                  <option value=\"lth\">descending</option>\n                </select>\n                <select\n                  name=\"asc\"\n                  id=\"asc\"\n                  onChange={handleAtoZ}\n                  style={{ marginLeft: \"10px\" }}\n                >\n                  <option value=\"\"> A to Z / Z toA</option>\n                  <option value=\"atoz\">A to Z</option>\n                  <option value=\"ztoa\">Z to A</option>\n                </select>\n                <input\n                  type=\"text\"\n                  name=\"filter\"\n                  id=\"filter\"\n                  placeholder=\"Date format(yyyy-mm-dd)\"\n                  style={{ marginLeft: \"10px\" }}\n                  onChange={handleDateFilter}\n                />\n                <div className=\"category_filter\">\n                  <Autocomplete\n                    id=\"grouped-demo\"\n                    options={category.map((val) => val.category)}\n                    // options={false}\n                    style={{ width: 300 }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        label=\"With categories\"\n                        variant=\"outlined\"\n                      />\n                    )}\n                    onSelect={handleCategory}\n                  />\n                </div>\n              </div>\n\n              <GoalsTable\n                searchGoalsWithCategory={searchGoalsWithCategory}\n                selector={\n                  !searchGoalsWithCategory ? selector.OrgGoals : filteredGoals\n                }\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/UpdateGoals.jsx/Index.jsx",["611"],"import React, { useEffect, useState } from \"react\";\nimport MiniDrawer from \"../../Sidebar\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport CreateGoals from \"../../WithOrganizations/CreateGoals/CreateGoals\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useHistory } from \"react-router-dom\";\n\nconst goalsInput = {\n  eventName: \"\",\n  description: \"\",\n  dificulty: \"\",\n  endDate: \"\",\n  investMin: \"\",\n  investMax: \"\",\n  rewardMin: \"\",\n  rewardMax: \"\",\n  startDate: \"\",\n  numberOfDays:''\n};\n\nconst WitoutOrgUpdateGoals = () => {\n  const history = useHistory();\n  let { goal } = useParams();\n  const [inputValues, setInputValues] = useState(goalsInput);\n  const [imgUrl, setImgurl] = useState(\"\");\n  const [imgName, setImgName] = useState(\"\");\n  const [local, setLocal] = useState(\"\");\n  let [filterGoal, setFilterGoal] = useState([]);\n  let [editGoalId, setEditGoalId] = useState(\"\");\n  let [loading, setLoading] = useState(false);\n  const db = firebase.database();\n  const ref = db.ref(`withoutOrganization/categories`);\n  const goals = useSelector((state) => {\n    return state.goalReducer.withoutOrgGoals;\n  });\n\n  let [dbCategory, setDbCategory] = useState([]);\n\n  const getCategories = () => {\n    ref.on(\"value\", (snapshot) => {\n      let categoryArray = [];\n      snapshot.forEach((data) => {\n        let resData = data.val();\n        let dataKey = data.key;\n        resData.id = dataKey;\n        categoryArray.push(resData);\n      });\n      setDbCategory(categoryArray);\n    });\n  };\n  // console.log(goals)\n  useEffect(() => {\n    //   filter selected goal detail\n    let goalsFilter = goals.filter((val) => val.id === goal);\n    setFilterGoal(goalsFilter);\n    if (goalsFilter.length) {\n      setImgurl(goalsFilter[0].url);\n      setInputValues(goalsFilter[0].inputValues);\n      setEditGoalId(goalsFilter[0].id);\n    }\n    getCategories();\n    return () => {\n      getCategories();\n    };\n  }, []);\n\n  const handleGoals = (event) => {\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\n  };\n\n  const handleGoalImg = (event) => {\n    const url = URL.createObjectURL(event.target.files[0]);\n    const goalImgName = event.target.files[0].name;\n    setImgurl(url);\n    setImgName(goalImgName);\n    setLocal(event.target.files[0]);\n  };\n  // firebase storage ref\n  const storage = firebase.storage();\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local);\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL();\n\n  // firebase database reference\n  const goalsRef = db.ref(`withoutOrganization/goals/` + editGoalId);\n\n  const handleEmptyImg = () => {\n    setImgurl(\"\");\n  };\n\n  // update goals in database\n  const handleUpdateGoals = (e) => {\n    e.preventDefault();\n    setLoading(true);\n    if (local) {\n      createStorageRef().then(() => {\n        downLoad().then((url) => {\n          goalsRef\n            .update({\n              inputValues,\n              url,\n              peopleJoined: 0,\n            })\n            .then(() => {\n              setLoading(false);\n              history.push(`/without-organization/dashboard`);\n            })\n            .catch((err) => {\n              console.log(err);\n              setLoading(false);\n            });\n        });\n      });\n    } else {\n      goalsRef\n        .update({\n          inputValues,\n          // numberOfDays,\n        })\n        .then(() => {\n          setLoading(false);\n          history.push(`/without-organization/dashboard`);\n        })\n        .catch((err) => {\n          console.log(err);\n          setLoading(false);\n        });\n    }\n    // console.log(inputValues);\n    setInputValues(goalsInput);\n    setImgurl(\"\");\n  };\n\n  if (!filterGoal.length) {\n    return (\n      <div>\n        <p>Loading</p>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <div className=\"createGoals_container\">\n        <div className=\"createGoals_md\">\n          <div className=\"dashboard_left_content\">\n            <MiniDrawer withOutOrg />\n          </div>\n          <div className=\"create_goals_right_content\">\n            <div className=\"top_route_head\">\n              <p className=\"top_route_icon\">\n                <PersonIcon />\n              </p>\n              <p style={{ marginLeft: \"10px\" }}>Goals</p>\n            </div>\n            <div className=\"create_goals_box_main\">\n              <CreateGoals\n                handleAddGoals={handleUpdateGoals}\n                handleInputGoals={handleGoals}\n                handleGoalImg={handleGoalImg}\n                inputValues={inputValues}\n                imgUrl={imgUrl}\n                loading={loading}\n                btnValue=\"Confirm\"\n                handleEmptyImg={handleEmptyImg}\n                cross\n                dbCategory={dbCategory}\n                backArrowPathId={\"/without-organization/dashboard\"}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WitoutOrgUpdateGoals;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/Index.jsx",["612"],"import React, { useState,useEffect } from \"react\";\nimport MiniDrawer from \"../../Sidebar\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport CreateGoals from \"./CreateGoals\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useHistory, useParams } from \"react-router-dom\";\n\nconst goalsInput = {\n  eventName: \"\",\n  description: \"\",\n  dificulty: \"\",\n  endDate: \"\",\n  investMin: \"\",\n  investMax: \"\",\n  rewardMin: \"\",\n  rewardMax: \"\",\n  startDate: \"\",\n  category: \"\",\n  numberOfDays:''\n};\n\nconst Index = () => {\n  const { id } = useParams();\n  // console.log(id)\n  const history = useHistory();\n  const [inputValues, setInputValues] = useState(goalsInput);\n  const [imgUrl, setImgurl] = useState(\"\");\n  const [imgName, setImgName] = useState(\"\");\n  const [local, setLocal] = useState(\"\");\n  // loading\n  let [loading, setLoading] = useState(false);\n  const handleGoals = (event) => {\n    setInputValues({ ...inputValues, [event.target.name]: event.target.value });\n  };\n\n  const handleGoalImg = (event) => {\n    const url = URL.createObjectURL(event.target.files[0]);\n    const goalImgName = event.target.files[0].name;\n    setImgurl(url);\n    setImgName(goalImgName);\n    setLocal(event.target.files[0]);\n  };\n  // firebase storage ref\n  const storage = firebase.storage();\n  let createStorageRef = () => storage.ref(`goalsImages/${imgName}`).put(local);\n  let downLoad = () => storage.ref(`goalsImages/${imgName}`).getDownloadURL();\n\n  // firebase database reference\n  const db = firebase.database();\n  const goalsRef = db.ref(`organizations/${id}/goals`);\n  const pushGoal = goalsRef.push();\n  const ref = db.ref(`organizations/${id}/categories`);\n  let [dbCategory, setDbCategory] = useState([]);\n\n  const getCategories= ()=>{\n    ref.on(\"value\", (snapshot) => {\n      let categoryArray = [];\n      snapshot.forEach((data) => {\n        let resData = data.val();\n        let dataKey = data.key;\n        resData.id = dataKey;\n        categoryArray.push(resData);\n      });\n      setDbCategory(categoryArray);\n    });\n  }\n\n  useEffect(()=>{\n    getCategories()\n    return ()=>{\n    getCategories()\n\n    }\n  },[])\n\n  // add goals in database\n\n  const handleAddGoals = (e) => {\n    e.preventDefault();\n    setLoading(true);\n    createStorageRef().then(() => {\n      downLoad().then((url) => {\n        pushGoal\n          .set({\n            inputValues,\n            // numberOfDays,\n            url,\n            peopleJoined: 0,\n            used:false\n          })\n          .then(() => {\n            setLoading(false);\n            history.push(`/organizations/${id}/dashboard`);\n          })\n          .catch((err) => {\n            console.log(err);\n            setLoading(false);\n          });\n      });\n    });\n    // console.log(inputValues);\n    setInputValues(goalsInput);\n    setImgurl(\"\");\n  };\n\n  return (\n    <div>\n      <div className=\"createGoals_container\">\n        <div className=\"createGoals_md\">\n          <div className=\"dashboard_left_content\">\n            <MiniDrawer />\n          </div>\n          <div className=\"create_goals_right_content\">\n            <div className=\"top_route_head\">\n              <p className=\"top_route_icon\">\n                <PersonIcon />\n              </p>\n              <p style={{ marginLeft: \"10px\" }}>Goals</p>\n            </div>\n            <div className=\"create_goals_box_main\">\n              <CreateGoals\n                handleAddGoals={handleAddGoals}\n                handleInputGoals={handleGoals}\n                handleGoalImg={handleGoalImg}\n                inputValues={inputValues}\n                imgUrl={imgUrl}\n                loading={loading}\n                btnValue=\"Add goals\"\n                dbCategory={dbCategory}\n                backArrowPathId={`/organizations/${id}/dashboard`}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Index;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/AllGoalsOfOrganization/DetailPage.jsx",["613"],"import React from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport MenuAppBar from \"../../../Layout/Navbar\";\nimport firebase from \"../../../Config/FirebaseConfig\";\nimport AlertDialog from \"../../../Components/AlertPopup\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport TextsmsOutlinedIcon from \"@material-ui/icons/TextsmsOutlined\";\nimport { Link } from \"react-router-dom\";\n\n\n\nconst DetailPage = () => {\n  const db = firebase.database();\n  const { id } = useParams();\n  const history = useHistory();\n  const [goalDetail, setGoalDetail] = useState([]);\n  const [showPopup, setShowPopup] = useState(false);\n  const [validInvestPopup, setValidInvestPopup] = useState(false);\n  const [alreadyExistPopup, setAlreadyExistPopup] = useState(false);\n  const [lessBalancePopup, setLessBalancePopup] = useState(false);\n  const [range, setRange] = useState(\"\");\n  const selector = useSelector((state) => {\n    return state;\n  });\n  useEffect(() => {\n    const filterSelectedGoal = selector.userReducer.allGoalsOfOrg.filter(\n      (val) => val.id === id\n    );\n    setGoalDetail(filterSelectedGoal);\n  }, []);\n\n  let [userInvest, setUserInvest] = useState();\n  const handleInvestment = (e) => {\n    setUserInvest(e.target.value);\n  };\n\n  // select goals working\n  const handleStartGoal = (event) => {\n    let filterFormSelectedGoal = selector.userReducer.selectedGoals.filter(\n      (val) => val.id === event\n    );\n    let filterSelectedGoalFromAllGoals =\n      selector.userReducer.allGoalsOfOrg.filter((goal) => goal.id === event);\n    const numberOfJoinedPeople = filterSelectedGoalFromAllGoals[0].peopleJoined;\n    const currentOrgUserBalance =\n      selector.userReducer.currentUserOfOrganization;\n      // check inter range \n    if (\n      Number(userInvest) <=\n        filterSelectedGoalFromAllGoals[0].inputValues.investMax &&\n      Number(userInvest) >=\n        filterSelectedGoalFromAllGoals[0].inputValues.investMin\n    ) {\n      // check if user have balance equal or more than balance goal \n      if (Number(userInvest) < currentOrgUserBalance[0].balance) {\n        // check goal is already selected \n        if (!filterFormSelectedGoal.length) {\n          // check wheather user enrolled org or not \n          if (selector.goalReducer.currentUser.orgId !== \"\") {\n            db.ref(\n              `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}`\n            ).update({\n              balance: currentOrgUserBalance[0].balance - Number(userInvest),\n            });\n            db.ref(\n              `organizations/${selector.goalReducer.currentUser.orgId}/goals/${event}`\n            ).update({ used: true, peopleJoined: numberOfJoinedPeople + 1 });\n            // update state of users goal \n            db.ref(\n              `organizations/${selector.goalReducer.currentUser.orgId}/users/${selector.userReducer.currentUserOrgId}/myGoals`\n            )\n              .push()\n              .update({\n                myGoals: filterSelectedGoalFromAllGoals[0],\n                submit: false,\n                GoalStartDate: new Date().toLocaleString(),\n                hasStarted: true,\n                approved: false,\n                decline: false,\n                userInvestment: userInvest,\n                isFavorite: false,\n                isReport: false,\n                acceptReport: false,\n                reward: \"\",\n                percantage: \"\",\n                pending: false,\n              })\n              .then(() => {\n                console.log(\"selected\");\n                setShowPopup(true);\n              })\n              .catch((err) => {\n                console.log(err);\n                alert(\"connection failed please try again\");\n              });\n          }\n          //    set goal if user not enrolled in any org\n          else {\n            db.ref(\n              `withoutOrganization/goals/${selector.goalReducer.currentUser.orgId}/${event}`\n            ).update({ used: true });\n            db.ref(\n              `withoutOrganization/users/${selector.userReducer.currentUserOrgId}`\n            ).update({\n              balance: currentOrgUserBalance[0].balance - Number(userInvest),\n            });\n            db.ref(\n              `withoutOrganization/users/${selector.userReducer.currentUserOrgId}/myGoals`\n            )\n              // .child(\"myGoals\")\n              .push()\n              .update({\n                myGoals: filterSelectedGoalFromAllGoals[0],\n                submit: false,\n                GoalStartDate: new Date().toLocaleString(),\n                hasStarted: true,\n                approved: false,\n                decline: false,\n                userInvestment: userInvest,\n                isFavorite: false,\n                isReport: false,\n                acceptReport: false,\n                reward: \"\",\n                percantage: \"\",\n                pending: false,\n              })\n              .then(() => {\n                console.log(\"selected\");\n                setShowPopup(true);\n              })\n              .catch((err) => {\n                console.log(err);\n                alert(\"connection failed please try again\");\n              });\n          }\n        } else {\n          // alert('already exist')\n          setAlreadyExistPopup(true);\n        }\n      } else {\n        setLessBalancePopup(true);\n        // console.log(\"your balance is less\", currentOrgUserBalance[0].balance);\n      }\n    }\n    // }else{\n\n    //   }\n    else {\n      // console.log('please enter between ')\n      setValidInvestPopup(true);\n      setRange(\n        filterSelectedGoalFromAllGoals[0].inputValues.investMin +\n          \"-\" +\n          filterSelectedGoalFromAllGoals[0].inputValues.investMax\n      );\n    }\n  };\n\n  //   alert popup close function\n  const handleClose = () => {\n    setShowPopup(false);\n    history.push(\"/selec-goals\");\n  };\n  const handleCloseInvestPopup = () => {\n    setValidInvestPopup(false);\n    setAlreadyExistPopup(false);\n  };\n\n  const handleCloseLessBalancePopup = () => {\n    setLessBalancePopup(false);\n  };\n\n\n  return (\n    <div className=\"userGoalDetail_container\">\n      {showPopup ? (\n        <AlertDialog\n          handleClose={handleClose}\n          open={showPopup}\n          value=\"Good luck on your goal\"\n          btnValue=\"Back to My Goals\"\n        />\n      ) : null}\n      {validInvestPopup ? (\n        <AlertDialog\n          handleClose={handleCloseInvestPopup}\n          open={validInvestPopup}\n          value={`please enter investment between given range ${range}`}\n          btnValue=\"OK\"\n        />\n      ) : null}\n      {alreadyExistPopup ? (\n        <AlertDialog\n          handleClose={handleCloseInvestPopup}\n          open={alreadyExistPopup}\n          value=\"You have already selected this goal!\"\n          btnValue=\"Cancel\"\n        />\n      ) : null}\n      {lessBalancePopup ? (\n        <AlertDialog\n          handleClose={handleCloseLessBalancePopup}\n          open={lessBalancePopup}\n          value=\"You can not start goal because you don't have balance !\"\n          btnValue=\"OK\"\n        />\n      ) : null}\n      <div className=\"userGoalDetail_md\">\n        <MenuAppBar />\n        <div className=\"mobViewHead dtMobViewHead\">\n          <div className=\"mobViewHeadContent mobVwHead\">\n            <div className=\"mobHeadBack\">\n              <Link className=\"mobHeadBack_link\" to=\"/search-goals\">\n                <ArrowBackIosIcon />\n              </Link>\n            </div>\n            <h2>Upcomming Challenges</h2>\n            <div className=\"headChatIcon\">\n              <TextsmsOutlinedIcon />\n            </div>\n          </div>\n        </div>\n        {/* {!loadingGoal ? ( */}\n        <div className=\"userGoal_detail_d\">\n          {goalDetail.length ? (\n            goalDetail.map((val) => (\n              <div className=\"userGoalDetail_content\" key={val.id}>\n                <div className=\"detailLeftContent\">\n                  <Link to=\"/search-goals\" className=\"Verifyback_link\">\n                    <ArrowBackIcon />\n                  </Link>\n                  <img className=\"desktopViewDimg\" src={val.url} alt=\"...\" />\n                  <button\n                    className=\"start_goal_btn\"\n                    onClick={() => handleStartGoal(val.id)}\n                  >\n                    Submit\n                  </button>\n                </div>\n                <div className=\"detailRight_content\">\n                  <div className=\"detail_list\">\n                    <div className=\"goalDetailCard\">\n                      <div className=\"detailHead\">\n                        <h4>{val.inputValues.eventName}</h4>\n                        <p>Start date : {val.inputValues.startDate}</p>\n                      </div>\n                      <div className=\"detailBody\">\n                        <p>Welcome to the newest challengy offered by Tryve</p>\n                        <p className=\"decs\">{val.inputValues.description}</p>\n                        <div className=\"verifyMethod\">\n                          <h4>Verification Methods</h4>\n                          <div className=\"verifyImg\">\n                            <img\n                              src=\"https://static.vecteezy.com/system/resources/previews/000/939/976/non_2x/asian-young-girl-drink-water-photo.jpg\"\n                              alt=\"...\"\n                            />\n                            <img\n                              src=\"https://static.vecteezy.com/system/resources/previews/000/939/976/non_2x/asian-young-girl-drink-water-photo.jpg\"\n                              alt=\"...\"\n                            />\n                          </div>\n                          <p className=\"investRange\">\n                            Enter between ${val.inputValues.investMin} - $\n                            {val.inputValues.investMax} amount to join\n                          </p>\n                        </div>\n                        <div className=\"investInp\">\n                          <input\n                            type=\"number\"\n                            onChange={handleInvestment}\n                            className=\"inp\"\n                            placeholder=\"Enter Amount\"\n                          />\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"goalMob_btn\">\n                    <button\n                      className=\"start_goal_btn\"\n                      onClick={() => handleStartGoal(val.id)}\n                    >\n                      Submit\n                    </button>\n                  </div>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div onClick={() => history.goBack()} className=\"goBack\">\n              {\" \"}\n              Go back and select product...{\" \"}\n            </div>\n          )}\n        </div>\n        {/* ) : (\n          <LoadingState />\n        )} */}\n      </div>\n    </div>\n  );\n};\n\nexport default DetailPage;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/Index.jsx",["614"],"import React, { useEffect, useState } from \"react\";\nimport GoalsDetail from \"./GoalsDetail\";\nimport MiniDrawer from \"../../Sidebar\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\n\nimport \"./style.css\";\n\nconst WithoutOrgGoalDetail = () => {\n  const db = firebase.database();\n  const history = useHistory(useHistory);\n  let { goal } = useParams();\n  let [filterGoal, setFilterGoal] = useState([]);\n  let [loading, setLoading] = useState(false);\n  const goals = useSelector((state) => {\n    return state.goalReducer.withoutOrgGoals;\n  });\n  useEffect(() => {\n    //   filter selected goal detail\n    let goalsFilter = goals.filter((val) => val.id === goal);\n    setFilterGoal(goalsFilter);\n  }, []);\n\n  //   delete gaol function\n  const deleteGoals = (event) => {\n    setLoading(true);\n    db.ref(`withoutOrganization/goals/${event}`)\n      .remove()\n      .then(() => {\n        setFilterGoal([]);\n        setLoading(false);\n        history.push(`/without-organization/dashboard`);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n      });\n  };\n  const editGoal = (event) => {\n    history.push(`/without-organization/edit-goal/${event}`);\n  };\n\n  return (\n    <div className=\"goals_detail_container\">\n      <div className=\"dashboard_left_content\">\n        <MiniDrawer withOutOrg />\n      </div>\n      <div className=\"goals_detailMd_right_content\">\n        <div className=\"top_route_head\">\n          <p className=\"top_route_icon\">\n            <PersonIcon />\n          </p>\n          <p style={{ marginLeft: \"10px\" }}>Goals</p>\n        </div>\n        <GoalsDetail\n          goalDetail={filterGoal[0]}\n          deleteGoals={deleteGoals}\n          loading={loading}\n          editGoal={editGoal}\n          backArrowPathId=\"/without-organization/dashboard\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default WithoutOrgGoalDetail;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/Index.jsx",["615"],"import React, { useEffect } from \"react\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport {\n  setWithoutOrgSubmitGoals,\n  setWithoutOrgApprovedGoals,\n  setWithoutOrgDeclineGoals,\n  setReportGoals,\n  setFakeGoalWithOutOrg\n} from \"../../../../GlobalState/CreateSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport MiniDrawer from \"../../Sidebar\";\nimport SubmitGoalsTable from \"./SubmitGoalsTable\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./style.css\";\nimport { getOrgUsers } from \"../OrganizationUsers/UserList\";\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          {children}\n          {/* <Typography> */}\n          {/* </Typography> */}\n        </Box>\n      )}\n    </div>\n  );\n}\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `scrollable-auto-tab-${index}`,\n    \"aria-controls\": `scrollable-auto-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    width: \"100%\",\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst WithoutOrgSubmitedGoals = () => {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  const dispatch = useDispatch();\n  const db = firebase.database();\n  const dbRef = db.ref(`withoutOrganization/submitGoals`);\n\n  // get filter organization goals from database\n  const getFilterOrgGoals = () => {\n    dbRef.on(\"value\", (snapshot) => {\n      let submitOrgGoalsArry = [];\n      let approvedOrgGoals = [];\n      let declineOrgGoals = [];\n      let reportGoalArray = [];\n      let fakeGoal = []\n      snapshot.forEach((data) => {\n        const getData = data.val();\n        console.log(getData);\n        const getId = data.key;\n        getData.submitGoalId = getId;\n        // if goals in pending\n        if (!getData.approved && !getData.decline && !getData.isReport) {\n          //  console.log(getData.approved)\n          submitOrgGoalsArry.push(getData)\n        }\n        // if goals is approved\n        else if (getData.approved && !getData.isReport) {\n          approvedOrgGoals.push(getData)\n        } else if (getData.decline) {\n          declineOrgGoals.push(getData)\n        } else if (getData.isReport && !getData.acceptReport) {\n          reportGoalArray.push(getData)\n        }  if (getData.isReport && getData.acceptReport) {\n          fakeGoal.push(getData)\n          // console.log(getData)\n        }\n        // console.log(getData)\n      })\n      // submit goals\n      dispatch(setWithoutOrgSubmitGoals(submitOrgGoalsArry));\n      // approved goal\n      dispatch(setWithoutOrgApprovedGoals(approvedOrgGoals));\n      // decline goals\n      dispatch(setWithoutOrgDeclineGoals(declineOrgGoals));\n      // report goals\n      dispatch(setReportGoals(reportGoalArray));\n      // fake goals \n      dispatch(setFakeGoalWithOutOrg(fakeGoal))\n    });\n  };\n\n  useEffect(() => {\n    getOrgUsers(dispatch);\n    getFilterOrgGoals();\n  }, []);\n\n\n  const selector = useSelector((state) => {\n    return state.goalReducer;\n  });\n  // console.log(selector)\n\n  return (\n    <div>\n      <div className=\"dashboard_md\">\n        <div className=\"dashboard_left_content\">\n          <MiniDrawer withOutOrg />\n        </div>\n        <div className={`${classes.root} submitd_table_md`}>\n          <AppBar position=\"static\" color=\"default\">\n            <Tabs\n              value={value}\n              onChange={handleChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              variant=\"scrollable\"\n              scrollButtons=\"auto\"\n              aria-label=\"scrollable auto tabs example\"\n            >\n              <Tab label=\"Submit Goals\" {...a11yProps(0)} />\n              <Tab label=\"Approved Goals\" {...a11yProps(1)} />\n              <Tab label=\"Decline Goals\" {...a11yProps(2)} />\n              <Tab label=\"Reported Goals\" {...a11yProps(3)} />\n              <Tab label=\"Fake Goals\" {...a11yProps(4)} />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={value} index={0}>\n            <SubmitGoalsTable selector={selector.withoutOrgSubmitGoals} />\n          </TabPanel>\n          <TabPanel value={value} index={1}>\n            <SubmitGoalsTable\n              selector={selector.withourOrgApprovedGoals}\n              btn\n              declineBtn\n              approvedUndoFunc\n            />\n          </TabPanel>\n          <TabPanel value={value} index={2}>\n            <SubmitGoalsTable\n              selector={selector.withourOrgDeclineGoals}\n              btn\n              undoFunc\n            />\n          </TabPanel>\n          <TabPanel value={value} index={3}>\n            <SubmitGoalsTable\n              selector={selector.reportGoals}\n              btn\n              declineBtn\n              declineForReported\n              undoForReported\n            />\n          </TabPanel>\n          <TabPanel value={value} index={4}>\n            <SubmitGoalsTable\n              selector={selector.withoutOrgfakeGoal}\n              btn\n              declineBtn\n              undoFake\n            />\n          </TabPanel>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default WithoutOrgSubmitedGoals;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/AllGoalsOfOrganization/index.jsx",["616","617","618"],"import React, { useEffect } from 'react'\nimport MenuAppBar from '../../../Layout/Navbar'\nimport { useSelector } from 'react-redux'\nimport firebase from '../../../Config/FirebaseConfig'\nimport './style.css'\nimport GoalsTabs from './GoalsTabs'\nimport {\n  setAllGoals,\n  setCurrentUserOrganizationId,\n  setAllSubmittedGoals,\n} from '../../../GlobalState/UserSideSlice'\nimport { useDispatch } from 'react-redux'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined'\nimport { Link } from 'react-router-dom'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst AllGoalsOfOrganization = () => {\n  const db = firebase.database()\n  const dispatch = useDispatch()\n  // get current user detail\n  const userDetail = useSelector((state) => {\n    return state\n  })\n  // console.log(userDetail);\n  const { goalReducer } = userDetail\n\n  //  get goals function if user enrolled in  any org or not\n  const getGoals = async (parameter) => {\n    db.ref(parameter).on('value', (snapshot) => {\n      var goalsArray = []\n      snapshot.forEach((goals) => {\n        let getGoals = goals.val()\n        let getGoalsId = goals.key\n        getGoals.id = getGoalsId\n        goalsArray.push(getGoals)\n      })\n      dispatch(setAllGoals(goalsArray))\n    })\n  }\n\n  //  get submitted goals\n  const getSubmittedGoalsOfUser = async (parameter) => {\n    db.ref(parameter).on('value', (snapshot) => {\n      var goalsArray = []\n      snapshot.forEach((goals) => {\n        let getGoals = goals.val()\n        let getGoalsId = goals.key\n        if (getGoals.userIdMain === goalReducer.currentUser.id) {\n          getGoals.SubmitGoalId = getGoalsId\n          goalsArray.push(getGoals)\n        }\n      })\n      dispatch(setAllSubmittedGoals(goalsArray))\n    })\n  }\n\n  useEffect(() => {\n    // condition for  if user enrolled in any organization\n    if (goalReducer.currentUser.orgId !== '') {\n      // get goals\n      getGoals(`organizations/${goalReducer.currentUser.orgId}/goals`)\n      //   get users selected goals\n      db.ref(`organizations/${goalReducer.currentUser.orgId}/users`).on(\n        'value',\n        (snapshot) => {\n          var UsersArray = []\n          snapshot.forEach((goals) => {\n            let getUsers = goals.val()\n            let getUserId = goals.key\n            getUsers.orgMainId = getUserId\n            UsersArray.push(getUsers)\n          })\n          UsersArray.filter((val) => {\n            if (val.email === goalReducer.currentUser.email) {\n              dispatch(setCurrentUserOrganizationId(val.orgMainId))\n              // get submitted goals\n              getSubmittedGoalsOfUser(\n                `organizations/${userDetail.goalReducer.currentUser.orgId}/submitGoals`,\n              )\n            }\n          })\n        },\n      )\n    } else {\n      // condition for  if user not enrolled in any organization\n      getGoals(`withoutOrganization/goals`)\n      //   get user selected goals\n      db.ref(`withoutOrganization/users/${goalReducer.currentUser.orgId}`).on(\n        'value',\n        (snapshot) => {\n          var UsersArray = []\n          snapshot.forEach((goals) => {\n            let getUsers = goals.val()\n            let getUserId = goals.key\n            getUsers.orgMainId = getUserId\n            UsersArray.push(getUsers)\n          })\n          UsersArray.filter((val) => {\n            if (val.email === goalReducer.currentUser.email) {\n              // console.log(val.orgMainId)\n              dispatch(setCurrentUserOrganizationId(val.orgMainId))\n              // get seletec goal\n              // get submitted goal\n              getSubmittedGoalsOfUser(`withoutOrganization/submitGoals`)\n            }\n          })\n        },\n      )\n    }\n  }, [])\n\n  return (\n    <div className=\"profile_container\">\n      <MenuAppBar />\n      <div className=\"mobViewHead\">\n        <div className=\"mobViewHeadMain\">\n          <div className=\"mobViewHeadContent \">\n            <div className=\"mobHeadBack\">\n              <Link className=\"mobHeadBack_link\" to=\"/selec-goals\">\n                <ArrowBackIosIcon />\n              </Link>\n            </div>\n            <h2>TRYVE</h2>\n            <div className=\"headChatIcon\">\n              <TextsmsOutlinedIcon />\n            </div>\n          </div>\n          <div className=\"searchBar_goals\">\n            <SearchIcon />\n            <input type=\"text\" placeholder=\"Search goals\" />\n          </div>\n          <div className=\"breadCrumbs\">\n            <div className=\"breadCrumbs_link\">\n              <p>My List / Favorites</p>\n              <Link className=\"white_link\" to=\"\">\n                See all\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"allGoals_main\">\n          <GoalsTabs />\n      </div>\n    </div>\n  )\n}\n\nexport default AllGoalsOfOrganization\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/VerificationGoal/index.jsx",["619"],"import React from 'react'\nimport { useSelector } from 'react-redux'\nimport firebase from '../../../Config/FirebaseConfig'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport './style.css'\nimport { Link, useHistory } from 'react-router-dom'\nimport StarIcon from '@material-ui/icons/Star'\n\nconst VerificationPage = () => {\n  const db = firebase.database()\n  const history = useHistory()\n  const selector = useSelector((state) => {\n    return state\n  })\n\n  let [category, setCategory] = useState([])\n  const getCategories = (parameter) => {\n    db.ref(parameter).on('value', (snapshot) => {\n      let categoryArray = []\n      snapshot.forEach((data) => {\n        const resData = data.val()\n        const resKey = data.key\n        resData.CategoryId = resKey\n        categoryArray.push(resData)\n      })\n      setCategory(categoryArray)\n    })\n  }\n  useEffect(() => {\n    if (selector.goalReducer.currentUser.orgId !== '') {\n      getCategories(\n        `organizations/${selector.goalReducer.currentUser.orgId}/categories`,\n      )\n    } else {\n      getCategories(`withoutOrganization/categories`)\n    }\n    return () => {\n      setCategory([])\n    }\n  }, [])\n\n  const handleDetailPage = (event) => {\n    // console.log(event);\n    history.push(`/mygoal-detail/${event.id}`)\n  }\n\n  return (\n    <div>\n      <div className=\"verification_container\">\n        <div className=\"verificationMain\">\n          {category.map((val) => (\n            <div key={val.CategoryId}>\n              <h3 className=\"category_head\">{val.category}</h3>\n              <div className=\"verifyGoal_md\">\n                {selector.userReducer.selectedGoals.map((goal, i) => {\n                  return (\n                    <div\n                      className=\"verifyGoals\"\n                      style={\n                        goal.inputValues.category !== val.category \n                          ? { display: 'none' }\n                          : null\n                      }\n                      key={goal.myGoalId}\n                    >\n                      {goal.inputValues.category === val.category ? (\n                        <div\n                          className=\"goalsCard\"\n                          onClick={() => handleDetailPage(goal)}\n                        >\n                          <p className=\"isVerify\">\n                            Recruiting Expires D-2\n                          </p>\n                          <img\n                            className=\"verifyGoalImg\"\n                            src={goal.url}\n                            alt=\"\"\n                          />\n                          <div className=\"card_bd\">\n                            <p className=\"eventName\">\n                              {goal.inputValues.eventName}\n                            </p>\n                            <div className=\"ratings\">\n                              <div>\n                                {' '}\n                                <StarIcon className=\"starIcon\" /> <p> 4.94 </p>{' '}\n                              </div>\n                              <p className=\"joined\">\n                                Currently {goal.peopleJoined} Signed Up{' '}\n                              </p>\n                            </div>\n                            <div className=\"goalCounter\">\n                              <p className=\"goalLimitDate\">\n                                {goal.GoalStartDate}\n                              </p>\n                              <p className=\"goalWeek\">2w</p>\n                              <p className=\"goalWeek\">2d</p>\n                            </div>\n                          </div>\n                        </div>\n                      ) : (\n                        \n                        <div>\n                          <Link to='/search-goals'>search goals</Link>\n                        </div>\n                      )}\n                    </div>\n                  )\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default VerificationPage\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Feed/index.jsx",["620","621"],"import React, { useEffect } from \"react\";\nimport MenuAppBar from \"../../../Layout/Navbar\";\nimport firebase from \"../../../Config/FirebaseConfig\";\n// import SmsIcon from \"@material-ui/icons/Sms\";\nimport \"./feed.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport UsersGoals from \"./UsersGoals\";\nimport { getFeedGoals, setPostsLike ,setPostComments} from \"../../../GlobalState/UserSideSlice\";\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined';\n// import LoadingState from \"../../../Components/Loading\";\n\n\nconst Feed = () => {\n  const db = firebase.database();\n  const dispatch = useDispatch();\n  const userDetail = useSelector((state) => {\n    return state.goalReducer.currentUser;\n  });\n  const submitGoal = useSelector((state) => {\n    return state.userReducer;\n  });\n\n  const getAllUsersGoals = (parameter) => {\n    db.ref(parameter).on(\"value\", (snapshot) => {\n      var goalsArray = [];\n      snapshot.forEach((goals) => {\n        let getGoals = goals.val();\n        let getGoalsId = goals.key;\n        getGoals.orgMainId = getGoalsId;\n        // console.log(getGoals)\n        if (getGoals.submit && !getGoals.acceptReport ) {\n          goalsArray.push(getGoals);\n        // console.log('in condition',getGoals)\n\n        }\n      });\n      dispatch(getFeedGoals(goalsArray));\n    });\n  };\n  // get post likes data\n  const getGoalsLikes = (parameter) => {\n    db.ref(parameter).on(\"value\", (snapshot) => {\n      var likesArray = [];\n      snapshot.forEach((goals) => {\n        goals.forEach((like) => {\n          let getLikes = like.val();\n          let getLikesId = like.key;\n          getLikes.likeId = getLikesId;\n          likesArray.push(getLikes);\n        });\n      });\n      dispatch(setPostsLike(likesArray));\n    });\n  };\n\n    // get post Comment data\n    const getGoalsComments = (parameter) => {\n      db.ref(parameter).orderByChild('timestamp').on(\"value\", (snapshot) => {\n        var commentsArray = [];\n        snapshot.forEach((goals) => {\n          goals.forEach((like) => {\n            let getComments = like.val();\n            let getCommentId = like.key;\n            getComments.commentId = getCommentId;\n            commentsArray.push(getComments);\n          });\n        });\n        dispatch(setPostComments(commentsArray));\n      });\n    };\n  \n  useEffect(() => {\n    // condition for  if user enrolled in any organization\n    if (userDetail.orgId !== \"\") {\n      getAllUsersGoals(`organizations/${userDetail.orgId}/submitGoals`);\n      getGoalsLikes(`organizations/${userDetail.orgId}/likes`);\n      getGoalsComments(`organizations/${userDetail.orgId}/comments`);\n      // }\n    } else {\n      getAllUsersGoals(`withoutOrganization/submitGoals`);\n      getGoalsLikes(`withoutOrganization/likes`);\n      getGoalsComments(`withoutOrganization/comments`);\n    }\n  }, []);\n\n  // const [loading, setLoading] = React.useState(true)\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     setLoading(false)\n  //   }, 1000)\n  // }, [])\n\n  return (\n    <div className=\"feedContainer\">\n      <MenuAppBar />\n      <div className=\"mobViewFeedHead\">\n        <div className=\"mobViewContent\">\n          <h3>My feed</h3>\n          <p>All of your personalised postsin all place</p>\n        </div>\n        <TextsmsOutlinedIcon className=\"feedSmsIcon\" />\n      </div>\n      <div className=\"feedMain\">\n        {/* {!loading? */}\n        <div className=\"feedContent\">\n          <UsersGoals />\n        </div>\n       {/* : <LoadingState /> } */}\n      </div>\n    </div>\n  );\n};\n\nexport default Feed;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Categories/index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/index.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Config/FirebaseConfig.js",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/StatusTabs.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/OrganizationUsers/UserList.jsx",["622"],"import React, { useEffect } from \"react\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { allWithoutOrganizationUsers } from \"../../../../GlobalState/CreateSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport dp from \"../../../../Assets/dp.png\";\n\n\nexport const getOrgUsers = (dispatch) => {\n  const db = firebase.database();\n  const dbRef = db.ref(`withoutOrganization/users`);\n  dbRef.on(\"value\", (snapshot) => {\n    let filterOrgUserssArry = [];\n    snapshot.forEach((data) => {\n      const getData = data.val();\n      const getId = data.key;\n      getData.id = getId;\n      filterOrgUserssArry.push(getData);\n    });\n    dispatch(allWithoutOrganizationUsers(filterOrgUserssArry));\n  });\n};\nconst UserList = () => {\n  const dispatch = useDispatch();\n\n  // get filter organization goals from database \n\n  useEffect(()=>{\n    getOrgUsers(dispatch)\n  },[])\n\n  const userSelector = useSelector((state)=>{\n      return state.goalReducer.withoutOrgUser\n  })\n\n\n  return (\n    <div>\n      <div className=\"table_md\">\n        <table className=\"goals_table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Number</th>\n              <th>Created at</th>\n            </tr>\n          </thead>\n          <tbody>\n            {userSelector.map((val) => {\n                // console.log(val)\n              return (\n                <tr key={val.id}>\n                  <td>\n                    <img\n                      className=\"goals_img\"\n                      src={val.url ? val.url : dp}\n                      alt=\"...\"\n                    />\n                  </td>\n                  <td>{val.name}</td>\n                  <td>{val.email}</td>\n                  <td>{val.number}</td>\n                  <td>{val.createdAt}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default UserList;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/SubmitGoals/SubmitGoalsTable.jsx",["623","624","625","626"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport ApprovedForm from \"../../WithOrganizations/SubmitGoals/ApprovedForm\";\nimport { send } from \"emailjs-com\";\n\nconst SubmitGoalsTable = ({\n  selector,\n  btn,\n  undoFunc,\n  declineBtn,\n  approvedUndoFunc,\n  declineForReported,\n  undoForReported,\n  undoFake\n}) => {\n  const db = firebase.database();\n\n  // approved form working\n  let [open, setOpen] = useState(false);\n  let [goalId, setGoalId] = useState(\"\");\n  let [percantage, setPercentage] = useState(\"\");\n  let [reward, setReward] = useState(\"\");\n  let [rewardRange, setRewardRange] = useState(\"\");\n  let [organizationUserId, setOrganizationUserId] = useState(\"\");\n  let [loading] = useState(false);\n  let [userBalance, setUserBalance] = useState(\"\");\n  let [userMyGoalId, setUserMyGoalId] = useState(\"\");\n  let [userInvest,setUserInvest] = useState()\n\n  // working for approved form\n  const openApprovedForm = (event) => {\n    setOpen(true);\n    setGoalId(event.submitGoalId);\n    setUserMyGoalId(event.SubmitGoal.myGoalId);\n    setOrganizationUserId(event.orgUserId);\n    setRewardRange(\n      `${event.SubmitGoal.inputValues.rewardMin} - ${event.SubmitGoal.inputValues.rewardMin}`\n    );\n    setUserInvest(event.SubmitGoal.userInvestment)\n\n    // get organization user info to get prev balance\n    db.ref(`withoutOrganization/users/${event.orgUserId}`).on(\n      \"value\",\n      (snapshot) => {\n        let userData = snapshot.val();\n        let userBalancedb = userData.balance;\n        setUserBalance(userBalancedb);\n      }\n    );\n  };\n\n  const handlePercentage = (event) => {\n    setPercentage(event.target.value);\n  };\n\n  const handleReward = (event) => {\n    setReward(event.target.value);\n  };\n  // form close function\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  // goals delete function\n  const handleApprovedGoals = () => {\n    let approveData = {\n      approved: true,\n      pending: false,\n      percantage: percantage,\n      reward: reward,\n      submit: true,\n      isReport: false,\n    };\n    let pendingData = {\n      approved: true,\n      percantage: percantage,\n      pending: true,\n      reward: reward,\n      submit: true,\n      isReport: false,\n    };\n    if (percantage === \"100\") {\n      // console.log(\"100%\");\n      db.ref(`withoutOrganization/users/${organizationUserId}`).update({\n        balance: Number(userBalance) + Number(reward) + userInvest,\n      });\n      db.ref(\n        `withoutOrganization/users/${organizationUserId}/myGoals/${userMyGoalId}`\n      ).update(approveData);\n      db.ref(`withoutOrganization/submitGoals/${goalId}`).update(approveData);\n      setPercentage(\"\");\n      setReward(\"\");\n      handleClose();\n    } else {\n      db.ref(`withoutOrganization/submitGoals/${goalId}`).update(pendingData);\n      db.ref(\n        `withoutOrganization/users/${organizationUserId}/myGoals/${userMyGoalId}`\n      ).update(pendingData);\n\n      handleClose();\n      setPercentage(\"\");\n      setReward(\"\");\n    }\n  };\n\n  const handleDeclineGoals = (event) => {\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\n      decline: true,\n    });\n    db.ref(\n      `withoutOrganization/users/myGoals/${event.SubmitGoal.myGoalId}`\n    ).update({\n      decline: true,\n    });\n  };\n\n  const handleUndoDeclineGoals = (event) => {\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\n      decline: false,\n    });\n    db.ref(\n      `withoutOrganization/users/myGoals/${event.SubmitGoal.myGoalId}`\n    ).update({\n      decline: false,\n    });\n  };\n\n  const balanceSelector = useSelector((state) => {\n    return state.goalReducer.orgUsers;\n  });\n  const allUsersSelector = useSelector((state) => {\n    return state;\n  });\n\n  // approved undo function\n  const handleApprovedUndo = (event) => {\n    const getPrevReward = event.reward;\n    const updateData = {\n      approved: false,\n      pending: false,\n      percantage: \"\",\n      reward: \"\",\n    };\n    balanceSelector.filter((val) => {\n      if (val.id === event.orgUserId) {\n        let userBlnce = val.balance;\n        db.ref(`withoutOrganization/users/${event.orgUserId}`).update({\n          balance: userBlnce -  (Number(getPrevReward)+ event.SubmitGoal.userInvestment ),\n        });\n        db.ref(\n          `withoutOrganization/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n        ).update(updateData);\n        db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update(\n          updateData\n        );\n      }\n    });\n  };\n\n  // undo reported goal\n  const handleUndoReportedGoals = (event) => {\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\n      isReport: false,\n    });\n  };\n\n  // decline if goal is reported\n  const handleDeclineReportGoals = (event) => {\n    const getPrevReward = event.reward;\n    const updateData = {\n      approved: false,\n      percantage: \"\",\n      pending: false,\n      reward: \"\",\n      isReport: true,\n      acceptReport: true,\n      submit: false,\n    };\n    balanceSelector.filter((val) => {\n      if (val.id === event.orgUserId) {\n        let userBlnce = val.balance;\n        db.ref(`withoutOrganization/users/${event.orgUserId}`).update({\n          balance:\n            userBlnce - (Number(getPrevReward) ? Number(getPrevReward) : 0),\n        });\n        db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`)\n          .update(updateData)\n          .then(() => {\n            allUsersSelector.userReducer.allUsers.filter((user) => {\n              if (user.id === event.userIdMain) {\n                // console.log(user)\n                send(\n                  // process.env.REACT_APP_EMAIL_JS_SERVICE_ID,\n                  // process.env.REACT_APP_EMAIL_JS_TEMPLATE_ID,\n                  \"service_q1galup\",\n                  \"template_aq5fbiv\",\n                  {\n                    to: user.email,\n                    to_name: `${event.userName}`,\n                    from_email_name: \"TRYVE\",\n                    subject: \"\",\n                    message: `TRYVE reported your goal please retake good picture. Thanks!`,\n                    from: \"tryve@gmail.com\",\n                    reply_to: \"tryve@gmail.com\",\n                  },\n                  process.env.REACT_APP_EMAIL_JS_USER_ID\n                )\n                  .then(() => {\n                    console.log(\"success...\");\n                  })\n                  .catch((err) => {\n                    console.log(\"admin Email sending FAILED...\", err);\n                  });\n              }\n            });\n          });\n\n        db.ref(\n          `withoutOrganization/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n        ).update(updateData);\n        db.ref(`withoutOrganization/likes/${event.submitGoalId}`).remove();\n        db.ref(`withoutOrganization/comments/${event.submitGoalId}`).remove();\n      }\n    });\n  };\n\n  // undo fake goals\n  const handleUndoFakeGoals = (event) => {\n    db.ref(`withoutOrganization/submitGoals/${event.submitGoalId}`).update({\n      acceptReport: false,\n    });\n    db.ref(\n      `withoutOrganization/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n    ).update({\n      acceptReport: false,\n    });\n  };\n\n  // automatically approved working\n\n  useEffect(() => {\n    let approvedinterVal = setInterval(() => {\n      if (selector.length) {\n        selector.filter((val) => {\n          if (\n            !val.isReport &&\n            !val.decline &&\n            !val.acceptReport &&\n            !val.pending &&\n            val.submit &&\n            !val.approved\n          ) {\n            const inputVal = val.SubmitGoal.inputValues;\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\n            let endDate = new Date(getStartDate);\n            let currentDate = new Date();\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\n            let randomNumGenerate = Math.floor(\n              Math.random() *\n                (Number(inputVal.rewardMax) -\n                  Number(inputVal.rewardMin) +\n                  Number(inputVal.rewardMin))\n            );\n            if (currentDate.getTime() >= endDate.getTime()) {\n              const filterGoalUser = balanceSelector.filter(\n                (user) => user.id === val.orgUserId\n              );\n              const approvedObj = {\n                approved: true,\n                pending: false,\n                percantage: \"100\",\n                reward: randomNumGenerate,\n                submit: true,\n                isReport: false,\n              };\n              db.ref(`withoutOrganization/users/${val.orgUserId}`).update({\n                balance: filterGoalUser[0].balance + randomNumGenerate + val.SubmitGoal.userInvestment,\n              });\n              db.ref(\n                `withoutOrganization/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\n              ).update(approvedObj);\n              db.ref(`withoutOrganization/submitGoals/${val.submitGoalId}`)\n                .update(approvedObj)\n                .then(() => {\n                  console.log(\"auto approved\");\n                });\n              console.log(\"end\", val);\n            }\n          }\n          // if goals is reported and not approved not pending only submit and someone reported then is would be decline autt\n          else if (\n            val.isReport &&\n            !val.decline &&\n            !val.acceptReport &&\n            !val.pending &&\n            val.submit &&\n            !val.approved\n          ) {\n            const inputVal = val.SubmitGoal.inputValues;\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\n            let endDate = new Date(getStartDate);\n            let currentDate = new Date();\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\n            if (currentDate.getTime() >= endDate.getTime()) {\n              db.ref(\n                `withoutOrganization/submitGoals/${val.submitGoalId}`\n              ).update({\n                decline: true,\n                submit: false,\n                isReport: false,\n              });\n              db.ref(\n                `withoutOrganization/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\n              ).update({\n                decline: true,\n                submit: false,\n                isReport: false,\n              });\n            }\n          }\n        });\n      }\n    }, 10000);\n    return () => {\n      clearInterval(approvedinterVal);\n    };\n  });\n\n  // submit goal image function\n  let [imgUrl, setImgUrl] = useState(\"\");\n  let [showImg, setShowImg] = useState(false);\n  const handleSeeImage = (event) => {\n    setImgUrl(event);\n    setShowImg(true);\n  };\n  const handleCloseImg = () => {\n    setShowImg(false);\n    setImgUrl(\"\");\n  };\n\n  // console.log(selector);\n\n  if (!selector.length) {\n    return <div>no goals</div>;\n  }\n\n  return (\n    <div className=\"table_container\">\n      <ApprovedForm\n        open={open}\n        handleClickOpen={openApprovedForm}\n        handleSelect={handlePercentage}\n        handleInputvalue={handleReward}\n        inputValue={reward}\n        btnValue=\"Approved\"\n        labelValue=\"Reward\"\n        range={rewardRange}\n        handleAddFunction={handleApprovedGoals}\n        handleClose={handleClose}\n        loading={loading}\n      />\n      <ApprovedForm\n        handleClickOpen={handleSeeImage}\n        imgUrl={imgUrl}\n        open={showImg}\n        btnValue=\"Close\"\n        handleClose={handleCloseImg}\n      />\n      <div className=\"table_md\">\n        <table className=\"goals_table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Event Name</th>\n              <th>user name</th>\n              <th>Time Limit</th>\n              {/* <th>Signed Up</th> */}\n              <th>category</th>\n              <th>Reward Range</th>\n              {!btn ? <th>Actions</th> : null}\n            </tr>\n          </thead>\n          <tbody>\n            {selector.map((val) => {\n              let goalStartDate = new Date(val.SubmitGoal.GoalStartDate);\n              const newDateForEndDate = new Date(val.submitDate);\n              const goalStartTime = goalStartDate.getTime();\n              const getEndTime = newDateForEndDate.getTime();\n              const oneDayTime = 1000 * 3600 * 24;\n              const takeNumberOfDays =\n                (getEndTime - goalStartTime) / oneDayTime;\n              return (\n                <tr key={val.submitGoalId}>\n                  <td>\n                    <img\n                      className=\"goals_img\"\n                      src={val.uploadImgUlr}\n                      alt=\"...\"\n                    />\n                  </td>\n                  <td>{val.SubmitGoal.inputValues.eventName}</td>\n                  <td>{val.userName}</td>\n                  <td>{val.SubmitGoal.inputValues.numberOfDays} days</td>\n                  <td>\n                    {takeNumberOfDays > val.SubmitGoal.inputValues.numberOfDays\n                      ? \"late\"\n                      : \"submit on time\"}\n                  </td>\n                  <td>{val.SubmitGoal.inputValues.category}</td>\n                  <td>{`${val.SubmitGoal.inputValues.rewardMin} - ${val.SubmitGoal.inputValues.rewardMax}`}</td>\n                  <td className=\"actions_btns\">\n                    {!btn ? (\n                      <button onClick={() => openApprovedForm(val)}>\n                        approved\n                      </button>\n                    ) : null}\n                    {!declineBtn ? (\n                      !undoFunc ? (\n                        <button\n                          className=\"view_icons\"\n                          onClick={() => handleDeclineGoals(val)}\n                        >\n                          decline\n                        </button>\n                      ) : (\n                        <button\n                          className=\"view_icons\"\n                          onClick={\n                            !approvedUndoFunc\n                              ? () => handleUndoDeclineGoals(val)\n                              : () => handleApprovedUndo(val)\n                          }\n                        >\n                          Undo\n                        </button>\n                      )\n                    ) : null}\n                    {/* button for decline if goal is reported  */}\n                    {declineForReported ? (\n                      <button\n                        className=\"view_icons\"\n                        onClick={() => handleDeclineReportGoals(val)}\n                      >\n                        decline\n                      </button>\n                    ) : null}\n                    {undoForReported ? (\n                      <button\n                        className=\"view_icons\"\n                        onClick={() => handleUndoReportedGoals(val)}\n                      >\n                        undo reported\n                      </button>\n                    ) : null}\n                    {undoFake ? (\n                      <button\n                        className=\"view_icons\"\n                        onClick={() => handleUndoFakeGoals(val)}\n                      >\n                        undo fake\n                      </button>\n                    ) : null}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default SubmitGoalsTable;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/Sidebar.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/GoalsDetailPage/GoalsDetail.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/CreateGoals/CreateGoals.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/SignupForm.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/LoginForm.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/InputPopup.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/AlertPopup.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Layout/Navbar.jsx",["627","628","629","630"],"import React, { useEffect } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\n// import MenuIcon from '@material-ui/icons/Menu'\nimport AccountCircle from '@material-ui/icons/AccountCircle'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Menu from '@material-ui/core/Menu'\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle'\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport clsx from 'clsx'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport Button from '@material-ui/core/Button'\nimport List from '@material-ui/core/List'\nimport CameraAltIcon from '@material-ui/icons/CameraAlt'\nimport HomeIcon from '@material-ui/icons/Home'\nimport AppsIcon from '@material-ui/icons/Apps'\nimport PersonIcon from '@material-ui/icons/Person'\nimport SearchIcon from '@material-ui/icons/Search'\nimport ViewListIcon from '@material-ui/icons/ViewList'\nimport firebase from '../Config/FirebaseConfig'\nimport { NavLink, useHistory } from 'react-router-dom'\nimport { userlogOut, setCurrentUser } from '../GlobalState/CreateSlice'\nimport {\n  setAllSelectedGoals,\n  setCurrentUserOrganizationId,\n  setAllDeclineGoals,\n  setAllApprovedGoals,\n  setPendingGoals,\n  setAllGoals,\n} from '../GlobalState/UserSideSlice'\n// import { setAllSelectedGoals, setAllGoals } from '../GlobalState/UserSideSlice'\nimport { useDispatch, useSelector } from 'react-redux'\nimport logo from '../Assets/logo.png'\n\nimport './style.css'\nimport { getAllUserOfOrg } from '../Pages/UserSide/Profile/Profile'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    fontWeight:'bold'\n  },\n  list: {\n    width: 250,\n    zIndex: 999999999,\n  },\n  fullList: {\n    width: 'auto',\n  },\n}))\n\nexport default function MenuAppBar() {\n  const classes = useStyles()\n  const auth = firebase.auth()\n  const db = firebase.database()\n  const history = useHistory()\n  const dispatch = useDispatch()\n  //   const [auth, setAuth] = React.useState(true);\n\n  //   const handleChange = (event) => {\n  //     setAuth(event.target.checked);\n  //   };\n\n  const userInfo = useSelector((state) => {\n    return state.goalReducer.currentUser\n  })\n  const balance = useSelector((state) => {\n    return state.userReducer.currentUserOfOrganization\n  })\n  // console.log(balance)\n  //  get all users\n  useEffect(() => {\n    if (userInfo.orgId !== '') {\n      //   get current user from organization\n      getAllUserOfOrg(\n        `organizations/${userInfo.orgId}/users`,\n        dispatch,\n        userInfo,\n      )\n    } else {\n      //   get current user from without organization\n      getAllUserOfOrg(`withoutOrganization/users`, dispatch, userInfo)\n    }\n  }, [])\n\n  const userDetail = useSelector((state) => {\n    return state\n  })\n  const { goalReducer } = userDetail\n  const getSelectedGoalsOfUser = async (parameter) => {\n    db.ref(parameter).on('value', (snapshot) => {\n      var goalsArray = []\n      var declineArray = []\n      var approveArray = []\n      var pendingArray = []\n      snapshot.forEach((goals) => {\n        let getGoals = goals.val()\n        // console.log(getGoals)\n        let getGoalsId = goals.key\n        let getMyGoal = getGoals.myGoals\n        let {\n          percantage,\n          reward,\n          submit,\n          approved,\n          decline,\n          hasStarted,\n          GoalStartDate,\n          pending,\n          isReport,\n          acceptReport,\n          userInvestment\n        } = getGoals\n        getMyGoal.myGoalId = getGoalsId\n        getMyGoal.submit = submit\n        getMyGoal.hasStarted = hasStarted\n        getMyGoal.GoalStartDate = GoalStartDate\n        getMyGoal.approved = approved\n        getMyGoal.decline = decline\n        getMyGoal.isReport= isReport\n        getMyGoal.acceptReport = acceptReport\n        getMyGoal.userInvestment = Number(userInvestment)\n        // if (reward && percantage && pending !== undefined) {\n          getMyGoal.percentage = percantage\n          getMyGoal.reward = reward\n          getMyGoal.pending = pending\n        // }\n        // if (!goals.val().submit) {\n        goalsArray.push(getMyGoal)\n        // }\n        if (\n          (goals.val().submit &&\n            goals.val().approved &&\n            goals.val().percantage === '100' &&\n            !goals.val().pending) ||\n          (goals.val().submit &&\n            goals.val().approved &&\n            goals.val().percentage !== '100' &&\n            !goals.val().pending)\n        ) {\n          approveArray.push(getMyGoal)\n        } else if (goals.val().decline) {\n          declineArray.push(getMyGoal)\n        } else if (\n          goals.val().approved &&\n          goals.val().percantage !== '100' &&\n          goals.val().pending\n        ) {\n          pendingArray.push(getMyGoal)\n        }\n      })\n\n      dispatch(setAllDeclineGoals(declineArray))\n      dispatch(setAllApprovedGoals(approveArray))\n      dispatch(setAllSelectedGoals(goalsArray))\n      dispatch(setPendingGoals(pendingArray))\n    })\n  }\n\n  useEffect(() => {\n    // condition for  if user enrolled in any organization\n    if (goalReducer.currentUser.orgId !== '') {\n      //   get users selected goals\n      db.ref(`organizations/${goalReducer.currentUser.orgId}/users`).on(\n        'value',\n        (snapshot) => {\n          var UsersArray = []\n          snapshot.forEach((goals) => {\n            let getUsers = goals.val()\n            // console.log('99',getUsers)\n            let getUserId = goals.key\n            getUsers.orgMainId = getUserId\n            UsersArray.push(getUsers)\n          })\n          UsersArray.filter(val =>  {\n            if (val.email === goalReducer.currentUser.email) {\n               dispatch(setCurrentUserOrganizationId(val.orgMainId))\n               getSelectedGoalsOfUser(\n                `organizations/${userDetail.goalReducer.currentUser.orgId}/users/${val.orgMainId}/myGoals`,\n              )\n            }\n          })\n        },\n      )\n    } else {\n      // condition for  if user not enrolled in any organization\n      //   get user selected goals\n      db.ref(`withoutOrganization/users/${goalReducer.currentUser.orgId}`).on(\n        'value',\n        (snapshot) => {\n          var UsersArray = []\n          snapshot.forEach((goals) => {\n            let getUsers = goals.val()\n            let getUserId = goals.key\n            getUsers.orgMainId = getUserId\n            UsersArray.push(getUsers)\n          })\n          UsersArray.filter((val) => {\n            if (val.email === goalReducer.currentUser.email) {\n              dispatch(setCurrentUserOrganizationId(val.orgMainId))\n              // get seletec goal\n              getSelectedGoalsOfUser(\n                `withoutOrganization/users/${val.orgMainId}/myGoals`,\n              )\n            }\n          })\n        },\n      )\n    }\n  }, [])\n\n  const [anchorEl, setAnchorEl] = React.useState(null)\n  const open = Boolean(anchorEl)\n\n  const handleMenu = (event) => {\n    setAnchorEl(event.currentTarget)\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null)\n  }\n  const handleLogout = () => {\n    auth\n      .signOut()\n      .then(() => {\n        dispatch(userlogOut(false))\n        dispatch(setCurrentUser({}))\n        dispatch(setAllGoals([]))\n        dispatch(setAllSelectedGoals([]))\n        dispatch(setCurrentUserOrganizationId(''))\n        history.push('/login')\n      })\n      .catch((err) => {})\n  }\n\n  const [state, setState] = React.useState({\n    left: false,\n  })\n\n  const toggleDrawer = (anchor, open) => (event) => {\n    // console.log(anchor)\n    if (\n      event &&\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return\n    }\n\n    setState({ ...state, [anchor]: open })\n  }\n\n  const list = (anchor) => (\n    <div\n      className={clsx(classes.list, {\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\n      })}\n      role=\"presentation\"\n      onClick={toggleDrawer(anchor, false)}\n      onKeyDown={toggleDrawer(anchor, false)}\n    >\n      {/* <List>\n\n      </List> */}\n      {/* <Divider /> */}\n      <List>\n              <img className=\"ulogo\" src={logo} alt=\"...\" />\n\n        {goalReducer.currentUser.admin ? (\n          <NavLink to={`/organizations`} className=\"sidebar_links\" activeClassName='uDeskActive'>\n            <HomeIcon className='sdIcon' />\n            {!open ? <p>Organizations</p> : null}\n          </NavLink>\n        ) : null}\n        <NavLink className=\"sidebar_links\" to=\"/selec-goals\" activeClassName='uDeskActive'>\n          <HomeIcon className='sdIcon' /> <p> Home </p>\n        </NavLink>\n        <NavLink className=\"sidebar_links\" to=\"/search-goals\" activeClassName='uDeskActive'>\n          <SearchIcon className='sdIcon' />\n          <p> Search Goals </p>\n        </NavLink>\n        <NavLink className=\"sidebar_links\" to=\"/goals-status\" activeClassName='uDeskActive'>\n          <CameraAltIcon className='sdIcon' /> <p> Verify </p>\n        </NavLink>\n        <NavLink className=\"sidebar_links\" to=\"/feed\" activeClassName='uDeskActive'>\n          <AppsIcon className='sdIcon' /> <p>Feed </p>\n        </NavLink>\n\n        <NavLink className=\"sidebar_links\" to=\"/profile\" activeClassName='uDeskActive'>\n          <PersonIcon className='sdIcon' /> <p> Profile </p>\n        </NavLink>\n      </List>\n    </div>\n  )\n  // console.log(balance)\n\n  return (\n    <React.Fragment>\n      <div className={`desktopView_sidebar ${classes.root}`}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <div>\n              {['left'].map((anchor) => (\n                <React.Fragment key={anchor}>\n                  <Button onClick={toggleDrawer(anchor, true)}>\n                    {/* {anchor} */}\n                    <ViewListIcon className=\"bar_icon\" />\n                  </Button>\n                  <SwipeableDrawer\n                    anchor={anchor}\n                    open={state[anchor]}\n                    onClose={toggleDrawer(anchor, false)}\n                    onOpen={toggleDrawer(anchor, true)}\n                  >\n                    {list(anchor)}\n                  </SwipeableDrawer>\n                </React.Fragment>\n              ))}\n            </div>\n\n            <Typography variant=\"h6\" className={classes.title}>\n              TRYVE\n              {/* <img className=\"logo\" src={logo} alt=\"...\" /> */}\n              \n            </Typography>\n\n            {auth && (\n              <div className=\"authMain\">\n                { balance.length?\n                balance[0].balance>0?\n                <div className=\"balance\">\n\n                  <p>Balance : {balance.length ? balance[0].balance : '0'}</p>\n                </div>\n                : null\n               : null }\n                <IconButton\n                  aria-label=\"account of current user\"\n                  aria-controls=\"menu-appbar\"\n                  aria-haspopup=\"true\"\n                  onClick={handleMenu}\n                  color=\"inherit\"\n                >\n                  {userInfo.url ? (\n                    <>\n                      {/* <span>{userInfo.name}</span> */}\n                      <img\n                        className=\"userProfile\"\n                        src={userInfo.url}\n                        alt=\"...\"\n                      />\n                    </>\n                  ) : (\n                    <AccountCircle />\n                  )}\n                  <ExpandMoreIcon />\n                </IconButton>\n                <Menu\n                  id=\"menu-appbar\"\n                  anchorEl={anchorEl}\n                  anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                  }}\n                  keepMounted\n                  transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right',\n                  }}\n                  open={open}\n                  onClose={() => \n                    handleClose()\n                  }\n                  className=\"cus_menu\"\n                >\n                  <MenuItem onClick={() => {\n                      handleClose();\n                      history.push(\"/profile\");\n                    }}>\n                    <AccountCircleIcon /> <p> Profile</p>\n                  </MenuItem>\n                  {/* <MenuItem\n                    onClick={() => {\n                      handleClose();\n                      history.push(\"/profile\");\n                    }}\n                  >\n                    <AccountCircleIcon /> <p> All Goals</p>\n                  </MenuItem> */}\n                  <MenuItem onClick={handleLogout}>\n                    <ExitToAppIcon /> <p> Logout</p>\n                  </MenuItem>\n                </Menu>\n              </div>\n            )}\n          </Toolbar>\n        </AppBar>\n      </div>\n\n      {/* mobile view bottom navigation  */}\n      <div className=\"mobileView_bottom_navigat\">\n        <div className=\"bottm_navigation\">\n          <NavLink\n            className=\"sidebar_links_bt\"\n            activeClassName=\"active_link\"\n            to=\"/selec-goals\"\n          >\n            <HomeIcon /> <p> Home </p>\n          </NavLink>\n          <NavLink\n            className=\"sidebar_links_bt\"\n            activeClassName=\"active_link\"\n            to=\"/search-goals\"\n          >\n            <SearchIcon />\n            <p> search </p>\n          </NavLink>\n\n          <NavLink\n            className=\"sidebar_links_bt\"\n            activeClassName=\"active_link\"\n            to=\"/goals-status\"\n          >\n            <CameraAltIcon /> <p> Verify </p>\n          </NavLink>\n\n          <NavLink\n            className=\"sidebar_links_bt\"\n            activeClassName=\"active_link\"\n            to=\"/feed\"\n          >\n            <AppsIcon /> <p> Feed </p>\n          </NavLink>\n          <NavLink\n            className=\"sidebar_links_bt\"\n            activeClassName=\"active_link\"\n            to=\"/profile\"\n          >\n            <PersonIcon /> <p> Profile </p>\n          </NavLink>\n          {/* <MenuItem className='logout_link' onClick={handleLogout}>\n            <ExitToAppIcon />\n            <p> Logout</p>\n          </MenuItem> */}\n        </div>\n      </div>\n    </React.Fragment>\n  )\n}\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/SearchInput.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/OrganizationUsers/UserList.jsx",["631"],"import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { allOrganizationUsers } from \"../../../../GlobalState/CreateSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport dp from \"../../../../Assets/dp.png\";\n\nexport const getOrgUsers = (id, dispatch) => {\n  const db = firebase.database();\n  const dbRef = db.ref(`organizations/${id}/users`);\n  dbRef.on(\"value\", (snapshot) => {\n    let filterOrgUserssArry = [];\n    snapshot.forEach((data) => {\n      const getData = data.val();\n      const getId = data.key;\n      getData.id = getId;\n      filterOrgUserssArry.push(getData);\n    });\n    dispatch(allOrganizationUsers(filterOrgUserssArry));\n  });\n};\n\nconst UserList = () => {\n  const { id } = useParams();\n  const dispatch = useDispatch();\n   \n\n  // get filter organization goals from database\n\n  useEffect(() => {\n    getOrgUsers(id, dispatch);\n  }, []);\n\n  const userSelector = useSelector((state) => {\n    return state.goalReducer.orgUsers;\n  });\n\n\n  return (\n    <div>\n      <div className=\"table_md\">\n        <table className=\"goals_table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Email</th>\n              <th>Number</th>\n              <th>Created at</th>\n            </tr>\n          </thead>\n          <tbody>\n            {userSelector.map((val) => {\n              // console.log(val)\n              return (\n                <tr key={val.id}>\n                  <td>\n                    <img\n                      className=\"goals_img\"\n                      src={val.url ? val.url : dp}\n                      alt=\"...\"\n                    />\n                  </td>\n                  <td>{val.name}</td>\n                  <td>{val.email}</td>\n                  <td>{val.number}</td>\n                  <td>{val.createdAt}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default UserList;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Categories/CategoryList.jsx",["632"],"import React, { useEffect, useState } from \"react\";\nimport FormDialog from \"../../../../Components/InputPopup\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport { useSelector } from \"react-redux\";\nimport { Button } from \"@material-ui/core\";\n\nconst CategoryList = () => {\n  const database = firebase.database();\n  const ref = database.ref(`withoutOrganization/categories`);\n  const pushRef = ref.push();\n  const [open, setOpen] = React.useState(false);\n  let [dbCategory, setDbCategory] = useState([]);\n  // set org input value\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  let [category, setCategory] = useState(\"\");\n  const handleCategoryInput = (event) => {\n    setCategory(event.target.value);\n  };\n\n  // add organization in firebase database\n  const addCategory = () => {\n    if (category.length > 3) {\n      pushRef\n        .set({ category: category })\n        .then(() => {\n          setCategory(\"\");\n          handleClose();\n        })\n        .catch((err) => {\n          console.log(err);\n          setCategory(\"\");\n          handleClose();\n        });\n    } else {\n      alert(\"please enter value or enter max 3 characters\");\n    }\n  };\n\n  useEffect(() => {\n    ref.on(\"value\", (snapshot) => {\n      let categoryArray = [];\n      snapshot.forEach((data) => {\n        let resData = data.val();\n        let dataKey = data.key;\n        resData.id = dataKey;\n        categoryArray.push(resData);\n      });\n      setDbCategory(categoryArray);\n    });\n    // };\n    // getCategory();\n    // return ()=>{\n    //   getCategory()\n  }, []);\n\n  const selector = useSelector((state) => {\n    return state.goalReducer;\n  });\n\n  const handleDeleteCategory = (event) => {\n    let { category } = event;\n    const categoryId = event.id;\n    let filterUsedCategory = selector.OrgGoals.filter(\n      (val) => val.inputValues.category === category\n    );\n    if (!filterUsedCategory.length) {\n      database\n        .ref(`withoutOrganization/categories/${categoryId}`)\n        .remove()\n        .then(() => {\n          console.log(\"deleted\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else {\n      alert(\"this cateogry is used in goals\");\n    }\n  };\n\n  return (\n    <div className=\"c_list_container\">\n      <div className=\"cList_md\">\n        <div className=\"cList_sd\">\n          <div className=\"categoryList\">\n            <div className=\"category_head\">\n              <div className=\"tb_tabs_headContent\">\n                <p>Category list</p>\n              </div>\n              <div className=\"addCt_btn\">\n                <Button onClick={handleClickOpen} className=\"orngClr \">\n                  Add Category\n                </Button>\n                <FormDialog\n                  handleAddFunction={addCategory}\n                  handleInputvalue={handleCategoryInput}\n                  inputValue={category}\n                  open={open}\n                  // handleClickOpen={handleClickOpen}\n                  handleClose={handleClose}\n                  btnValue=\"Add Category\"\n                  labelValue=\"Category\"\n                />\n              </div>\n            </div>\n            <ul className=\"cList\">\n              {dbCategory &&\n                dbCategory.map((val) => (\n                  <li key={val.id}>\n                    <p> {val.category}</p>\n                    <button\n                      className=\"btn_dlt\"\n                      onClick={() => handleDeleteCategory(val)}\n                    >\n                      <DeleteForeverIcon />\n                    </button>\n                  </li>\n                ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryList;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Categories/CategoryList.jsx",["633"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport FormDialog from \"../../../../Components/InputPopup\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport { useSelector } from \"react-redux\";\nimport { Button } from \"@material-ui/core\";\n// import { allCategories } from \"../../../../GlobalState/CreateSlice\";\n\nconst CategoryList = () => {\n  const { id } = useParams();\n  // const dispatch = useDispatch();\n  const database = firebase.database();\n  const ref = database.ref(`organizations/${id}/categories`);\n  const pushRef = ref.push();\n  const [open, setOpen] = React.useState(false);\n  let [dbCategory, setDbCategory] = useState([]);\n  // set org input value\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  let [category, setCategory] = useState(\"\");\n  const handleCategoryInput = (event) => {\n    setCategory(event.target.value);\n  };\n\n  // add organization in firebase database\n  const addCategory = () => {\n    if (category.length > 3) {\n      pushRef.set({ category: category });\n      setCategory(\"\");\n      handleClose();\n    } else {\n      alert(\"please enter value or enter max 3 characters\");\n    }\n  };\n\n  useEffect(() => {\n    // const getCategory = async () => {\n    ref.on(\"value\", (snapshot) => {\n      let categoryArray = [];\n      snapshot.forEach((data) => {\n        let resData = data.val();\n        let dataKey = data.key;\n        resData.id = dataKey;\n        categoryArray.push(resData);\n      });\n      // dispatch(allCategories(categoryArray))\n      setDbCategory(categoryArray);\n    });\n  }, []);\n\n  const selector = useSelector((state) => {\n    return state.goalReducer;\n  });\n\n  const handleDeleteCategory = (event) => {\n    let { category } = event;\n    const categoryId = event.id;\n    let filterUsedCategory = selector.OrgGoals.filter(\n      (val) => val.inputValues.category === category\n    );\n    if (!filterUsedCategory.length) {\n      database\n        .ref(`organizations/${id}/categories/${categoryId}`)\n        .remove()\n        .then(() => {\n          console.log(\"deleted\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } else {\n      alert(\"this cateogry is used in goals\");\n    }\n  };\n\n  return (\n    <div className=\"c_list_container\">\n      <div className=\"cList_md\">\n        <div className=\"cList_sd\">\n          <div className=\"categoryList\">\n            <div className=\"category_head\">\n              <div className=\"tb_tabs_headContent\">\n                <p>Category list</p>\n              </div>\n              <div className=\"addCt_btn\">\n                <Button onClick={handleClickOpen} className=\"orngClr \">\n                  Add Category\n                </Button>\n                <FormDialog\n                  handleAddFunction={addCategory}\n                  handleInputvalue={handleCategoryInput}\n                  inputValue={category}\n                  open={open}\n                  // handleClickOpen={handleClickOpen}\n                  handleClose={handleClose}\n                  btnValue=\"Add Category\"\n                  labelValue=\"Category\"\n                />\n              </div>\n            </div>\n            <ul className=\"cList\">\n              {dbCategory &&\n                dbCategory.map((val) => (\n                  <li key={val.id}>\n                    <p> {val.category}</p>\n                    <button\n                      className=\"btn_dlt\"\n                      onClick={() => handleDeleteCategory(val)}\n                    >\n                      <DeleteForeverIcon />\n                    </button>\n                  </li>\n                ))}\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryList;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Feed/UsersGoals.jsx",["634","635"],"import React, { useRef, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined'\nimport firebase from '../../../Config/FirebaseConfig'\nimport SendIcon from '@material-ui/icons/Send'\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'\nimport { send } from 'emailjs-com'\nimport AlertDialog from '../../../Components/AlertPopup'\nimport dp from '../../../Assets/dp.png'\n\nconst UsersGoals = () => {\n  const db = firebase.database()\n\n  const selector = useSelector((state) => {\n    return state\n  })\n  const { goalReducer, userReducer } = selector\n  // like post\n  const handleLikePost = (event, likeEvent) => {\n    const checkIsPostLike = userReducer.postLikes.filter(\n      (posts) =>\n        posts.goalId === event.orgMainId &&\n        posts.uid === goalReducer.currentUser.id,\n    )\n    // console.log(event)\n    // if user enrolled in org\n    if (goalReducer.currentUser.orgId !== '') {\n      if (checkIsPostLike.length) {\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/likes/${event.orgMainId}/${likeEvent.likeId}`,\n        ).update({\n          isLike: true,\n        })\n        // likes increament\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\n        ).update({\n          likes: event.likes ? event.likes + 1 : 1,\n        })\n      } else {\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/likes/${event.orgMainId}`,\n        )\n          .push()\n          .set({\n            uid: goalReducer.currentUser.id,\n            isLike: true,\n            goalId: event.orgMainId,\n          })\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\n        ).update({\n          likes: event.likes ? event.likes + 1 : 1,\n        })\n      }\n    }\n    // if user is not enrolled in org\n    else {\n      if (checkIsPostLike.length) {\n        db.ref(\n          `withoutOrganization/likes/${event.orgMainId}/${likeEvent.likeId}`,\n        ).update({\n          isLike: true,\n        })\n        // likes increament\n        db.ref(`withoutOrganization/submitGoals/${event.orgMainId}`).update({\n          likes: event.likes ? event.likes + 1 : 1,\n        })\n      } else {\n        db.ref(`withoutOrganization/likes/${event.orgMainId}`).push().set({\n          uid: goalReducer.currentUser.id,\n          isLike: true,\n          goalId: event.orgMainId,\n        })\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\n        ).update({\n          likes: event.likes ? event.likes + 1 : 1,\n        })\n      }\n    }\n  }\n\n  // unlike post\n  const handleUnlikePost = (event, subEvent) => {\n    // console.log(event)\n    if (goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${goalReducer.currentUser.orgId}/likes/${event.goalId}/${event.likeId}`,\n      ).update({\n        isLike: false,\n      })\n      // decreament like\n      db.ref(\n        `organizations/${goalReducer.currentUser.orgId}/submitGoals/${subEvent.orgMainId}`,\n      ).update({\n        likes: subEvent.likes - 1,\n      })\n    } else {\n      db.ref(\n        `withoutOrganization/likes/${event.goalId}/${event.likeId}`,\n      ).update({\n        isLike: false,\n      })\n      db.ref(`withoutOrganization/submitGoals/${subEvent.orgMainId}`).update({\n        likes: subEvent.likes - 1,\n      })\n    }\n  }\n\n  // post report\n  let [loading, setLoading] = useState(false)\n  let [reportSuccesPopup, setReportSuccesPopup] = useState(false)\n  let [reportGoalId,setReportGoalId] = useState('')\n  const handleReportPost = (event) => {\n    setReportGoalId(event.orgMainId)\n    setLoading(true)\n    const reportedUserName = goalReducer.currentUser.name\n    // console.log(reportedUserName, event)\n    // const filterUserEmailToSendNotification =\n    userReducer.allUsers.filter((user) => {\n      if (user.id === event.userIdMain) {\n        // console.log(user)\n        send(\n          // process.env.REACT_APP_EMAIL_JS_SERVICE_ID,\n          // process.env.REACT_APP_EMAIL_JS_TEMPLATE_ID,\n          'service_q1galup',\n          'template_aq5fbiv',\n          {\n            to: `${user.email}`,\n            to_name: `${event.userName}`,\n            from_email_name: 'TRYVE',\n            subject: '',\n            message: `${reportedUserName} reported your goal please retake good picture. Thanks!`,\n            from: 'ansariwaqas310@gmail.com',\n            reply_to: 'tryve@gmail.com',\n          },\n          process.env.REACT_APP_EMAIL_JS_USER_ID,\n        )\n          .then(() => {\n            console.log('success...')\n          })\n          .catch((err) => {\n            console.log('admin Email sending FAILED...', err)\n          })\n      }\n    })\n    if (goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${goalReducer.currentUser.orgId}/submitGoals/${event.orgMainId}`,\n      )\n        .update({ isReport: true, acceptReport: false })\n        .then(() => {\n          setLoading(false)\n          setReportSuccesPopup(true)\n        })\n    } else {\n      db.ref(`withoutOrganization/submitGoals/${event.orgMainId}`)\n        .update({\n          isReport: true,\n          acceptReport: false,\n        })\n        .then(() => {\n          setLoading(false)\n          setReportSuccesPopup(true)\n        })\n    }\n  }\n\n  // show comment section\n  let [showComment, setShowComment] = React.useState(false)\n  let [comment, setComment] = React.useState('')\n  let [postId, setPostId] = React.useState('')\n  let [commentLoad, setCommentLoad] = React.useState(false)\n  const bottomRef = useRef(null)\n  // show comment section function\n  const handleCommentShow = (event) => {\n    setShowComment(!showComment)\n    if (event.orgMainId === postId) {\n      setPostId('')\n    } else {\n      setPostId(event.orgMainId)\n    }\n  }\n  // set comment input value\n  const handleComment = (event) => {\n    setComment(event.target.value)\n  }\n  \n\n  // set comment in database\n  const handleAddComment = (event) => {\n    setCommentLoad(true)\n    console.log(event, goalReducer.currentUser)\n    if (comment.length > 0) {\n      if (goalReducer.currentUser.orgId !== '') {\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/comments/${event.orgMainId}`,\n        )\n          .push()\n          .set({\n            uid: goalReducer.currentUser.id,\n            userName: goalReducer.currentUser.name,\n            userImg: goalReducer.currentUser.url\n              ? goalReducer.currentUser.url\n              : '',\n            comment: comment,\n            goalId: event.orgMainId,\n          })\n        setComment('')\n        setCommentLoad(false)\n      } else {\n        db.ref(`withoutOrganization/comments/${event.orgMainId}`)\n          .push()\n          .set({\n            uid: goalReducer.currentUser.id,\n            userName: goalReducer.currentUser.name,\n            userImg: goalReducer.currentUser.url\n              ? goalReducer.currentUser.url\n              : '',\n            comment: comment,\n            goalId: event.orgMainId,\n          })\n        setComment('')\n        setCommentLoad(false)\n      }\n    }\n    // else {\n    //   alert('please enter comment')\n    // }\n  }\n\n  const scrollToBottom = () => {\n    if (postId || commentLoad) {\n      // bottomRef.current.scrollIntoView({ behavior: 'smooth' })\n    }\n  }\n\n\n  React.useEffect(scrollToBottom, [postId, commentLoad,handleAddComment])\n  \n  // delete comment\n  const handleDeleteComment = (event) => {\n    if (goalReducer.currentUser.orgId !== '') {\n      db.ref(\n        `organizations/${goalReducer.currentUser.orgId}/comments/${event.goalId}/${event.commentId}`,\n      ).remove()\n    }\n  }\n\n  const handleClosePopup = () => {\n    setReportSuccesPopup(false)\n  }\n\n  return (\n    <div className=\"feedGoalsContainer\">\n      {reportSuccesPopup ? (\n        <AlertDialog\n          handleClose={handleClosePopup}\n          open={reportSuccesPopup}\n          value=\"Reported Successfull\"\n          btnValue=\"OK\"\n        />\n      ) : null}\n      <div className=\"feedGoalsContent\">\n        <div className=\"feedGoals \">\n          {userReducer.feedGoals.length ? (\n            userReducer.feedGoals.map((val, i) => {\n              // console.log(val)\n              return (\n                <div\n                  className={\n                    i % 2 !== 0\n                      ? 'horizontal feedGoalGrid'\n                      : 'vertical feedGoalGrid'\n                  }\n                  key={i}\n                >\n                  <div className=\"imgLikeBtn\">\n                    <img\n                      className=\"feedGoalImg\"\n                      src={val.uploadImgUlr}\n                      alt=\"...\"\n                    />\n                    {userReducer.postLikes.map((like, j) => {\n                      return like.goalId === val.orgMainId &&\n                        like.uid === goalReducer.currentUser.id ? (\n                        <button\n                          className=\"likeBtn likeZ\"\n                          onClick={\n                            !like.isLike\n                              ? () => handleLikePost(val, like)\n                              : () => handleUnlikePost(like, val)\n                          }\n                          key={j}\n                        >\n                          <ThumbUpAltOutlinedIcon\n                            className={like.isLike ? 'liked' : 'unlike'}\n                          />\n                        </button>\n                      ) : null\n                    })}\n                    <button\n                      className=\"likeBtn\"\n                      onClick={() => handleLikePost(val, false)}\n                    >\n                      <ThumbUpAltOutlinedIcon className={'unlike'} />\n                    </button>\n                  </div>\n                  <div className=\"cmntAndReportBtn\">\n                    <div className=\"noOfLikes\">\n                      <p>{val.likes ? val.likes + ' Likes' : '0 Likes'}</p>\n                    </div>\n                    <button\n                      onClick={() => handleCommentShow(val)}\n                      className=\"cmntBtn\"\n                    >\n                      Comment\n                    </button>\n                    <button\n                      className={val.userIdMain===goalReducer.currentUser.id?'disabled reportBtn' :\"reportBtn\"}\n                      onClick={() => handleReportPost(val)}\n                      disabled={loading || val.userIdMain===goalReducer.currentUser.id }\n                    >\n                      {loading && reportGoalId===val.orgMainId ? 'loading...' : 'Report'}\n                    </button>\n                  </div>\n                  {val.orgMainId === postId ? (\n                    <div className=\"commentSection\">\n                      <ul className=\"commmentList\">\n                        {userReducer.comments.length ? (\n                          userReducer.comments.map((commentval, k) => {\n                            return commentval.goalId === val.orgMainId ? (\n                              <li key={k}>\n                                <img\n                                  src={\n                                    commentval.userImg ? commentval.userImg : dp\n                                  }\n                                  alt=\"...\"\n                                />\n                                <div className=\"comments\">\n                                  <div className=\"cmntLines\">\n                                    <h6>{commentval.userName}</h6>\n                                    <p>{commentval.comment}</p>\n                                  </div>\n                                  {commentval.uid ===\n                                  goalReducer.currentUser.id ? (\n                                    <button\n                                      className=\"dltBtn\"\n                                      onClick={() =>\n                                        handleDeleteComment(commentval)\n                                      }\n                                      >\n                                      <DeleteForeverIcon className=\"dltIcon\" />\n                                    </button>\n                                  ) : null}\n                                </div>\n                                  <p className=\"strtBtm\" ref={bottomRef}></p>\n                              </li>\n                            ) : null\n                          })\n                        ) : (\n                          <p>There is no comment!</p>\n                        )}\n                      </ul>\n                      <div className=\"commentInput\">\n                        <input\n                          type=\"text\"\n                          name=\"comment\"\n                          id=\"comment\"\n                          placeholder=\"Comment\"\n                          onChange={handleComment}\n                          value={comment}\n                        />\n                        <button onClick={() => handleAddComment(val)}>\n                          <SendIcon className=\"sentIcon\" />\n                        </button>\n                      </div>\n                    </div>\n                  ) : null}\n                </div>\n              )\n            })\n          ) : (\n            <p>list is empty</p>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default UsersGoals\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/GoalsStatus/GoalCard.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/ApprovedForm.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Components/Button/Button.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/AllGoalsOfOrganization/GoalsTabs.jsx",["636"],"import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\nimport Box from '@material-ui/core/Box'\nimport { useSelector } from 'react-redux'\nimport firebase from '../../../Config/FirebaseConfig'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport { useHistory } from 'react-router'\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`scrollable-auto-tabpanel-${index}`}\n      aria-labelledby={`scrollable-auto-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          {/* <Typography>{children}</Typography> */}\n          {children}\n        </Box>\n      )}\n    </div>\n  )\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n}\n\n\n\nexport default function GoalsTabs() {\n  const history = useHistory()\n  const db = firebase.database()\n\n\n  const selector = useSelector((state) => {\n    return state\n  })\n  const { userReducer } = selector\n\n  // go to goal detail page\n  const handleDetailPage = (event) => {\n    // console.log(event)\n    history.push(`/goal-detail/${event.id}`)\n  }\n  const handleDetailPageMyGoal = (event) => {\n    // console.log(event)\n\n    history.push(`/mygoal-detail/${event.id}`)\n  }\n\n  // get cateogires\n  let [category, setCategory] = useState([])\n  const getCategories = (parameter) => {\n    db.ref(parameter).on('value', (snapshot) => {\n      let categoryArray = []\n      snapshot.forEach((data) => {\n        const resData = data.val()\n        const resKey = data.key\n        resData.CategoryId = resKey\n        categoryArray.push(resData)\n      })\n      setCategory(categoryArray)\n    })\n  }\n  useEffect(() => {\n    if (selector.goalReducer.currentUser.orgId !== '') {\n      getCategories(\n        `organizations/${selector.goalReducer.currentUser.orgId}/categories`,\n      )\n    } else {\n      getCategories(`withoutOrganization/categories`)\n    }\n    return () => {\n      setCategory([])\n    }\n  }, [])\n\n\n  // console.log(userReducer)\n  return (\n    <div className=\"allGoals_Cards\">\n      <div className=\"allGoals_cLinks myListHead\">\n        <h3 className=\"category_head sCategoryHead\">My List</h3>\n        <Link to=\"/selec-goals\" className=\"b_link\">\n          See All\n        </Link>\n      </div>\n      <div className=\"cUserGoals sGoal_md\">\n        {userReducer.selectedGoals.slice(0, 3).map((val, k) => {\n          return (\n            <div className=\"cUserG\" key={k}>\n              <div\n                className=\"goalsImg\"\n                onClick={() => handleDetailPageMyGoal(val)}\n              >\n                <img src={val.url} alt=\"...\" />\n              </div>\n            </div>\n          )\n        })}\n      </div>\n      {category.map((val) => (\n        <div key={val.CategoryId}>\n          <div className=\"allGoals_cLinks\">\n            <h3 className=\"category_head sCategoryHead\">{val.category}</h3>\n            <Link to=\"/search-goals\"  className=\"b_link\">\n              See All\n            </Link>\n          </div>\n          <div className=\"sGoal_md\">\n            {userReducer.allGoalsOfOrg.map((goal, i) => {\n              return (\n                <div\n                  className=\"verifyGoals\"\n                  style={\n                    goal.inputValues.category !== val.category &&\n                    userReducer.allGoalsOfOrg.length - 1 !== i\n                      ? { display: 'none' }\n                      : null\n                  }\n                  key={goal.id}\n                >\n                  {goal.inputValues.category === val.category ? (\n                    <>\n                      <div\n                        className=\"goalsImg\"\n                        onClick={() => handleDetailPage(goal)}\n                      >\n                        <img src={goal.url} alt=\"...\" />\n                      </div>\n                    </>\n                  ) : null}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      ))}\n    </div>\n  )\n}\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/Dashboard/GoalsTable.jsx",["637"],"import React, { useEffect } from \"react\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useHistory, useParams } from \"react-router-dom\";\n// import  from \"firebase/database\";\nimport { allFilterOrgGoals } from \"../../../../GlobalState/CreateSlice\";\nimport { useDispatch } from \"react-redux\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\n\nconst GoalsTable = ({selector}) => {\n  const history = useHistory();\n  const { id } = useParams();\n  const dispatch = useDispatch();\n  const db = firebase.database();\n  const dbRef = db.ref(`organizations/${id}/goals`);\n \n\n  // get filter organization goals from database \n  const getFilterOrgGoals = () => {\n    dbRef.on(\"value\", (snapshot) => {\n      let filterOrgGoalsArry = [];\n      snapshot.forEach((data) => {\n        const getData = data.val();\n        const getId = data.key;\n        getData.id = getId;\n        filterOrgGoalsArry.push(getData);\n      });\n      dispatch(allFilterOrgGoals(filterOrgGoalsArry));\n    });\n  };\n\n  useEffect(() => {\n    getFilterOrgGoals();\n  }, []);\n\n  // goals delete function\n  const handleDeleteGoals = (event) => {\n    const isSelectedFilter = selector.filter((val)=>val.id===event)\n    // console.log(selector,event,isSelectedFilter)\n    if(!isSelectedFilter[0].used){\n      db.ref(`organizations/${id}/goals/${event}`).remove();\n    }else {\n      alert('this goal can not be delete becuase user select')\n    }\n  };\n\n  const goToDetailPage = (event) => {\n    history.push(`goals-detail/${event}`);\n  };\n\n  const editSelectedGoal = (event) => {\n    history.push(`edit-goal/${event}`);\n  };\n  // console.log(allOrgGoals)\n\n  if (!selector.length) {\n    return <div>no goals</div>;\n  }\n\n  return (\n    <div className=\"table_container\">\n      <div className=\"table_md\">\n        <table className=\"goals_table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>Time Limit</th>\n              <th>category</th>\n              <th>Reward Range</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {selector.map((val) => {\n              const { id, url, inputValues } = val;\n              return (\n                <tr key={id}>\n                  <td>\n                    <img className=\"goals_img\" src={url} alt=\"...\" />\n                  </td>\n                  <td>{inputValues.eventName}</td>\n                  <td>{inputValues.numberOfDays} days</td>\n                  <td>{inputValues.category}</td>\n                  <td>{`${inputValues.rewardMin} - ${inputValues.rewardMax}`}</td>\n                  <td className=\"actions_btns\">\n                    <button onClick={() => editSelectedGoal(id)}>\n                      <EditIcon className=\"actions_icons\" />{\" \"}\n                    </button>{\" \"}\n                    <button onClick={() => handleDeleteGoals(id)}>\n                      <DeleteForeverIcon className=\"actions_icons\" />\n                    </button>\n                    <button\n                      className=\"view_icons\"\n                      onClick={() => goToDetailPage(id)}\n                    >\n                      <PageviewIcon />\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default GoalsTable;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/OrganizationLinks/MainOrganization.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOutOrganizations/Dashboard/GoalsTable.jsx",["638","639","640"],"import React, { useEffect } from \"react\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useHistory } from \"react-router-dom\";\n// import  from \"firebase/database\";\nimport { allWithoutOrggGoals } from \"../../../../GlobalState/CreateSlice\";\nimport { useDispatch } from \"react-redux\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteForeverIcon from \"@material-ui/icons/DeleteForever\";\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\n\nconst GoalsTable = ({ selector }) => {\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const db = firebase.database();\n  const dbRef = db.ref(`withoutOrganization/goals`);\n\n  // get filter organization goals from database\n  const getFilterOrgGoals = () => {\n    dbRef.on(\"value\", (snapshot) => {\n      let filterOrgGoalsArry = [];\n      snapshot.forEach((data) => {\n        const getData = data.val();\n        const getId = data.key;\n        getData.id = getId;\n        filterOrgGoalsArry.push(getData);\n      });\n      dispatch(allWithoutOrggGoals(filterOrgGoalsArry));\n    });\n  };\n\n  useEffect(() => {\n    getFilterOrgGoals();\n  }, []);\n\n  // goals delete function\n  const handleDeleteGoals = (event) => {\n    const isSelectedFilter = selector.filter((val) => val.id === event);\n\n    if (!isSelectedFilter[0].used) {\n      db.ref(`withoutOrganization/goals/${event}`).remove();\n    } else {\n      alert(\"this goal can not be delete becuase user select\");\n    }\n    // console.log(selector,event)\n  };\n\n  const goToDetailPage = (event) => {\n    history.push(`goals-detail/${event}`);\n  };\n\n  const editSelectedGoal = (event) => {\n    history.push(`edit-goal/${event}`);\n  };\n  // console.log(allOrgGoals)\n\n  if (!selector.length) {\n    return <div>no goals</div>;\n  }\n\n  return (\n    <div className=\"table_container\">\n      <div className=\"table_md\">\n        <table className=\"goals_table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              {/* <th>People Joined</th> */}\n              <th>Time Limit</th>\n              {/* <th>Signed Up</th> */}\n              <th>category</th>\n              <th>Reward Range</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {selector.map((val) => {\n              const { id, url, inputValues, peopleJoined, numberOfDays } = val;\n              return (\n                <tr key={id}>\n                  <td>\n                    <img className=\"goals_img\" src={url} alt=\"...\" />\n                  </td>\n                  <td>{inputValues.eventName}</td>\n                  {/* <td>{peopleJoined}</td> */}\n                  <td>{inputValues.numberOfDays} days</td>\n                  {/* <td>2</td> */}\n                  {/* <td>5</td> */}\n                  <td>{inputValues.category}</td>\n                  <td>{`${inputValues.rewardMin} - ${inputValues.rewardMax}`}</td>\n                  <td className=\"actions_btns\">\n                    <button onClick={() => editSelectedGoal(id)}>\n                      <EditIcon className=\"actions_icons\" />{\" \"}\n                    </button>{\" \"}\n                    <button onClick={() => handleDeleteGoals(id)}>\n                      <DeleteForeverIcon className=\"actions_icons\" />\n                    </button>\n                    <button\n                      className=\"view_icons\"\n                      onClick={() => goToDetailPage(id)}\n                    >\n                      <PageviewIcon />\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default GoalsTable;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/GoalsDetailPage/GoalsDetail.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/DashboardScreens/WithOrganizations/SubmitGoals/SubmitGoalsTable.jsx",["641","642","643","644"],"import React, { useState } from \"react\";\nimport firebase from \"../../../../Config/FirebaseConfig\";\nimport { useParams } from \"react-router-dom\";\nimport ApprovedForm from \"./ApprovedForm\";\nimport { useSelector } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { send } from \"emailjs-com\";\n\nconst SubmitGoalsTable = ({\n  selector,\n  btn,\n  undoFunc,\n  declineBtn,\n  approvedUndo,\n  declineForReported,\n  undoForReported,\n  undoFake,\n}) => {\n  // const history = useHistory();\n  const { id } = useParams();\n  const db = firebase.database();\n\n  // approved form working\n  let [open, setOpen] = useState(false);\n  let [goalId, setGoalId] = useState(\"\");\n  let [percantage, setPercentage] = useState(\"\");\n  let [reward, setReward] = useState(\"\");\n  let [rewardRange, setRewardRange] = useState(\"\");\n  let [organizationUserId, setOrganizationUserId] = useState(\"\");\n  let [loading] = useState(false);\n  let [userBalance, setUserBalance] = useState(\"\");\n  let [userMyGoalId, setUserMyGoalId] = useState(\"\");\n  let [userInvest,setUserInvest] = useState()\n\n  // working for approved form\n  const openApprovedForm = (event) => {\n    setOpen(true);\n    setGoalId(event.submitGoalId);\n    setOrganizationUserId(event.orgUserId);\n    setUserMyGoalId(event.SubmitGoal.myGoalId);\n    setRewardRange(\n      `${event.SubmitGoal.inputValues.rewardMin} - ${event.SubmitGoal.inputValues.rewardMax}`\n    );\n    setUserInvest(event.SubmitGoal.userInvestment)\n    // console.log(event)\n    // get organization user info to get prev balance\n    db.ref(`organizations/${id}/users/${event.orgUserId}`).on(\n      \"value\",\n      (snapshot) => {\n        let userData = snapshot.val();\n        let userBalancedb = userData.balance;\n        setUserBalance(userBalancedb);\n      }\n    );\n  };\n\n  const handlePercentage = (event) => {\n    setPercentage(event.target.value);\n  };\n\n  const handleReward = (event) => {\n    setReward(event.target.value);\n  };\n  // form close function\n  const handleClose = () => {\n    setOpen(false);\n  };\n  // goals approved function\n  const handleApprovedGoals = () => {\n    let approveData = {\n      approved: true,\n      pending: false,\n      percantage: percantage,\n      reward: reward,\n      submit: true,\n      isReport: false,\n    };\n    let pendingData = {\n      approved: true,\n      percantage: percantage,\n      pending: true,\n      reward: reward,\n      submit: true,\n      isReport: false,\n    };\n    if (percantage === \"100\") {\n      // add  balance in user acount\n      db.ref(`organizations/${id}/users/${organizationUserId}`).update({\n        balance: Number(userBalance) + Number(reward)+userInvest ,\n      });\n      // update goal status in users goal ref\n      db.ref(\n        `organizations/${id}/users/${organizationUserId}/myGoals/${userMyGoalId}`\n      ).update(approveData);\n      // update goal data in submit goal ref \n      db.ref(`organizations/${id}/submitGoals/${goalId}`).update(approveData);\n      setPercentage(\"\");\n      setReward(\"\");\n      handleClose();\n    } else {\n      // update goal data in submit goal ref \n      db.ref(`organizations/${id}/submitGoals/${goalId}`).update(pendingData);\n      // add  balance in user acount\n      db.ref(\n        `organizations/${id}/users/${organizationUserId}/myGoals/${userMyGoalId}`\n      ).update(pendingData);\n\n      handleClose();\n      setPercentage(\"\");\n      setReward(\"\");\n    }\n  };\n\n  const handleDeclineGoals = (event) => {\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\n      decline: true,\n    });\n    db.ref(\n      `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n    ).update({\n      decline: true,\n    });\n  };\n\n  // goals undo decline function \n  const handleUndoDeclineGoals = (event) => {\n  \n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\n      decline: false,\n    });\n    db.ref(\n      `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n    ).update({\n      decline: false,\n    });\n  };\n\n  // get user total balance\n  const balanceSelector = useSelector((state) => {\n    return state.goalReducer.orgUsers;\n  });\n  // get all users of organization \n  const allUsersSelector = useSelector((state) => {\n    return state;\n  });\n\n  // approved undo function\n  const handleApprovedUndo = (event) => {\n    const getPrevReward = event.reward;\n    const updateData = {\n      approved: false,\n      pending: false,\n      percantage: \"\",\n      reward: \"\",\n    };\n    balanceSelector.filter((val) => {\n      if (val.id === event.orgUserId) {\n        let userBlnce = val.balance;\n        db.ref(`organizations/${id}/users/${event.orgUserId}`).update({\n          balance: userBlnce - (Number(getPrevReward)+ event.SubmitGoal.userInvestment ),\n        });\n        db.ref(\n          `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n        ).update(updateData);\n        db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update(\n          updateData\n        );\n      }\n    });\n  };\n\n  // undo reported goal\n  const handleUndoReportedGoals = (event) => {\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\n      isReport: false,\n    });\n\n    // console.log(event)\n  };\n\n  // accept reporting request if any user is  reported goal\n  const handleDeclineReportGoals = (event) => {\n    const getPrevReward = event.reward;\n    const updateData = {\n      approved: false,\n      percantage: \"\",\n      pending: false,\n      reward: \"\",\n      isReport: true,\n      acceptReport: true,\n      submit: false,\n    };\n    balanceSelector.filter((val) => {\n      // console.log(val,event)\n      if (val.id === event.orgUserId) {\n        let userBlnce = val.balance;\n        //  balance minus from total balance\n        db.ref(`organizations/${id}/users/${event.orgUserId}`).update({\n          balance:\n            userBlnce - (Number(getPrevReward) ? Number(getPrevReward) : 0),\n        });\n        // back to initial state\n        db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`)\n          .update(updateData)\n          .then(() => {\n            allUsersSelector.userReducer.allUsers.filter((user) => {\n              if (user.id === event.userIdMain) {\n                // console.log(user)\n                send(\n                  // process.env.REACT_APP_EMAIL_JS_SERVICE_ID,\n                  // process.env.REACT_APP_EMAIL_JS_TEMPLATE_ID,\n                  \"service_q1galup\",\n                  \"template_aq5fbiv\",\n                  {\n                    to: user.email,\n                    to_name: `${event.userName}`,\n                    from_email_name: \"TRYVE\",\n                    subject: \"\",\n                    message: `TRYVE reported your goal please retake good picture. Thanks!`,\n                    from: \"tryve@gmail.com\",\n                    reply_to: \"tryve@gmail.com\",\n                  },\n                  process.env.REACT_APP_EMAIL_JS_USER_ID\n                )\n                  .then(() => {\n                    console.log(\"success...\");\n                  })\n                  .catch((err) => {\n                    console.log(\"admin Email sending FAILED...\", err);\n                  });\n              }\n            });\n          });\n\n        db.ref(\n          `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n        ).update(updateData);\n        // remove all likes of goal\n        db.ref(`organizations/${id}/likes/${event.submitGoalId}`).remove();\n        db.ref(`organizations/${id}/comments/${event.submitGoalId}`).remove();\n      }\n    });\n  };\n\n  // undo fake goals\n  const handleUndoFakeGoals = (event) => {\n    db.ref(`organizations/${id}/submitGoals/${event.submitGoalId}`).update({\n      acceptReport: false,\n    });\n    db.ref(\n      `organizations/${id}/users/${event.orgUserId}/myGoals/${event.SubmitGoal.myGoalId}`\n    ).update({\n      acceptReport: false,\n    });\n  };\n\n  // submit goal image function\n  let [imgUrl, setImgUrl] = useState(\"\");\n  let [showImg, setShowImg] = useState(false);\n  const handleSeeImage = (event) => {\n    setImgUrl(event);\n    setShowImg(true);\n  };\n  const handleCloseImg = () => {\n    setShowImg(false);\n    setImgUrl(\"\");\n  };\n\n  // automatically approved working\n\n  useEffect(() => {\n    let approvedinterVal = setInterval(() => {\n      if (selector.length) {\n        // let filterDataForApproved =\n        selector.filter((val) => {\n          if (\n            !val.isReport &&\n            !val.decline &&\n            !val.acceptReport &&\n            !val.pending &&\n            val.submit &&\n            !val.approved\n          ) {\n            const inputVal = val.SubmitGoal.inputValues;\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\n            let endDate = new Date(getStartDate);\n            let currentDate = new Date();\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\n            let randomNumGenerate = Math.floor(\n              Math.random() *\n                (Number(inputVal.rewardMax) -\n                  Number(inputVal.rewardMin) +\n                  Number(inputVal.rewardMin))\n            );\n            if (currentDate.getTime() >= endDate.getTime()) {\n              const filterGoalUser = balanceSelector.filter(\n                (user) => user.id === val.orgUserId\n              );\n              const approvedObj = {\n                approved: true,\n                pending: false,\n                percantage: \"100\",\n                reward: randomNumGenerate,\n                submit: true,\n                isReport: false,\n              };\n              db.ref(`organizations/${id}/users/${val.orgUserId}`).update({\n                balance: filterGoalUser[0].balance + randomNumGenerate +val.SubmitGoal.userInvestment ,\n              });\n              db.ref(\n                `organizations/${id}/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\n              ).update(approvedObj);\n              db.ref(`organizations/${id}/submitGoals/${val.submitGoalId}`)\n                .update(approvedObj)\n                .then(() => {\n                  console.log(\"auto approved\");\n                });\n              console.log(\"end\", val);\n            }\n          }\n          // if goals is reported and not approved not pending only submit and someone reported then is would be decline autt\n          else if (\n            val.isReport &&\n            !val.decline &&\n            !val.acceptReport &&\n            !val.pending &&\n            val.submit &&\n            !val.approved\n          ) {\n            // console.log(val)\n\n            const inputVal = val.SubmitGoal.inputValues;\n            // let getSubmitDate = new Date(val.submitDate);\n            let getStartDate = new Date(val.SubmitGoal.GoalStartDate);\n            let endDate = new Date(getStartDate);\n            let currentDate = new Date();\n            endDate.setDate(endDate.getDate() + Number(inputVal.numberOfDays));\n            // console.log(currentDate.getTime() , endDate.getTime())\n            if (currentDate.getTime() >= endDate.getTime()) {\n              // console.log('is report', val)\n              db.ref(\n                `organizations/${id}/submitGoals/${val.submitGoalId}`\n              ).update({\n                decline: true,\n                submit: false,\n                isReport: false,\n              });\n              db.ref(\n                `organizations/${id}/users/${val.orgUserId}/myGoals/${val.SubmitGoal.myGoalId}`\n              ).update({\n                decline: true,\n                submit: false,\n                isReport: false,\n              });\n            }\n          }\n        });\n      }\n    }, 10000);\n    return () => {\n      clearInterval(approvedinterVal);\n    };\n  });\n\n  if (!selector.length) {\n    return <div>no goals</div>;\n  }\n  // console.log(selector);\n\n  return (\n    <div className=\"table_container\">\n      {/* approve form popup  */}\n      <ApprovedForm\n        open={open}\n        handleClickOpen={openApprovedForm}\n        handleSelect={handlePercentage}\n        handleInputvalue={handleReward}\n        inputValue={reward}\n        btnValue=\"Approved\"\n        labelValue=\"Reward\"\n        range={rewardRange}\n        handleAddFunction={handleApprovedGoals}\n        handleClose={handleClose}\n        loading={loading}\n      />\n      {/* image show popup  */}\n      <ApprovedForm\n        handleClickOpen={handleSeeImage}\n        imgUrl={imgUrl}\n        open={showImg}\n        btnValue=\"Close\"\n        handleClose={handleCloseImg}\n      />\n      <div className=\"table_md\">\n        <table className=\"goals_table\">\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th>Name</th>\n              <th>People Joined</th>\n              <th>Time Limit</th>\n              <th>Status</th>\n              <th>category</th>\n              <th>Reward Range</th>\n\n              {!btn ? <th>Actions</th> : null}\n            </tr>\n          </thead>\n          <tbody>\n            {selector.map((val) => {\n              let goalStartDate = new Date(val.SubmitGoal.GoalStartDate);\n              const newDateForEndDate = new Date(val.submitDate);\n              const goalStartTime = goalStartDate.getTime();\n              const getEndTime = newDateForEndDate.getTime();\n              const oneDayTime = 1000 * 3600 * 24;\n              const takeNumberOfDays =\n                (getEndTime - goalStartTime) / oneDayTime;\n              return (\n                <tr key={val.submitGoalId}>\n                  <td>\n                    <img\n                      className=\"goals_img\"\n                      src={val.uploadImgUlr}\n                      alt=\"...\"\n                      onClick={() => handleSeeImage(val.uploadImgUlr)}\n                    />\n                  </td>\n                  <td>{val.SubmitGoal.inputValues.eventName}</td>\n                  <td>{val.userName}</td>\n                  <td>{val.SubmitGoal.inputValues.numberOfDays} days</td>\n                  <td>\n                    {takeNumberOfDays > val.SubmitGoal.inputValues.numberOfDays\n                      ? \"late\"\n                      : \"submit on time\"}\n                  </td>\n                  <td>{val.SubmitGoal.inputValues.category}</td>\n                  <td>{`${val.SubmitGoal.inputValues.rewardMin} - ${val.SubmitGoal.inputValues.rewardMax}`}</td>\n                  <td className=\"actions_btns\">\n                    {!btn ? (\n                      <button onClick={() => openApprovedForm(val)}>\n                        approved\n                      </button>\n                    ) : null}\n                    {!declineBtn ? (\n                      !undoFunc ? (\n                        <button\n                          className=\"view_icons\"\n                          onClick={() => handleDeclineGoals(val)}\n                        >\n                          decline\n                        </button>\n                      ) : (\n                        <button\n                          className=\"view_icons\"\n                          onClick={\n                            !approvedUndo\n                              ? () => handleUndoDeclineGoals(val)\n                              : () => handleApprovedUndo(val)\n                          }\n                        >\n                          Undo\n                        </button>\n                      )\n                    ) : null}\n                    {/* button for decline if goal is reported  */}\n                    {declineForReported ? (\n                      <button\n                        className=\"view_icons\"\n                        onClick={() => handleDeclineReportGoals(val)}\n                      >\n                        Accept Report\n                      </button>\n                    ) : null}\n                    {undoForReported ? (\n                      <button\n                        className=\"view_icons\"\n                        onClick={() => handleUndoReportedGoals(val)}\n                      >\n                        undo reported\n                      </button>\n                    ) : null}\n                    {undoFake ? (\n                      <button\n                        className=\"view_icons\"\n                        onClick={() => handleUndoFakeGoals(val)}\n                      >\n                        undo fake\n                      </button>\n                    ) : null}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default SubmitGoalsTable;\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/LineChart.jsx",["645","646"],"import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport Slider from 'react-slick'\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos'\n\nconst data = {\n  labels: ['1D', '1W', '1M', '3M', '1Y'],\n  datasets: [\n    {\n      label: '# of Votes',\n      data: [4, 19, 3, 5, 2],\n      fill: false,\n      backgroundColor: 'orange',\n      borderColor: 'orange',\n    },\n  ],\n}\n\nconst options = {\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  scales: {\n    x: {\n      grid: {\n        display: false,\n      },\n    },\n    y: {\n      grid: {\n        display: false,\n        drawBorder: false,\n        lineWidth: 0.5,\n      },\n      ticks: {\n        display: false\n    }\n    },\n  },\n}\n\nfunction SampleNextArrow(props) {\n  const { className, style, onClick } = props\n  return (\n    <div\n      className={className}\n      // style={{ ...style, display: \"block\", background: \"red\" }}\n      onClick={onClick}\n    >\n      <ArrowBackIosIcon className='slideArrow nextIc'/>\n    </div>\n  )\n}\n\nfunction SamplePrevArrow(props) {\n  const { className, style, onClick } = props\n  return (\n    <div className={className} onClick={onClick}>\n      <ArrowBackIosIcon className='slideArrow' />\n    </div>\n  )\n}\n\nconst LineChart = () => {\n  const settings = {\n    dots: false,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 1,\n    slidesToScroll: 1,\n    nextArrow: <SampleNextArrow />,\n    prevArrow: <SamplePrevArrow />,\n    // arrows:false\n  }\n  return (\n    <>\n      <Slider {...settings}>\n          <Line className='lineChartMain' data={data} options={options} />\n          <Line className='lineChartMain' data={data} options={options} />\n          <Line className='lineChartMain' data={data} options={options} />\n      </Slider>\n    </>\n  )\n}\n\nexport default LineChart\n","/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/DonutChart.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/MyGoal/MyGoalsList.jsx",[],"/Users/sidorelakollcaku/Desktop/PROJECT1/src/Pages/UserSide/Profile/UserDetailCard.jsx",["647"],"import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport TextsmsOutlinedIcon from \"@material-ui/icons/TextsmsOutlined\";\nimport firebase from \"../../../Config/FirebaseConfig\";\nimport AddAPhotoOutlinedIcon from \"@material-ui/icons/AddAPhotoOutlined\";\nimport dp from \"../../../Assets/dp.png\";\nimport { userlogOut, setCurrentUser } from \"../../../GlobalState/CreateSlice\";\nimport {\n  setAllSelectedGoals,\n  setCurrentUserOrganizationId,\n  setAllGoals,\n} from \"../../../GlobalState/UserSideSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AlertDialog from \"../../../Components/AlertPopup\";\n\nconst UserDetailCard = ({ userDetail }) => {\n  const selector = useSelector((state) => {\n    return state;\n  });\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const auth = firebase.auth();\n  const db = firebase.database();\n  const [loading, setLoading] = useState(false);\n  const [imgUrl, setImgurl] = useState(\"\");\n  const [imgName, setImgName] = useState(\"\");\n  const [local, setLocal] = useState(\"\");\n\n  //  upload img function\n  const handleGoalImg = (event) => {\n    const url = URL.createObjectURL(event.target.files[0]);\n    const goalImgName = event.target.files[0].name;\n    setImgurl(url);\n    setImgName(goalImgName);\n    setLocal(event.target.files[0]);\n  };\n  const handleCancel = () => {\n    setImgurl(\"\");\n    setImgName(\"\");\n    setLocal(\"\");\n  };\n  // firebase storage ref\n  const storage = firebase.storage();\n  const userDb = firebase.database();\n  let createStorageRef = () => storage.ref(`dpImages/${imgName}`).put(local);\n  let downLoad = () => storage.ref(`dpImages/${imgName}`).getDownloadURL();\n  const handleUploadProfileImg = () => {\n    setLoading(true);\n    // set image in storage\n    createStorageRef().then(() => {\n      // download img from storage\n      downLoad().then((url) => {\n        userDb\n          .ref(`users/${userDetail.id}/${userDetail.pushId}`)\n          .update({ url })\n          .then(() => {\n            setLoading(false);\n            setImgurl(\"\");\n            setImgName(\"\");\n            setLocal(\"\");\n          })\n          .catch(() => {\n            setLoading(false);\n            setImgurl(\"\");\n            setImgName(\"\");\n            setLocal(\"\");\n          });\n      });\n    });\n  };\n  const handleLogout = () => {\n    auth\n      .signOut()\n      .then(() => {\n        dispatch(userlogOut(false));\n        dispatch(setCurrentUser({}));\n        dispatch(setAllGoals([]));\n        dispatch(setAllSelectedGoals([]));\n        dispatch(setCurrentUserOrganizationId(\"\"));\n        history.push(\"/login\");\n      })\n      .catch((err) => {});\n  };\n\n  // add user balance working\n  let [showpopUp, setshowpopUp] = useState(false);\n  let [userId, setUserId] = useState(\"\");\n  let [userBalance, setUserBalance] = useState();\n  let [alertPopup, setAlertPopup] = useState(false);\n  const handleShowInput = () => {\n    setUserId(selector.userReducer.currentUserOfOrganization[0].orgMainId);\n    setUserBalance(selector.userReducer.currentUserOfOrganization[0].balance);\n    setshowpopUp(true);\n  };\n\n  let [inpbBalance, setInpBalance] = useState(\"\");\n  const handleBalance = (event) => {\n    setInpBalance(event.target.value);\n    console.log(userId, userBalance);\n  };\n\n  // add user balance function\n  const handleAddUserBalance = () => {\n    if (Number(inpbBalance) >= 0) {\n      if (userDetail.orgId != \"\") {\n        db.ref(`organizations/${userDetail.orgId}/users/${userId}`)\n          .update({\n            balance:\n              // Number(inpbBalance)?\n              userBalance + Number(inpbBalance),\n            // : userBalance + 0\n          })\n          .then(() => {\n            setshowpopUp(false);\n            setInpBalance(\"\");\n            // console.log('added')\n          })\n          .catch(() => {\n            setshowpopUp(false);\n            // console.log('cancel')\n            setInpBalance(\"\");\n          });\n      } else {\n        db.ref(`withoutOrganization/users/${userId}`)\n          .update({\n            balance:\n              // Number(inpbBalance)?\n              userBalance + Number(inpbBalance),\n            // : userBalance + 0\n          })\n          .then(() => {\n            setshowpopUp(false);\n            setInpBalance(\"\");\n          })\n          .catch(() => {\n            setshowpopUp(false);\n            setInpBalance(\"\");\n          });\n      }\n    } else {\n      setshowpopUp(false);\n      setAlertPopup(true);\n    }\n  };\n\n  const handleClose = () => {\n    setInpBalance(\"\");\n    setshowpopUp(false);\n  };\n  const handleCloseTwo = () => {\n    setAlertPopup(false);\n    setInpBalance(\"\");\n\n  };\n\n  if (!userDetail) {\n    return <div>Loading</div>;\n  }\n\n  return (\n    <div className=\"userDetail_contaier\">\n      {showpopUp ? (\n        <AlertDialog\n          handleClose={handleClose}\n          open={showpopUp}\n          handleAddFunc={handleAddUserBalance}\n          value=\"Reported Successfull\"\n          btnValue=\"Add\"\n          balanceInput\n          handleChange={handleBalance}\n          inputValue={inpbBalance}\n          closeBtn\n        />\n      ) : null}\n      {alertPopup ? (\n        <AlertDialog\n          handleClose={handleCloseTwo}\n          open={alertPopup}\n          // handleAddFunc={handleClose}\n          value=\"Please Enter greater than 0 amount\"\n          btnValue=\"Ok\"\n        />\n      ) : null}\n      <div className=\"mobViewHead\">\n        <div className=\"mobViewHeadMain mobVwHead\">\n          <div className=\"mobViewHeadContent\">\n            <div className=\"mobHeadBack\">\n              <Link className=\"mobHeadBack_link\" to=\"/selec-goals\">\n                <ArrowBackIosIcon />\n              </Link>\n            </div>\n            <h2>Profile</h2>\n            <div className=\"headChatIcon\">\n              <TextsmsOutlinedIcon />\n            </div>\n            {/* mob view user info  */}\n            <div className=\"userInfoLeft mobView\">\n              {/* <img src={userDetail.url} alt=\"...\" /> */}\n              <div className=\"userDpAdd\">\n                <img src={userDetail.url ? userDetail.url : dp} alt=\"...\" />\n                <label htmlFor=\"goalImg\" className=\"dpImg\">\n                  <input\n                    type=\"file\"\n                    name=\"goalImg\"\n                    // required\n                    onChange={handleGoalImg}\n                    style={{ display: \"none\" }}\n                    id=\"goalImg\"\n                  />\n                  <AddAPhotoOutlinedIcon className=\"cmIcon\" />\n                </label>\n              </div>\n              {imgUrl ? (\n                <>\n                  <img className=\"dp_upload_img\" src={imgUrl} alt=\"...\" />\n                  <div className=\"uBtns\">\n                    <button\n                      disabled={loading}\n                      onClick={() => handleUploadProfileImg()}\n                    >\n                      {!loading ? \"Upload\" : \"loading...\"}\n                    </button>\n                    <button disabled={loading} onClick={() => handleCancel()}>\n                      Cancel\n                    </button>\n                  </div>\n                </>\n              ) : null}\n              <p className=\"uName\"> {userDetail.name}</p>\n              <p className=\"uEmail\"> {userDetail.email}</p>\n              <p className=\"uEmail\">Organization : {userDetail.orgName}</p>\n              <p className=\"uEmail\">\n                Balance :{\" \"}\n                {selector.userReducer.currentUserOfOrganization.length\n                  ? selector.userReducer.currentUserOfOrganization[0].balance\n                  : 0}\n              </p>\n            </div>\n            {/* end  */}\n          </div>\n        </div>\n      </div>\n      <div className=\"userDetail_md\">\n        <div className=\"userDetial_content\">\n          {/* buttons for mob view  */}\n          <div className=\"mobViewUserBtns\">\n            <MenuIcon className=\"uMenuIcon\" />\n            <div className=\"uBtns\">\n              <button>Premium</button>\n              <button>Free</button>\n            </div>\n          </div>\n          {/* end  */}\n          <div className=\"userDetail_box\">\n            {/* desktop view user info  */}\n            <div className=\"userInfoLeft desktopView\">\n              <Link to=\"/selec-goals\" className=\"Verifyback_link dpLinkB\">\n                <ArrowBackIcon className=\"orngBack\" />\n              </Link>\n              <div className=\"userDpAdd\">\n                <img src={userDetail.url ? userDetail.url : dp} alt=\"...\" />\n                <label htmlFor=\"goalImg\" className=\"dpImg\">\n                  <input\n                    type=\"file\"\n                    name=\"goalImg\"\n                    // required\n                    onChange={handleGoalImg}\n                    style={{ display: \"none\" }}\n                    id=\"goalImg\"\n                  />\n                  <AddAPhotoOutlinedIcon className=\"cmIcon\" />\n                </label>\n              </div>\n              {imgUrl ? (\n                <>\n                  <img className=\"dp_upload_img\" src={imgUrl} alt=\"...\" />\n                  <div className=\"uBtns\">\n                    <button\n                      disabled={loading}\n                      onClick={() => handleUploadProfileImg()}\n                    >\n                      {!loading ? \"Upload\" : \"loading...\"}\n                    </button>\n                    <button disabled={loading} onClick={() => handleCancel()}>\n                      Cancel\n                    </button>\n                  </div>\n                </>\n              ) : null}\n              <p className=\"uName\"> {userDetail.name}</p>\n              <p className=\"uEmail\"> {userDetail.email}</p>\n              <p className=\"uEmail\">Organization : {userDetail.orgName}</p>\n\n              <div className=\"uBtns\">\n                <button>Premium</button>\n                <button>Free</button>\n              </div>\n            </div>\n            {/* end  */}\n            <div className=\"userLinksRight\">\n              <div className=\"balnceBtn\">\n                <button onClick={() => handleShowInput()}>Add Balance</button>\n              </div>\n              <ul className=\"uLinks\">\n                <li>\n                  <p className=\"mLink\">Investing & Goals</p>\n                  <p className=\"subLinksName\">- Balances,List,Stats</p>\n                </li>\n                <li>\n                  <p className=\"mLink\">Transfers</p>\n                  <p className=\"subLinksName\">- Deposits,Withdrawls</p>\n                </li>\n                <li>\n                  <p className=\"mLink\">Statements & History</p>\n                  <p className=\"subLinksName\">- Docs,Tax,Activity</p>\n                </li>\n                <li>\n                  <p className=\"mLink\">Sections </p>\n                  <p className=\"subLinksName\">\n                    - Notifications,Disclosure(Tes)\n                  </p>\n                </li>\n                <li>\n                  <p className=\"mLink\">Help</p>\n                  <p className=\"subLinksName\">- Balances,List,Stats</p>\n                </li>\n                <li className=\"forMob\" onClick={() => handleLogout()}>\n                  LogOut\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UserDetailCard;\n",{"ruleId":"648","severity":1,"message":"649","line":89,"column":6,"nodeType":"650","endLine":89,"endColumn":8,"suggestions":"651"},{"ruleId":"652","severity":1,"message":"653","line":4,"column":8,"nodeType":"654","messageId":"655","endLine":4,"endColumn":14},{"ruleId":"652","severity":1,"message":"656","line":29,"column":8,"nodeType":"654","messageId":"655","endLine":29,"endColumn":24},{"ruleId":"648","severity":1,"message":"657","line":35,"column":6,"nodeType":"650","endLine":35,"endColumn":8,"suggestions":"658"},{"ruleId":"648","severity":1,"message":"659","line":71,"column":3,"nodeType":"654","endLine":71,"endColumn":12,"suggestions":"660"},{"ruleId":"648","severity":1,"message":"661","line":34,"column":6,"nodeType":"650","endLine":34,"endColumn":8,"suggestions":"662"},{"ruleId":"648","severity":1,"message":"657","line":27,"column":6,"nodeType":"650","endLine":27,"endColumn":8,"suggestions":"663"},{"ruleId":"648","severity":1,"message":"664","line":47,"column":6,"nodeType":"650","endLine":47,"endColumn":8,"suggestions":"665"},{"ruleId":"648","severity":1,"message":"666","line":72,"column":6,"nodeType":"650","endLine":72,"endColumn":8,"suggestions":"667"},{"ruleId":"648","severity":1,"message":"668","line":74,"column":5,"nodeType":"650","endLine":74,"endColumn":7,"suggestions":"669"},{"ruleId":"648","severity":1,"message":"670","line":45,"column":6,"nodeType":"650","endLine":45,"endColumn":8,"suggestions":"671"},{"ruleId":"648","severity":1,"message":"672","line":118,"column":6,"nodeType":"650","endLine":118,"endColumn":8,"suggestions":"673"},{"ruleId":"648","severity":1,"message":"670","line":49,"column":6,"nodeType":"650","endLine":49,"endColumn":8,"suggestions":"674"},{"ruleId":"648","severity":1,"message":"666","line":67,"column":6,"nodeType":"650","endLine":67,"endColumn":8,"suggestions":"675"},{"ruleId":"648","severity":1,"message":"668","line":71,"column":6,"nodeType":"650","endLine":71,"endColumn":8,"suggestions":"676"},{"ruleId":"648","severity":1,"message":"677","line":24,"column":6,"nodeType":"650","endLine":24,"endColumn":8,"suggestions":"678"},{"ruleId":"648","severity":1,"message":"677","line":24,"column":6,"nodeType":"650","endLine":24,"endColumn":8,"suggestions":"679"},{"ruleId":"648","severity":1,"message":"680","line":122,"column":6,"nodeType":"650","endLine":122,"endColumn":8,"suggestions":"681"},{"ruleId":"648","severity":1,"message":"682","line":41,"column":6,"nodeType":"650","endLine":41,"endColumn":8,"suggestions":"683"},{"ruleId":"684","severity":1,"message":"685","line":74,"column":35,"nodeType":"686","messageId":"687","endLine":74,"endColumn":37},{"ruleId":"684","severity":1,"message":"685","line":99,"column":35,"nodeType":"686","messageId":"687","endLine":99,"endColumn":37},{"ruleId":"648","severity":1,"message":"688","line":111,"column":6,"nodeType":"650","endLine":111,"endColumn":8,"suggestions":"689"},{"ruleId":"652","severity":1,"message":"690","line":19,"column":9,"nodeType":"654","messageId":"655","endLine":19,"endColumn":19},{"ruleId":"648","severity":1,"message":"691","line":84,"column":6,"nodeType":"650","endLine":84,"endColumn":8,"suggestions":"692"},{"ruleId":"648","severity":1,"message":"693","line":29,"column":5,"nodeType":"650","endLine":29,"endColumn":7,"suggestions":"694"},{"ruleId":"684","severity":1,"message":"685","line":145,"column":34,"nodeType":"686","messageId":"687","endLine":145,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":180,"column":34,"nodeType":"686","messageId":"687","endLine":180,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":190,"column":65,"nodeType":"686","messageId":"687","endLine":190,"endColumn":67},{"ruleId":"684","severity":1,"message":"685","line":245,"column":31,"nodeType":"686","messageId":"687","endLine":245,"endColumn":33},{"ruleId":"648","severity":1,"message":"695","line":95,"column":6,"nodeType":"650","endLine":95,"endColumn":8,"suggestions":"696"},{"ruleId":"684","severity":1,"message":"685","line":186,"column":33,"nodeType":"686","messageId":"687","endLine":186,"endColumn":35},{"ruleId":"684","severity":1,"message":"685","line":209,"column":35,"nodeType":"686","messageId":"687","endLine":209,"endColumn":37},{"ruleId":"648","severity":1,"message":"697","line":221,"column":6,"nodeType":"650","endLine":221,"endColumn":8,"suggestions":"698"},{"ruleId":"648","severity":1,"message":"699","line":32,"column":6,"nodeType":"650","endLine":32,"endColumn":8,"suggestions":"700"},{"ruleId":"648","severity":1,"message":"701","line":62,"column":6,"nodeType":"650","endLine":62,"endColumn":8,"suggestions":"702"},{"ruleId":"648","severity":1,"message":"701","line":56,"column":6,"nodeType":"650","endLine":56,"endColumn":8,"suggestions":"703"},{"ruleId":"648","severity":1,"message":"682","line":86,"column":6,"nodeType":"650","endLine":86,"endColumn":8,"suggestions":"704"},{"ruleId":"684","severity":1,"message":"685","line":121,"column":40,"nodeType":"686","messageId":"687","endLine":121,"endColumn":42},{"ruleId":"648","severity":1,"message":"705","line":192,"column":9,"nodeType":"706","endLine":231,"endColumn":4,"suggestions":"707"},{"ruleId":"648","severity":1,"message":"670","line":35,"column":6,"nodeType":"650","endLine":35,"endColumn":8,"suggestions":"708"},{"ruleId":"684","severity":1,"message":"685","line":156,"column":34,"nodeType":"686","messageId":"687","endLine":156,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":193,"column":34,"nodeType":"686","messageId":"687","endLine":193,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":206,"column":65,"nodeType":"686","messageId":"687","endLine":206,"endColumn":67},{"ruleId":"684","severity":1,"message":"685","line":275,"column":31,"nodeType":"686","messageId":"687","endLine":275,"endColumn":33},{"ruleId":"648","severity":1,"message":"670","line":33,"column":6,"nodeType":"650","endLine":33,"endColumn":8,"suggestions":"709"},{"ruleId":"652","severity":1,"message":"710","line":78,"column":45,"nodeType":"654","messageId":"655","endLine":78,"endColumn":57},{"ruleId":"652","severity":1,"message":"711","line":78,"column":59,"nodeType":"654","messageId":"655","endLine":78,"endColumn":71},{"ruleId":"652","severity":1,"message":"712","line":45,"column":22,"nodeType":"654","messageId":"655","endLine":45,"endColumn":27},{"ruleId":"652","severity":1,"message":"712","line":58,"column":22,"nodeType":"654","messageId":"655","endLine":58,"endColumn":27},{"ruleId":"713","severity":1,"message":"714","line":108,"column":28,"nodeType":"715","messageId":"716","endLine":108,"endColumn":30},{"ruleId":"648","severity":1,"message":"649","line":89,"column":6,"nodeType":"650","endLine":89,"endColumn":8,"suggestions":"717"},{"ruleId":"652","severity":1,"message":"653","line":4,"column":8,"nodeType":"654","messageId":"655","endLine":4,"endColumn":14},{"ruleId":"652","severity":1,"message":"656","line":29,"column":8,"nodeType":"654","messageId":"655","endLine":29,"endColumn":24},{"ruleId":"648","severity":1,"message":"657","line":35,"column":6,"nodeType":"650","endLine":35,"endColumn":8,"suggestions":"718"},{"ruleId":"648","severity":1,"message":"659","line":71,"column":3,"nodeType":"654","endLine":71,"endColumn":12,"suggestions":"719"},{"ruleId":"648","severity":1,"message":"657","line":27,"column":6,"nodeType":"650","endLine":27,"endColumn":8,"suggestions":"720"},{"ruleId":"648","severity":1,"message":"664","line":47,"column":6,"nodeType":"650","endLine":47,"endColumn":8,"suggestions":"721"},{"ruleId":"648","severity":1,"message":"672","line":118,"column":6,"nodeType":"650","endLine":118,"endColumn":8,"suggestions":"722"},{"ruleId":"648","severity":1,"message":"677","line":24,"column":6,"nodeType":"650","endLine":24,"endColumn":8,"suggestions":"723"},{"ruleId":"648","severity":1,"message":"666","line":72,"column":6,"nodeType":"650","endLine":72,"endColumn":8,"suggestions":"724"},{"ruleId":"648","severity":1,"message":"670","line":45,"column":6,"nodeType":"650","endLine":45,"endColumn":8,"suggestions":"725"},{"ruleId":"648","severity":1,"message":"668","line":71,"column":6,"nodeType":"650","endLine":71,"endColumn":8,"suggestions":"726"},{"ruleId":"648","severity":1,"message":"670","line":49,"column":6,"nodeType":"650","endLine":49,"endColumn":8,"suggestions":"727"},{"ruleId":"648","severity":1,"message":"666","line":67,"column":6,"nodeType":"650","endLine":67,"endColumn":8,"suggestions":"728"},{"ruleId":"648","severity":1,"message":"668","line":74,"column":5,"nodeType":"650","endLine":74,"endColumn":7,"suggestions":"729"},{"ruleId":"648","severity":1,"message":"661","line":34,"column":6,"nodeType":"650","endLine":34,"endColumn":8,"suggestions":"730"},{"ruleId":"648","severity":1,"message":"677","line":24,"column":6,"nodeType":"650","endLine":24,"endColumn":8,"suggestions":"731"},{"ruleId":"648","severity":1,"message":"680","line":122,"column":6,"nodeType":"650","endLine":122,"endColumn":8,"suggestions":"732"},{"ruleId":"684","severity":1,"message":"685","line":74,"column":35,"nodeType":"686","messageId":"687","endLine":74,"endColumn":37},{"ruleId":"684","severity":1,"message":"685","line":99,"column":35,"nodeType":"686","messageId":"687","endLine":99,"endColumn":37},{"ruleId":"648","severity":1,"message":"688","line":111,"column":6,"nodeType":"650","endLine":111,"endColumn":8,"suggestions":"733"},{"ruleId":"648","severity":1,"message":"682","line":41,"column":6,"nodeType":"650","endLine":41,"endColumn":8,"suggestions":"734"},{"ruleId":"652","severity":1,"message":"690","line":19,"column":9,"nodeType":"654","messageId":"655","endLine":19,"endColumn":19},{"ruleId":"648","severity":1,"message":"691","line":84,"column":6,"nodeType":"650","endLine":84,"endColumn":8,"suggestions":"735"},{"ruleId":"648","severity":1,"message":"693","line":29,"column":5,"nodeType":"650","endLine":29,"endColumn":7,"suggestions":"736"},{"ruleId":"684","severity":1,"message":"685","line":145,"column":34,"nodeType":"686","messageId":"687","endLine":145,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":180,"column":34,"nodeType":"686","messageId":"687","endLine":180,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":190,"column":65,"nodeType":"686","messageId":"687","endLine":190,"endColumn":67},{"ruleId":"684","severity":1,"message":"685","line":245,"column":31,"nodeType":"686","messageId":"687","endLine":245,"endColumn":33},{"ruleId":"648","severity":1,"message":"695","line":95,"column":6,"nodeType":"650","endLine":95,"endColumn":8,"suggestions":"737"},{"ruleId":"684","severity":1,"message":"685","line":186,"column":33,"nodeType":"686","messageId":"687","endLine":186,"endColumn":35},{"ruleId":"684","severity":1,"message":"685","line":209,"column":35,"nodeType":"686","messageId":"687","endLine":209,"endColumn":37},{"ruleId":"648","severity":1,"message":"697","line":221,"column":6,"nodeType":"650","endLine":221,"endColumn":8,"suggestions":"738"},{"ruleId":"648","severity":1,"message":"699","line":32,"column":6,"nodeType":"650","endLine":32,"endColumn":8,"suggestions":"739"},{"ruleId":"648","severity":1,"message":"701","line":62,"column":6,"nodeType":"650","endLine":62,"endColumn":8,"suggestions":"740"},{"ruleId":"648","severity":1,"message":"701","line":56,"column":6,"nodeType":"650","endLine":56,"endColumn":8,"suggestions":"741"},{"ruleId":"684","severity":1,"message":"685","line":121,"column":40,"nodeType":"686","messageId":"687","endLine":121,"endColumn":42},{"ruleId":"648","severity":1,"message":"705","line":192,"column":9,"nodeType":"706","endLine":231,"endColumn":4,"suggestions":"742"},{"ruleId":"648","severity":1,"message":"682","line":86,"column":6,"nodeType":"650","endLine":86,"endColumn":8,"suggestions":"743"},{"ruleId":"648","severity":1,"message":"670","line":35,"column":6,"nodeType":"650","endLine":35,"endColumn":8,"suggestions":"744"},{"ruleId":"648","severity":1,"message":"670","line":33,"column":6,"nodeType":"650","endLine":33,"endColumn":8,"suggestions":"745"},{"ruleId":"652","severity":1,"message":"710","line":78,"column":45,"nodeType":"654","messageId":"655","endLine":78,"endColumn":57},{"ruleId":"652","severity":1,"message":"711","line":78,"column":59,"nodeType":"654","messageId":"655","endLine":78,"endColumn":71},{"ruleId":"684","severity":1,"message":"685","line":156,"column":34,"nodeType":"686","messageId":"687","endLine":156,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":193,"column":34,"nodeType":"686","messageId":"687","endLine":193,"endColumn":36},{"ruleId":"684","severity":1,"message":"685","line":206,"column":65,"nodeType":"686","messageId":"687","endLine":206,"endColumn":67},{"ruleId":"684","severity":1,"message":"685","line":275,"column":31,"nodeType":"686","messageId":"687","endLine":275,"endColumn":33},{"ruleId":"652","severity":1,"message":"712","line":45,"column":22,"nodeType":"654","messageId":"655","endLine":45,"endColumn":27},{"ruleId":"652","severity":1,"message":"712","line":58,"column":22,"nodeType":"654","messageId":"655","endLine":58,"endColumn":27},{"ruleId":"713","severity":1,"message":"714","line":108,"column":28,"nodeType":"715","messageId":"716","endLine":108,"endColumn":30},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'auth', 'db', and 'dispatch'. Either include them or remove the dependency array.","ArrayExpression",["746"],"no-unused-vars","'logger' is defined but never used.","Identifier","unusedVar","'VerificationPage' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'selector.userReducer.selectedGoals'. Either include them or remove the dependency array.",["747"],"React Hook useEffect contains a call to 'setLoader'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [loader, timeLeft, calculateTime] as a second argument to the useEffect Hook.",["748"],"React Hook useEffect has missing dependencies: 'id' and 'selector.userReducer.allGoalsOfOrg'. Either include them or remove the dependency array.",["749"],["750"],"React Hook useEffect has missing dependencies: 'dispatch' and 'userDetail'. Either include them or remove the dependency array.",["751"],"React Hook useEffect has missing dependencies: 'getCategories', 'goal', and 'goals'. Either include them or remove the dependency array.",["752"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["753"],"React Hook useEffect has a missing dependency: 'getFilterOrgGoals'. Either include it or remove the dependency array.",["754"],"React Hook useEffect has missing dependencies: 'dispatch', 'getFilterOrgGoals', and 'id'. Either include them or remove the dependency array.",["755"],["756"],["757"],["758"],"React Hook useEffect has missing dependencies: 'goal' and 'goals'. Either include them or remove the dependency array.",["759"],["760"],"React Hook useEffect has missing dependencies: 'dispatch' and 'getFilterOrgGoals'. Either include them or remove the dependency array.",["761"],"React Hook useEffect has missing dependencies: 'getCategories' and 'selector.goalReducer.currentUser.orgId'. Either include them or remove the dependency array.",["762"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'db', 'dispatch', 'getGoals', 'getSubmittedGoalsOfUser', 'goalReducer.currentUser.email', 'goalReducer.currentUser.orgId', and 'userDetail.goalReducer.currentUser.orgId'. Either include them or remove the dependency array.",["763"],"'submitGoal' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllUsersGoals', 'getGoalsComments', 'getGoalsLikes', and 'userDetail.orgId'. Either include them or remove the dependency array.",["764"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["765"],"React Hook useEffect has missing dependencies: 'dispatch' and 'userInfo'. Either include them or remove the dependency array.",["766"],"React Hook useEffect has missing dependencies: 'db', 'dispatch', 'getSelectedGoalsOfUser', 'goalReducer.currentUser.email', 'goalReducer.currentUser.orgId', and 'userDetail.goalReducer.currentUser.orgId'. Either include them or remove the dependency array.",["767"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["768"],"React Hook useEffect has a missing dependency: 'ref'. Either include it or remove the dependency array.",["769"],["770"],["771"],"The 'handleAddComment' function makes the dependencies of useEffect Hook (at line 240) change on every render. To fix this, wrap the definition of 'handleAddComment' in its own useCallback() Hook.","VariableDeclarator",["772"],["773"],["774"],"'peopleJoined' is assigned a value but never used.","'numberOfDays' is assigned a value but never used.","'style' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["775"],["776"],["777"],["778"],["779"],["780"],["781"],["782"],["783"],["784"],["785"],["786"],["787"],["788"],["789"],["790"],["791"],["792"],["793"],["794"],["795"],["796"],["797"],["798"],["799"],["800"],["801"],["802"],["803"],{"desc":"804","fix":"805"},{"desc":"806","fix":"807"},{"desc":"808","fix":"809"},{"desc":"810","fix":"811"},{"desc":"806","fix":"812"},{"desc":"813","fix":"814"},{"desc":"815","fix":"816"},{"desc":"817","fix":"818"},{"desc":"819","fix":"820"},{"desc":"821","fix":"822"},{"desc":"819","fix":"823"},{"desc":"815","fix":"824"},{"desc":"817","fix":"825"},{"desc":"826","fix":"827"},{"desc":"826","fix":"828"},{"desc":"829","fix":"830"},{"desc":"831","fix":"832"},{"desc":"833","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},{"desc":"845","fix":"847"},{"desc":"831","fix":"848"},{"desc":"849","fix":"850"},{"desc":"819","fix":"851"},{"desc":"819","fix":"852"},{"desc":"804","fix":"853"},{"desc":"806","fix":"854"},{"desc":"808","fix":"855"},{"desc":"806","fix":"856"},{"desc":"813","fix":"857"},{"desc":"821","fix":"858"},{"desc":"826","fix":"859"},{"desc":"815","fix":"860"},{"desc":"819","fix":"861"},{"desc":"817","fix":"862"},{"desc":"819","fix":"863"},{"desc":"815","fix":"864"},{"desc":"817","fix":"865"},{"desc":"810","fix":"866"},{"desc":"826","fix":"867"},{"desc":"829","fix":"868"},{"desc":"833","fix":"869"},{"desc":"831","fix":"870"},{"desc":"835","fix":"871"},{"desc":"837","fix":"872"},{"desc":"839","fix":"873"},{"desc":"841","fix":"874"},{"desc":"843","fix":"875"},{"desc":"845","fix":"876"},{"desc":"845","fix":"877"},{"desc":"849","fix":"878"},{"desc":"831","fix":"879"},{"desc":"819","fix":"880"},{"desc":"819","fix":"881"},"Update the dependencies array to be: [auth, db, dispatch]",{"range":"882","text":"883"},"Update the dependencies array to be: [id, selector.userReducer.selectedGoals]",{"range":"884","text":"885"},"Add dependencies array: [loader, timeLeft, calculateTime]",{"range":"886","text":"887"},"Update the dependencies array to be: [id, selector.userReducer.allGoalsOfOrg]",{"range":"888","text":"889"},{"range":"890","text":"885"},"Update the dependencies array to be: [dispatch, userDetail]",{"range":"891","text":"892"},"Update the dependencies array to be: [getCategories, goal, goals]",{"range":"893","text":"894"},"Update the dependencies array to be: [getCategories]",{"range":"895","text":"896"},"Update the dependencies array to be: [getFilterOrgGoals]",{"range":"897","text":"898"},"Update the dependencies array to be: [dispatch, getFilterOrgGoals, id]",{"range":"899","text":"900"},{"range":"901","text":"898"},{"range":"902","text":"894"},{"range":"903","text":"896"},"Update the dependencies array to be: [goal, goals]",{"range":"904","text":"905"},{"range":"906","text":"905"},"Update the dependencies array to be: [dispatch, getFilterOrgGoals]",{"range":"907","text":"908"},"Update the dependencies array to be: [getCategories, selector.goalReducer.currentUser.orgId]",{"range":"909","text":"910"},"Update the dependencies array to be: [db, dispatch, getGoals, getSubmittedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",{"range":"911","text":"912"},"Update the dependencies array to be: [getAllUsersGoals, getGoalsComments, getGoalsLikes, userDetail.orgId]",{"range":"913","text":"914"},"Update the dependencies array to be: [dispatch]",{"range":"915","text":"916"},"Update the dependencies array to be: [dispatch, userInfo]",{"range":"917","text":"918"},"Update the dependencies array to be: [db, dispatch, getSelectedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",{"range":"919","text":"920"},"Update the dependencies array to be: [dispatch, id]",{"range":"921","text":"922"},"Update the dependencies array to be: [ref]",{"range":"923","text":"924"},{"range":"925","text":"924"},{"range":"926","text":"910"},"Wrap the definition of 'handleAddComment' in its own useCallback() Hook.",{"range":"927","text":"928"},{"range":"929","text":"898"},{"range":"930","text":"898"},{"range":"931","text":"883"},{"range":"932","text":"885"},{"range":"933","text":"887"},{"range":"934","text":"885"},{"range":"935","text":"892"},{"range":"936","text":"900"},{"range":"937","text":"905"},{"range":"938","text":"894"},{"range":"939","text":"898"},{"range":"940","text":"896"},{"range":"941","text":"898"},{"range":"942","text":"894"},{"range":"943","text":"896"},{"range":"944","text":"889"},{"range":"945","text":"905"},{"range":"946","text":"908"},{"range":"947","text":"912"},{"range":"948","text":"910"},{"range":"949","text":"914"},{"range":"950","text":"916"},{"range":"951","text":"918"},{"range":"952","text":"920"},{"range":"953","text":"922"},{"range":"954","text":"924"},{"range":"955","text":"924"},{"range":"956","text":"928"},{"range":"957","text":"910"},{"range":"958","text":"898"},{"range":"959","text":"898"},[2666,2668],"[auth, db, dispatch]",[1226,1228],"[id, selector.userReducer.selectedGoals]",[2669,2669],", [loader, timeLeft, calculateTime]",[1306,1308],"[id, selector.userReducer.allGoalsOfOrg]",[924,926],[1510,1512],"[dispatch, userDetail]",[1987,1989],"[getCategories, goal, goals]",[2133,2135],"[getCategories]",[1462,1464],"[getFilterOrgGoals]",[3482,3484],"[dispatch, getFilterOrgGoals, id]",[1546,1548],[2023,2025],[2135,2137],[839,841],"[goal, goals]",[857,859],[3602,3604],"[dispatch, getFilterOrgGoals]",[1175,1177],"[getCategories, selector.goalReducer.currentUser.orgId]",[3744,3746],"[db, dispatch, getGoals, getSubmittedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",[2823,2825],"[getAllUsersGoals, getGoalsComments, getGoalsLikes, userDetail.orgId]",[889,891],"[dispatch]",[3018,3020],"[dispatch, userInfo]",[7105,7107],"[db, dispatch, getSelectedGoalsOfUser, goalReducer.currentUser.email, goalReducer.currentUser.orgId, userDetail.goalReducer.currentUser.orgId]",[962,964],"[dispatch, id]",[1688,1690],"[ref]",[1716,1718],[2112,2114],[6066,7262],"useCallback((event) => {\n    setCommentLoad(true)\n    console.log(event, goalReducer.currentUser)\n    if (comment.length > 0) {\n      if (goalReducer.currentUser.orgId !== '') {\n        db.ref(\n          `organizations/${goalReducer.currentUser.orgId}/comments/${event.orgMainId}`,\n        )\n          .push()\n          .set({\n            uid: goalReducer.currentUser.id,\n            userName: goalReducer.currentUser.name,\n            userImg: goalReducer.currentUser.url\n              ? goalReducer.currentUser.url\n              : '',\n            comment: comment,\n            goalId: event.orgMainId,\n          })\n        setComment('')\n        setCommentLoad(false)\n      } else {\n        db.ref(`withoutOrganization/comments/${event.orgMainId}`)\n          .push()\n          .set({\n            uid: goalReducer.currentUser.id,\n            userName: goalReducer.currentUser.name,\n            userImg: goalReducer.currentUser.url\n              ? goalReducer.currentUser.url\n              : '',\n            comment: comment,\n            goalId: event.orgMainId,\n          })\n        setComment('')\n        setCommentLoad(false)\n      }\n    }\n    // else {\n    //   alert('please enter comment')\n    // }\n  })",[1166,1168],[1128,1130],[2666,2668],[1226,1228],[2669,2669],[924,926],[1510,1512],[3482,3484],[839,841],[1987,1989],[1462,1464],[2135,2137],[1546,1548],[2023,2025],[2133,2135],[1306,1308],[857,859],[3602,3604],[3744,3746],[1175,1177],[2823,2825],[889,891],[3018,3020],[7105,7107],[962,964],[1688,1690],[1716,1718],[6066,7262],[2112,2114],[1166,1168],[1128,1130]]